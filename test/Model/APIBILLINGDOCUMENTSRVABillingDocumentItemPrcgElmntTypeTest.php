<?php
/**
 * APIBILLINGDOCUMENTSRVABillingDocumentItemPrcgElmntTypeTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\BillingDocumentRCG2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Billing Document - Read, Cancel, GetPDF
 *
 * Consumers of this inbound service can read and cancel billing documents inside your system by sending OData requests. In addition, they can request entire billing documents in PDF format. The service makes billing document data available through its header, item, business partner, and pricing element entities.
 *
 * The version of the OpenAPI document: 1.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace BeLenka\SAP\BillingDocumentRCG2\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * APIBILLINGDOCUMENTSRVABillingDocumentItemPrcgElmntTypeTest Class Doc Comment
 *
 * @category    Class
 * @description APIBILLINGDOCUMENTSRVABillingDocumentItemPrcgElmntType
 * @package     BeLenka\SAP\BillingDocumentRCG2
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class APIBILLINGDOCUMENTSRVABillingDocumentItemPrcgElmntTypeTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "APIBILLINGDOCUMENTSRVABillingDocumentItemPrcgElmntType"
     */
    public function testAPIBILLINGDOCUMENTSRVABillingDocumentItemPrcgElmntType()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "billing_document"
     */
    public function testPropertyBillingDocument()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "billing_document_item"
     */
    public function testPropertyBillingDocumentItem()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "pricing_procedure_step"
     */
    public function testPropertyPricingProcedureStep()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "pricing_procedure_counter"
     */
    public function testPropertyPricingProcedureCounter()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "condition_type"
     */
    public function testPropertyConditionType()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "pricing_date_time"
     */
    public function testPropertyPricingDateTime()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "condition_calculation_type"
     */
    public function testPropertyConditionCalculationType()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "condition_base_value"
     */
    public function testPropertyConditionBaseValue()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "condition_rate_value"
     */
    public function testPropertyConditionRateValue()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "condition_currency"
     */
    public function testPropertyConditionCurrency()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "condition_quantity"
     */
    public function testPropertyConditionQuantity()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "condition_quantity_unit"
     */
    public function testPropertyConditionQuantityUnit()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "condition_category"
     */
    public function testPropertyConditionCategory()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "condition_is_for_statistics"
     */
    public function testPropertyConditionIsForStatistics()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "pricing_scale_type"
     */
    public function testPropertyPricingScaleType()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "is_relevant_for_accrual"
     */
    public function testPropertyIsRelevantForAccrual()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "cndn_is_relevant_for_invoice_list"
     */
    public function testPropertyCndnIsRelevantForInvoiceList()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "condition_origin"
     */
    public function testPropertyConditionOrigin()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "is_group_condition"
     */
    public function testPropertyIsGroupCondition()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "condition_record"
     */
    public function testPropertyConditionRecord()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "condition_sequential_number"
     */
    public function testPropertyConditionSequentialNumber()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "tax_code"
     */
    public function testPropertyTaxCode()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "withholding_tax_code"
     */
    public function testPropertyWithholdingTaxCode()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "cndn_rounding_off_diff_amount"
     */
    public function testPropertyCndnRoundingOffDiffAmount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "condition_amount"
     */
    public function testPropertyConditionAmount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "transaction_currency"
     */
    public function testPropertyTransactionCurrency()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "condition_control"
     */
    public function testPropertyConditionControl()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "condition_inactive_reason"
     */
    public function testPropertyConditionInactiveReason()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "condition_class"
     */
    public function testPropertyConditionClass()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "prcg_procedure_counter_for_header"
     */
    public function testPropertyPrcgProcedureCounterForHeader()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "factor_for_condition_basis_value"
     */
    public function testPropertyFactorForConditionBasisValue()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "structure_condition"
     */
    public function testPropertyStructureCondition()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "period_factor_for_cndn_basis_value"
     */
    public function testPropertyPeriodFactorForCndnBasisValue()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "pricing_scale_basis"
     */
    public function testPropertyPricingScaleBasis()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "condition_scale_basis_value"
     */
    public function testPropertyConditionScaleBasisValue()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "condition_scale_basis_unit"
     */
    public function testPropertyConditionScaleBasisUnit()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "condition_scale_basis_currency"
     */
    public function testPropertyConditionScaleBasisCurrency()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "cndn_is_relevant_for_intco_billing"
     */
    public function testPropertyCndnIsRelevantForIntcoBilling()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "condition_is_manually_changed"
     */
    public function testPropertyConditionIsManuallyChanged()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "condition_is_for_configuration"
     */
    public function testPropertyConditionIsForConfiguration()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "variant_condition"
     */
    public function testPropertyVariantCondition()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "to_billing_document"
     */
    public function testPropertyToBillingDocument()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "to_billing_document_item"
     */
    public function testPropertyToBillingDocumentItem()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
