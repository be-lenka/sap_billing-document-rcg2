<?php
/**
 * BillingDocumentHeaderApi
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\BillingDocumentRCG2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Billing Document - Read, Cancel, GetPDF
 *
 * Consumers of this inbound service can read and cancel billing documents inside your system by sending OData requests. In addition, they can request entire billing documents in PDF format. The service makes billing document data available through its header, item, business partner, and pricing element entities.
 *
 * The version of the OpenAPI document: 1.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\BillingDocumentRCG2\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use BeLenka\SAP\BillingDocumentRCG2\ApiException;
use BeLenka\SAP\BillingDocumentRCG2\Configuration;
use BeLenka\SAP\BillingDocumentRCG2\HeaderSelector;
use BeLenka\SAP\BillingDocumentRCG2\ObjectSerializer;

/**
 * BillingDocumentHeaderApi Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\BillingDocumentRCG2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BillingDocumentHeaderApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'aBillingDocumentBillingDocumentGet' => [
            'application/json',
        ],
        'aBillingDocumentBillingDocumentToItemGet' => [
            'application/json',
        ],
        'aBillingDocumentBillingDocumentToPartnerGet' => [
            'application/json',
        ],
        'aBillingDocumentBillingDocumentToPricingElementGet' => [
            'application/json',
        ],
        'aBillingDocumentBillingDocumentToTextGet' => [
            'application/json',
        ],
        'aBillingDocumentGet' => [
            'application/json',
        ],
        'aBillingDocumentItemBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemToBillingDocumentGet' => [
            'application/json',
        ],
        'aBillingDocumentItemPartnerBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPartnerFunctionPartnerFunctionToBillingDocumentGet' => [
            'application/json',
        ],
        'aBillingDocumentItemPrcgElmntBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGet' => [
            'application/json',
        ],
        'aBillingDocumentPartnerBillingDocumentBillingDocumentPartnerFunctionPartnerFunctionToBillingDocumentGet' => [
            'application/json',
        ],
        'aBillingDocumentPrcgElmntBillingDocumentBillingDocumentPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGet' => [
            'application/json',
        ],
        'cancelPost' => [
            'application/json',
        ],
        'getPDFGet' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation aBillingDocumentBillingDocumentGet
     *
     * Reads the header of a specific billing document.
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentRCG2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BillingDocumentRCG2\Model\ABillingDocumentType|\BeLenka\SAP\BillingDocumentRCG2\Model\Error
     */
    public function aBillingDocumentBillingDocumentGet($billing_document, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentBillingDocumentGet'][0])
    {
        list($response) = $this->aBillingDocumentBillingDocumentGetWithHttpInfo($billing_document, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aBillingDocumentBillingDocumentGetWithHttpInfo
     *
     * Reads the header of a specific billing document.
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentRCG2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BillingDocumentRCG2\Model\ABillingDocumentType|\BeLenka\SAP\BillingDocumentRCG2\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBillingDocumentBillingDocumentGetWithHttpInfo($billing_document, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentBillingDocumentGet'][0])
    {
        $request = $this->aBillingDocumentBillingDocumentGetRequest($billing_document, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BillingDocumentRCG2\Model\ABillingDocumentType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BillingDocumentRCG2\Model\ABillingDocumentType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BillingDocumentRCG2\Model\ABillingDocumentType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BillingDocumentRCG2\Model\ABillingDocumentType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BillingDocumentRCG2\Model\ABillingDocumentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBillingDocumentBillingDocumentGetAsync
     *
     * Reads the header of a specific billing document.
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBillingDocumentBillingDocumentGetAsync($billing_document, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentBillingDocumentGet'][0])
    {
        return $this->aBillingDocumentBillingDocumentGetAsyncWithHttpInfo($billing_document, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBillingDocumentBillingDocumentGetAsyncWithHttpInfo
     *
     * Reads the header of a specific billing document.
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBillingDocumentBillingDocumentGetAsyncWithHttpInfo($billing_document, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentBillingDocumentGet'][0])
    {
        $returnType = '\BeLenka\SAP\BillingDocumentRCG2\Model\ABillingDocumentType';
        $request = $this->aBillingDocumentBillingDocumentGetRequest($billing_document, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBillingDocumentBillingDocumentGet'
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBillingDocumentBillingDocumentGetRequest($billing_document, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentBillingDocumentGet'][0])
    {

        // verify the required parameter 'billing_document' is set
        if ($billing_document === null || (is_array($billing_document) && count($billing_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_document when calling aBillingDocumentBillingDocumentGet'
            );
        }
        if (strlen($billing_document) > 10) {
            throw new \InvalidArgumentException('invalid length for "$billing_document" when calling BillingDocumentHeaderApi.aBillingDocumentBillingDocumentGet, must be smaller than or equal to 10.');
        }
        
        
        

        $resourcePath = '/A_BillingDocument(\'{BillingDocument}\')';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($billing_document !== null) {
            $resourcePath = str_replace(
                '{' . 'BillingDocument' . '}',
                ObjectSerializer::toPathValue($billing_document),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aBillingDocumentBillingDocumentToItemGet
     *
     * Reads all items of a specific billing document.
     *
     * @param  string $billing_document Billing Document (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentBillingDocumentToItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentRCG2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BillingDocumentRCG2\Model\Wrapper1|\BeLenka\SAP\BillingDocumentRCG2\Model\Error
     */
    public function aBillingDocumentBillingDocumentToItemGet($billing_document, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentBillingDocumentToItemGet'][0])
    {
        list($response) = $this->aBillingDocumentBillingDocumentToItemGetWithHttpInfo($billing_document, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aBillingDocumentBillingDocumentToItemGetWithHttpInfo
     *
     * Reads all items of a specific billing document.
     *
     * @param  string $billing_document Billing Document (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentBillingDocumentToItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentRCG2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BillingDocumentRCG2\Model\Wrapper1|\BeLenka\SAP\BillingDocumentRCG2\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBillingDocumentBillingDocumentToItemGetWithHttpInfo($billing_document, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentBillingDocumentToItemGet'][0])
    {
        $request = $this->aBillingDocumentBillingDocumentToItemGetRequest($billing_document, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BillingDocumentRCG2\Model\Wrapper1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BillingDocumentRCG2\Model\Wrapper1' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BillingDocumentRCG2\Model\Wrapper1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BillingDocumentRCG2\Model\Wrapper1';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BillingDocumentRCG2\Model\Wrapper1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBillingDocumentBillingDocumentToItemGetAsync
     *
     * Reads all items of a specific billing document.
     *
     * @param  string $billing_document Billing Document (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentBillingDocumentToItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBillingDocumentBillingDocumentToItemGetAsync($billing_document, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentBillingDocumentToItemGet'][0])
    {
        return $this->aBillingDocumentBillingDocumentToItemGetAsyncWithHttpInfo($billing_document, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBillingDocumentBillingDocumentToItemGetAsyncWithHttpInfo
     *
     * Reads all items of a specific billing document.
     *
     * @param  string $billing_document Billing Document (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentBillingDocumentToItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBillingDocumentBillingDocumentToItemGetAsyncWithHttpInfo($billing_document, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentBillingDocumentToItemGet'][0])
    {
        $returnType = '\BeLenka\SAP\BillingDocumentRCG2\Model\Wrapper1';
        $request = $this->aBillingDocumentBillingDocumentToItemGetRequest($billing_document, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBillingDocumentBillingDocumentToItemGet'
     *
     * @param  string $billing_document Billing Document (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentBillingDocumentToItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBillingDocumentBillingDocumentToItemGetRequest($billing_document, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentBillingDocumentToItemGet'][0])
    {

        // verify the required parameter 'billing_document' is set
        if ($billing_document === null || (is_array($billing_document) && count($billing_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_document when calling aBillingDocumentBillingDocumentToItemGet'
            );
        }
        if (strlen($billing_document) > 10) {
            throw new \InvalidArgumentException('invalid length for "$billing_document" when calling BillingDocumentHeaderApi.aBillingDocumentBillingDocumentToItemGet, must be smaller than or equal to 10.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling BillingDocumentHeaderApi.aBillingDocumentBillingDocumentToItemGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling BillingDocumentHeaderApi.aBillingDocumentBillingDocumentToItemGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/A_BillingDocument(\'{BillingDocument}\')/to_Item';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($billing_document !== null) {
            $resourcePath = str_replace(
                '{' . 'BillingDocument' . '}',
                ObjectSerializer::toPathValue($billing_document),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aBillingDocumentBillingDocumentToPartnerGet
     *
     * Reads the header business partners of a specific billing document.
     *
     * @param  string $billing_document Billing Document (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentBillingDocumentToPartnerGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentRCG2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BillingDocumentRCG2\Model\Wrapper2|\BeLenka\SAP\BillingDocumentRCG2\Model\Error
     */
    public function aBillingDocumentBillingDocumentToPartnerGet($billing_document, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentBillingDocumentToPartnerGet'][0])
    {
        list($response) = $this->aBillingDocumentBillingDocumentToPartnerGetWithHttpInfo($billing_document, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aBillingDocumentBillingDocumentToPartnerGetWithHttpInfo
     *
     * Reads the header business partners of a specific billing document.
     *
     * @param  string $billing_document Billing Document (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentBillingDocumentToPartnerGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentRCG2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BillingDocumentRCG2\Model\Wrapper2|\BeLenka\SAP\BillingDocumentRCG2\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBillingDocumentBillingDocumentToPartnerGetWithHttpInfo($billing_document, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentBillingDocumentToPartnerGet'][0])
    {
        $request = $this->aBillingDocumentBillingDocumentToPartnerGetRequest($billing_document, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BillingDocumentRCG2\Model\Wrapper2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BillingDocumentRCG2\Model\Wrapper2' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BillingDocumentRCG2\Model\Wrapper2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BillingDocumentRCG2\Model\Wrapper2';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BillingDocumentRCG2\Model\Wrapper2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBillingDocumentBillingDocumentToPartnerGetAsync
     *
     * Reads the header business partners of a specific billing document.
     *
     * @param  string $billing_document Billing Document (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentBillingDocumentToPartnerGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBillingDocumentBillingDocumentToPartnerGetAsync($billing_document, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentBillingDocumentToPartnerGet'][0])
    {
        return $this->aBillingDocumentBillingDocumentToPartnerGetAsyncWithHttpInfo($billing_document, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBillingDocumentBillingDocumentToPartnerGetAsyncWithHttpInfo
     *
     * Reads the header business partners of a specific billing document.
     *
     * @param  string $billing_document Billing Document (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentBillingDocumentToPartnerGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBillingDocumentBillingDocumentToPartnerGetAsyncWithHttpInfo($billing_document, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentBillingDocumentToPartnerGet'][0])
    {
        $returnType = '\BeLenka\SAP\BillingDocumentRCG2\Model\Wrapper2';
        $request = $this->aBillingDocumentBillingDocumentToPartnerGetRequest($billing_document, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBillingDocumentBillingDocumentToPartnerGet'
     *
     * @param  string $billing_document Billing Document (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentBillingDocumentToPartnerGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBillingDocumentBillingDocumentToPartnerGetRequest($billing_document, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentBillingDocumentToPartnerGet'][0])
    {

        // verify the required parameter 'billing_document' is set
        if ($billing_document === null || (is_array($billing_document) && count($billing_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_document when calling aBillingDocumentBillingDocumentToPartnerGet'
            );
        }
        if (strlen($billing_document) > 10) {
            throw new \InvalidArgumentException('invalid length for "$billing_document" when calling BillingDocumentHeaderApi.aBillingDocumentBillingDocumentToPartnerGet, must be smaller than or equal to 10.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling BillingDocumentHeaderApi.aBillingDocumentBillingDocumentToPartnerGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling BillingDocumentHeaderApi.aBillingDocumentBillingDocumentToPartnerGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/A_BillingDocument(\'{BillingDocument}\')/to_Partner';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($billing_document !== null) {
            $resourcePath = str_replace(
                '{' . 'BillingDocument' . '}',
                ObjectSerializer::toPathValue($billing_document),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aBillingDocumentBillingDocumentToPricingElementGet
     *
     * Reads the header pricing elements of a specific billing document.
     *
     * @param  string $billing_document Billing Document (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentBillingDocumentToPricingElementGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentRCG2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BillingDocumentRCG2\Model\Wrapper3|\BeLenka\SAP\BillingDocumentRCG2\Model\Error
     */
    public function aBillingDocumentBillingDocumentToPricingElementGet($billing_document, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentBillingDocumentToPricingElementGet'][0])
    {
        list($response) = $this->aBillingDocumentBillingDocumentToPricingElementGetWithHttpInfo($billing_document, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aBillingDocumentBillingDocumentToPricingElementGetWithHttpInfo
     *
     * Reads the header pricing elements of a specific billing document.
     *
     * @param  string $billing_document Billing Document (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentBillingDocumentToPricingElementGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentRCG2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BillingDocumentRCG2\Model\Wrapper3|\BeLenka\SAP\BillingDocumentRCG2\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBillingDocumentBillingDocumentToPricingElementGetWithHttpInfo($billing_document, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentBillingDocumentToPricingElementGet'][0])
    {
        $request = $this->aBillingDocumentBillingDocumentToPricingElementGetRequest($billing_document, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BillingDocumentRCG2\Model\Wrapper3' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BillingDocumentRCG2\Model\Wrapper3' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BillingDocumentRCG2\Model\Wrapper3', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BillingDocumentRCG2\Model\Wrapper3';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BillingDocumentRCG2\Model\Wrapper3',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBillingDocumentBillingDocumentToPricingElementGetAsync
     *
     * Reads the header pricing elements of a specific billing document.
     *
     * @param  string $billing_document Billing Document (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentBillingDocumentToPricingElementGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBillingDocumentBillingDocumentToPricingElementGetAsync($billing_document, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentBillingDocumentToPricingElementGet'][0])
    {
        return $this->aBillingDocumentBillingDocumentToPricingElementGetAsyncWithHttpInfo($billing_document, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBillingDocumentBillingDocumentToPricingElementGetAsyncWithHttpInfo
     *
     * Reads the header pricing elements of a specific billing document.
     *
     * @param  string $billing_document Billing Document (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentBillingDocumentToPricingElementGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBillingDocumentBillingDocumentToPricingElementGetAsyncWithHttpInfo($billing_document, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentBillingDocumentToPricingElementGet'][0])
    {
        $returnType = '\BeLenka\SAP\BillingDocumentRCG2\Model\Wrapper3';
        $request = $this->aBillingDocumentBillingDocumentToPricingElementGetRequest($billing_document, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBillingDocumentBillingDocumentToPricingElementGet'
     *
     * @param  string $billing_document Billing Document (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentBillingDocumentToPricingElementGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBillingDocumentBillingDocumentToPricingElementGetRequest($billing_document, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentBillingDocumentToPricingElementGet'][0])
    {

        // verify the required parameter 'billing_document' is set
        if ($billing_document === null || (is_array($billing_document) && count($billing_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_document when calling aBillingDocumentBillingDocumentToPricingElementGet'
            );
        }
        if (strlen($billing_document) > 10) {
            throw new \InvalidArgumentException('invalid length for "$billing_document" when calling BillingDocumentHeaderApi.aBillingDocumentBillingDocumentToPricingElementGet, must be smaller than or equal to 10.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling BillingDocumentHeaderApi.aBillingDocumentBillingDocumentToPricingElementGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling BillingDocumentHeaderApi.aBillingDocumentBillingDocumentToPricingElementGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/A_BillingDocument(\'{BillingDocument}\')/to_PricingElement';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($billing_document !== null) {
            $resourcePath = str_replace(
                '{' . 'BillingDocument' . '}',
                ObjectSerializer::toPathValue($billing_document),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aBillingDocumentBillingDocumentToTextGet
     *
     * Reads the header texts of a specific billing document.
     *
     * @param  string $billing_document Billing Document (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentBillingDocumentToTextGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentRCG2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BillingDocumentRCG2\Model\Wrapper4|\BeLenka\SAP\BillingDocumentRCG2\Model\Error
     */
    public function aBillingDocumentBillingDocumentToTextGet($billing_document, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBillingDocumentBillingDocumentToTextGet'][0])
    {
        list($response) = $this->aBillingDocumentBillingDocumentToTextGetWithHttpInfo($billing_document, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);
        return $response;
    }

    /**
     * Operation aBillingDocumentBillingDocumentToTextGetWithHttpInfo
     *
     * Reads the header texts of a specific billing document.
     *
     * @param  string $billing_document Billing Document (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentBillingDocumentToTextGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentRCG2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BillingDocumentRCG2\Model\Wrapper4|\BeLenka\SAP\BillingDocumentRCG2\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBillingDocumentBillingDocumentToTextGetWithHttpInfo($billing_document, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBillingDocumentBillingDocumentToTextGet'][0])
    {
        $request = $this->aBillingDocumentBillingDocumentToTextGetRequest($billing_document, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BillingDocumentRCG2\Model\Wrapper4' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BillingDocumentRCG2\Model\Wrapper4' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BillingDocumentRCG2\Model\Wrapper4', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BillingDocumentRCG2\Model\Wrapper4';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BillingDocumentRCG2\Model\Wrapper4',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBillingDocumentBillingDocumentToTextGetAsync
     *
     * Reads the header texts of a specific billing document.
     *
     * @param  string $billing_document Billing Document (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentBillingDocumentToTextGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBillingDocumentBillingDocumentToTextGetAsync($billing_document, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBillingDocumentBillingDocumentToTextGet'][0])
    {
        return $this->aBillingDocumentBillingDocumentToTextGetAsyncWithHttpInfo($billing_document, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBillingDocumentBillingDocumentToTextGetAsyncWithHttpInfo
     *
     * Reads the header texts of a specific billing document.
     *
     * @param  string $billing_document Billing Document (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentBillingDocumentToTextGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBillingDocumentBillingDocumentToTextGetAsyncWithHttpInfo($billing_document, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBillingDocumentBillingDocumentToTextGet'][0])
    {
        $returnType = '\BeLenka\SAP\BillingDocumentRCG2\Model\Wrapper4';
        $request = $this->aBillingDocumentBillingDocumentToTextGetRequest($billing_document, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBillingDocumentBillingDocumentToTextGet'
     *
     * @param  string $billing_document Billing Document (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentBillingDocumentToTextGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBillingDocumentBillingDocumentToTextGetRequest($billing_document, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBillingDocumentBillingDocumentToTextGet'][0])
    {

        // verify the required parameter 'billing_document' is set
        if ($billing_document === null || (is_array($billing_document) && count($billing_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_document when calling aBillingDocumentBillingDocumentToTextGet'
            );
        }
        if (strlen($billing_document) > 10) {
            throw new \InvalidArgumentException('invalid length for "$billing_document" when calling BillingDocumentHeaderApi.aBillingDocumentBillingDocumentToTextGet, must be smaller than or equal to 10.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling BillingDocumentHeaderApi.aBillingDocumentBillingDocumentToTextGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling BillingDocumentHeaderApi.aBillingDocumentBillingDocumentToTextGet, must be bigger than or equal to 0.');
        }
        


        
        

        $resourcePath = '/A_BillingDocument(\'{BillingDocument}\')/to_Text';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($billing_document !== null) {
            $resourcePath = str_replace(
                '{' . 'BillingDocument' . '}',
                ObjectSerializer::toPathValue($billing_document),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aBillingDocumentGet
     *
     * Reads all billing document headers.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentRCG2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BillingDocumentRCG2\Model\Wrapper|\BeLenka\SAP\BillingDocumentRCG2\Model\Error
     */
    public function aBillingDocumentGet($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentGet'][0])
    {
        list($response) = $this->aBillingDocumentGetWithHttpInfo($top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aBillingDocumentGetWithHttpInfo
     *
     * Reads all billing document headers.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentRCG2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BillingDocumentRCG2\Model\Wrapper|\BeLenka\SAP\BillingDocumentRCG2\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBillingDocumentGetWithHttpInfo($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentGet'][0])
    {
        $request = $this->aBillingDocumentGetRequest($top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BillingDocumentRCG2\Model\Wrapper' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BillingDocumentRCG2\Model\Wrapper' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BillingDocumentRCG2\Model\Wrapper', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BillingDocumentRCG2\Model\Wrapper';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BillingDocumentRCG2\Model\Wrapper',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBillingDocumentGetAsync
     *
     * Reads all billing document headers.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBillingDocumentGetAsync($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentGet'][0])
    {
        return $this->aBillingDocumentGetAsyncWithHttpInfo($top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBillingDocumentGetAsyncWithHttpInfo
     *
     * Reads all billing document headers.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBillingDocumentGetAsyncWithHttpInfo($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentGet'][0])
    {
        $returnType = '\BeLenka\SAP\BillingDocumentRCG2\Model\Wrapper';
        $request = $this->aBillingDocumentGetRequest($top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBillingDocumentGet'
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBillingDocumentGetRequest($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentGet'][0])
    {

        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling BillingDocumentHeaderApi.aBillingDocumentGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling BillingDocumentHeaderApi.aBillingDocumentGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/A_BillingDocument';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aBillingDocumentItemBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemToBillingDocumentGet
     *
     * Reads the billing document header for a specific item.
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $billing_document_item Billing Item (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentItemBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemToBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentRCG2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BillingDocumentRCG2\Model\ABillingDocumentType|\BeLenka\SAP\BillingDocumentRCG2\Model\Error
     */
    public function aBillingDocumentItemBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemToBillingDocumentGet($billing_document, $billing_document_item, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentItemBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemToBillingDocumentGet'][0])
    {
        list($response) = $this->aBillingDocumentItemBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemToBillingDocumentGetWithHttpInfo($billing_document, $billing_document_item, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aBillingDocumentItemBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemToBillingDocumentGetWithHttpInfo
     *
     * Reads the billing document header for a specific item.
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $billing_document_item Billing Item (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentItemBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemToBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentRCG2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BillingDocumentRCG2\Model\ABillingDocumentType|\BeLenka\SAP\BillingDocumentRCG2\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBillingDocumentItemBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemToBillingDocumentGetWithHttpInfo($billing_document, $billing_document_item, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentItemBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemToBillingDocumentGet'][0])
    {
        $request = $this->aBillingDocumentItemBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemToBillingDocumentGetRequest($billing_document, $billing_document_item, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BillingDocumentRCG2\Model\ABillingDocumentType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BillingDocumentRCG2\Model\ABillingDocumentType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BillingDocumentRCG2\Model\ABillingDocumentType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BillingDocumentRCG2\Model\ABillingDocumentType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BillingDocumentRCG2\Model\ABillingDocumentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBillingDocumentItemBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemToBillingDocumentGetAsync
     *
     * Reads the billing document header for a specific item.
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $billing_document_item Billing Item (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentItemBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemToBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBillingDocumentItemBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemToBillingDocumentGetAsync($billing_document, $billing_document_item, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentItemBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemToBillingDocumentGet'][0])
    {
        return $this->aBillingDocumentItemBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemToBillingDocumentGetAsyncWithHttpInfo($billing_document, $billing_document_item, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBillingDocumentItemBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemToBillingDocumentGetAsyncWithHttpInfo
     *
     * Reads the billing document header for a specific item.
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $billing_document_item Billing Item (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentItemBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemToBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBillingDocumentItemBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemToBillingDocumentGetAsyncWithHttpInfo($billing_document, $billing_document_item, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentItemBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemToBillingDocumentGet'][0])
    {
        $returnType = '\BeLenka\SAP\BillingDocumentRCG2\Model\ABillingDocumentType';
        $request = $this->aBillingDocumentItemBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemToBillingDocumentGetRequest($billing_document, $billing_document_item, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBillingDocumentItemBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemToBillingDocumentGet'
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $billing_document_item Billing Item (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentItemBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemToBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBillingDocumentItemBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemToBillingDocumentGetRequest($billing_document, $billing_document_item, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentItemBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemToBillingDocumentGet'][0])
    {

        // verify the required parameter 'billing_document' is set
        if ($billing_document === null || (is_array($billing_document) && count($billing_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_document when calling aBillingDocumentItemBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemToBillingDocumentGet'
            );
        }
        if (strlen($billing_document) > 10) {
            throw new \InvalidArgumentException('invalid length for "$billing_document" when calling BillingDocumentHeaderApi.aBillingDocumentItemBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemToBillingDocumentGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'billing_document_item' is set
        if ($billing_document_item === null || (is_array($billing_document_item) && count($billing_document_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_document_item when calling aBillingDocumentItemBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemToBillingDocumentGet'
            );
        }
        if (strlen($billing_document_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$billing_document_item" when calling BillingDocumentHeaderApi.aBillingDocumentItemBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemToBillingDocumentGet, must be smaller than or equal to 6.');
        }
        
        
        

        $resourcePath = '/A_BillingDocumentItem(BillingDocument=\'{BillingDocument}\',BillingDocumentItem=\'{BillingDocumentItem}\')/to_BillingDocument';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($billing_document !== null) {
            $resourcePath = str_replace(
                '{' . 'BillingDocument' . '}',
                ObjectSerializer::toPathValue($billing_document),
                $resourcePath
            );
        }
        // path params
        if ($billing_document_item !== null) {
            $resourcePath = str_replace(
                '{' . 'BillingDocumentItem' . '}',
                ObjectSerializer::toPathValue($billing_document_item),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aBillingDocumentItemPartnerBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPartnerFunctionPartnerFunctionToBillingDocumentGet
     *
     * Reads the billing document header for a specific item partner function.
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $billing_document_item Billing Item (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentItemPartnerBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPartnerFunctionPartnerFunctionToBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentRCG2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BillingDocumentRCG2\Model\ABillingDocumentType|\BeLenka\SAP\BillingDocumentRCG2\Model\Error
     */
    public function aBillingDocumentItemPartnerBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPartnerFunctionPartnerFunctionToBillingDocumentGet($billing_document, $billing_document_item, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentItemPartnerBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPartnerFunctionPartnerFunctionToBillingDocumentGet'][0])
    {
        list($response) = $this->aBillingDocumentItemPartnerBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPartnerFunctionPartnerFunctionToBillingDocumentGetWithHttpInfo($billing_document, $billing_document_item, $partner_function, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aBillingDocumentItemPartnerBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPartnerFunctionPartnerFunctionToBillingDocumentGetWithHttpInfo
     *
     * Reads the billing document header for a specific item partner function.
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $billing_document_item Billing Item (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentItemPartnerBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPartnerFunctionPartnerFunctionToBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentRCG2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BillingDocumentRCG2\Model\ABillingDocumentType|\BeLenka\SAP\BillingDocumentRCG2\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBillingDocumentItemPartnerBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPartnerFunctionPartnerFunctionToBillingDocumentGetWithHttpInfo($billing_document, $billing_document_item, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentItemPartnerBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPartnerFunctionPartnerFunctionToBillingDocumentGet'][0])
    {
        $request = $this->aBillingDocumentItemPartnerBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPartnerFunctionPartnerFunctionToBillingDocumentGetRequest($billing_document, $billing_document_item, $partner_function, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BillingDocumentRCG2\Model\ABillingDocumentType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BillingDocumentRCG2\Model\ABillingDocumentType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BillingDocumentRCG2\Model\ABillingDocumentType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BillingDocumentRCG2\Model\ABillingDocumentType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BillingDocumentRCG2\Model\ABillingDocumentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBillingDocumentItemPartnerBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPartnerFunctionPartnerFunctionToBillingDocumentGetAsync
     *
     * Reads the billing document header for a specific item partner function.
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $billing_document_item Billing Item (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentItemPartnerBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPartnerFunctionPartnerFunctionToBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBillingDocumentItemPartnerBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPartnerFunctionPartnerFunctionToBillingDocumentGetAsync($billing_document, $billing_document_item, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentItemPartnerBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPartnerFunctionPartnerFunctionToBillingDocumentGet'][0])
    {
        return $this->aBillingDocumentItemPartnerBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPartnerFunctionPartnerFunctionToBillingDocumentGetAsyncWithHttpInfo($billing_document, $billing_document_item, $partner_function, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBillingDocumentItemPartnerBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPartnerFunctionPartnerFunctionToBillingDocumentGetAsyncWithHttpInfo
     *
     * Reads the billing document header for a specific item partner function.
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $billing_document_item Billing Item (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentItemPartnerBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPartnerFunctionPartnerFunctionToBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBillingDocumentItemPartnerBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPartnerFunctionPartnerFunctionToBillingDocumentGetAsyncWithHttpInfo($billing_document, $billing_document_item, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentItemPartnerBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPartnerFunctionPartnerFunctionToBillingDocumentGet'][0])
    {
        $returnType = '\BeLenka\SAP\BillingDocumentRCG2\Model\ABillingDocumentType';
        $request = $this->aBillingDocumentItemPartnerBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPartnerFunctionPartnerFunctionToBillingDocumentGetRequest($billing_document, $billing_document_item, $partner_function, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBillingDocumentItemPartnerBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPartnerFunctionPartnerFunctionToBillingDocumentGet'
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $billing_document_item Billing Item (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentItemPartnerBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPartnerFunctionPartnerFunctionToBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBillingDocumentItemPartnerBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPartnerFunctionPartnerFunctionToBillingDocumentGetRequest($billing_document, $billing_document_item, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentItemPartnerBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPartnerFunctionPartnerFunctionToBillingDocumentGet'][0])
    {

        // verify the required parameter 'billing_document' is set
        if ($billing_document === null || (is_array($billing_document) && count($billing_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_document when calling aBillingDocumentItemPartnerBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPartnerFunctionPartnerFunctionToBillingDocumentGet'
            );
        }
        if (strlen($billing_document) > 10) {
            throw new \InvalidArgumentException('invalid length for "$billing_document" when calling BillingDocumentHeaderApi.aBillingDocumentItemPartnerBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPartnerFunctionPartnerFunctionToBillingDocumentGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'billing_document_item' is set
        if ($billing_document_item === null || (is_array($billing_document_item) && count($billing_document_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_document_item when calling aBillingDocumentItemPartnerBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPartnerFunctionPartnerFunctionToBillingDocumentGet'
            );
        }
        if (strlen($billing_document_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$billing_document_item" when calling BillingDocumentHeaderApi.aBillingDocumentItemPartnerBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPartnerFunctionPartnerFunctionToBillingDocumentGet, must be smaller than or equal to 6.');
        }
        
        // verify the required parameter 'partner_function' is set
        if ($partner_function === null || (is_array($partner_function) && count($partner_function) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $partner_function when calling aBillingDocumentItemPartnerBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPartnerFunctionPartnerFunctionToBillingDocumentGet'
            );
        }
        if (strlen($partner_function) > 2) {
            throw new \InvalidArgumentException('invalid length for "$partner_function" when calling BillingDocumentHeaderApi.aBillingDocumentItemPartnerBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPartnerFunctionPartnerFunctionToBillingDocumentGet, must be smaller than or equal to 2.');
        }
        
        
        

        $resourcePath = '/A_BillingDocumentItemPartner(BillingDocument=\'{BillingDocument}\',BillingDocumentItem=\'{BillingDocumentItem}\',PartnerFunction=\'{PartnerFunction}\')/to_BillingDocument';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($billing_document !== null) {
            $resourcePath = str_replace(
                '{' . 'BillingDocument' . '}',
                ObjectSerializer::toPathValue($billing_document),
                $resourcePath
            );
        }
        // path params
        if ($billing_document_item !== null) {
            $resourcePath = str_replace(
                '{' . 'BillingDocumentItem' . '}',
                ObjectSerializer::toPathValue($billing_document_item),
                $resourcePath
            );
        }
        // path params
        if ($partner_function !== null) {
            $resourcePath = str_replace(
                '{' . 'PartnerFunction' . '}',
                ObjectSerializer::toPathValue($partner_function),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aBillingDocumentItemPrcgElmntBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGet
     *
     * Reads the billing document header for a specific item and pricing element.
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $billing_document_item Billing Item (required)
     * @param  string $pricing_procedure_step Step Number (required)
     * @param  string $pricing_procedure_counter Condition Counter (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentItemPrcgElmntBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentRCG2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BillingDocumentRCG2\Model\ABillingDocumentType|\BeLenka\SAP\BillingDocumentRCG2\Model\Error
     */
    public function aBillingDocumentItemPrcgElmntBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGet($billing_document, $billing_document_item, $pricing_procedure_step, $pricing_procedure_counter, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentItemPrcgElmntBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGet'][0])
    {
        list($response) = $this->aBillingDocumentItemPrcgElmntBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGetWithHttpInfo($billing_document, $billing_document_item, $pricing_procedure_step, $pricing_procedure_counter, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aBillingDocumentItemPrcgElmntBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGetWithHttpInfo
     *
     * Reads the billing document header for a specific item and pricing element.
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $billing_document_item Billing Item (required)
     * @param  string $pricing_procedure_step Step Number (required)
     * @param  string $pricing_procedure_counter Condition Counter (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentItemPrcgElmntBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentRCG2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BillingDocumentRCG2\Model\ABillingDocumentType|\BeLenka\SAP\BillingDocumentRCG2\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBillingDocumentItemPrcgElmntBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGetWithHttpInfo($billing_document, $billing_document_item, $pricing_procedure_step, $pricing_procedure_counter, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentItemPrcgElmntBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGet'][0])
    {
        $request = $this->aBillingDocumentItemPrcgElmntBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGetRequest($billing_document, $billing_document_item, $pricing_procedure_step, $pricing_procedure_counter, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BillingDocumentRCG2\Model\ABillingDocumentType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BillingDocumentRCG2\Model\ABillingDocumentType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BillingDocumentRCG2\Model\ABillingDocumentType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BillingDocumentRCG2\Model\ABillingDocumentType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BillingDocumentRCG2\Model\ABillingDocumentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBillingDocumentItemPrcgElmntBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGetAsync
     *
     * Reads the billing document header for a specific item and pricing element.
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $billing_document_item Billing Item (required)
     * @param  string $pricing_procedure_step Step Number (required)
     * @param  string $pricing_procedure_counter Condition Counter (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentItemPrcgElmntBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBillingDocumentItemPrcgElmntBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGetAsync($billing_document, $billing_document_item, $pricing_procedure_step, $pricing_procedure_counter, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentItemPrcgElmntBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGet'][0])
    {
        return $this->aBillingDocumentItemPrcgElmntBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGetAsyncWithHttpInfo($billing_document, $billing_document_item, $pricing_procedure_step, $pricing_procedure_counter, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBillingDocumentItemPrcgElmntBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGetAsyncWithHttpInfo
     *
     * Reads the billing document header for a specific item and pricing element.
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $billing_document_item Billing Item (required)
     * @param  string $pricing_procedure_step Step Number (required)
     * @param  string $pricing_procedure_counter Condition Counter (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentItemPrcgElmntBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBillingDocumentItemPrcgElmntBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGetAsyncWithHttpInfo($billing_document, $billing_document_item, $pricing_procedure_step, $pricing_procedure_counter, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentItemPrcgElmntBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGet'][0])
    {
        $returnType = '\BeLenka\SAP\BillingDocumentRCG2\Model\ABillingDocumentType';
        $request = $this->aBillingDocumentItemPrcgElmntBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGetRequest($billing_document, $billing_document_item, $pricing_procedure_step, $pricing_procedure_counter, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBillingDocumentItemPrcgElmntBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGet'
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $billing_document_item Billing Item (required)
     * @param  string $pricing_procedure_step Step Number (required)
     * @param  string $pricing_procedure_counter Condition Counter (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentItemPrcgElmntBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBillingDocumentItemPrcgElmntBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGetRequest($billing_document, $billing_document_item, $pricing_procedure_step, $pricing_procedure_counter, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentItemPrcgElmntBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGet'][0])
    {

        // verify the required parameter 'billing_document' is set
        if ($billing_document === null || (is_array($billing_document) && count($billing_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_document when calling aBillingDocumentItemPrcgElmntBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGet'
            );
        }
        if (strlen($billing_document) > 10) {
            throw new \InvalidArgumentException('invalid length for "$billing_document" when calling BillingDocumentHeaderApi.aBillingDocumentItemPrcgElmntBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'billing_document_item' is set
        if ($billing_document_item === null || (is_array($billing_document_item) && count($billing_document_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_document_item when calling aBillingDocumentItemPrcgElmntBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGet'
            );
        }
        if (strlen($billing_document_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$billing_document_item" when calling BillingDocumentHeaderApi.aBillingDocumentItemPrcgElmntBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGet, must be smaller than or equal to 6.');
        }
        
        // verify the required parameter 'pricing_procedure_step' is set
        if ($pricing_procedure_step === null || (is_array($pricing_procedure_step) && count($pricing_procedure_step) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pricing_procedure_step when calling aBillingDocumentItemPrcgElmntBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGet'
            );
        }
        if (strlen($pricing_procedure_step) > 3) {
            throw new \InvalidArgumentException('invalid length for "$pricing_procedure_step" when calling BillingDocumentHeaderApi.aBillingDocumentItemPrcgElmntBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGet, must be smaller than or equal to 3.');
        }
        
        // verify the required parameter 'pricing_procedure_counter' is set
        if ($pricing_procedure_counter === null || (is_array($pricing_procedure_counter) && count($pricing_procedure_counter) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pricing_procedure_counter when calling aBillingDocumentItemPrcgElmntBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGet'
            );
        }
        if (strlen($pricing_procedure_counter) > 3) {
            throw new \InvalidArgumentException('invalid length for "$pricing_procedure_counter" when calling BillingDocumentHeaderApi.aBillingDocumentItemPrcgElmntBillingDocumentBillingDocumentBillingDocumentItemBillingDocumentItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGet, must be smaller than or equal to 3.');
        }
        
        
        

        $resourcePath = '/A_BillingDocumentItemPrcgElmnt(BillingDocument=\'{BillingDocument}\',BillingDocumentItem=\'{BillingDocumentItem}\',PricingProcedureStep=\'{PricingProcedureStep}\',PricingProcedureCounter=\'{PricingProcedureCounter}\')/to_BillingDocument';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($billing_document !== null) {
            $resourcePath = str_replace(
                '{' . 'BillingDocument' . '}',
                ObjectSerializer::toPathValue($billing_document),
                $resourcePath
            );
        }
        // path params
        if ($billing_document_item !== null) {
            $resourcePath = str_replace(
                '{' . 'BillingDocumentItem' . '}',
                ObjectSerializer::toPathValue($billing_document_item),
                $resourcePath
            );
        }
        // path params
        if ($pricing_procedure_step !== null) {
            $resourcePath = str_replace(
                '{' . 'PricingProcedureStep' . '}',
                ObjectSerializer::toPathValue($pricing_procedure_step),
                $resourcePath
            );
        }
        // path params
        if ($pricing_procedure_counter !== null) {
            $resourcePath = str_replace(
                '{' . 'PricingProcedureCounter' . '}',
                ObjectSerializer::toPathValue($pricing_procedure_counter),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aBillingDocumentPartnerBillingDocumentBillingDocumentPartnerFunctionPartnerFunctionToBillingDocumentGet
     *
     * Reads the billing document header for a specific header partner function.
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentPartnerBillingDocumentBillingDocumentPartnerFunctionPartnerFunctionToBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentRCG2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BillingDocumentRCG2\Model\ABillingDocumentType|\BeLenka\SAP\BillingDocumentRCG2\Model\Error
     */
    public function aBillingDocumentPartnerBillingDocumentBillingDocumentPartnerFunctionPartnerFunctionToBillingDocumentGet($billing_document, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentPartnerBillingDocumentBillingDocumentPartnerFunctionPartnerFunctionToBillingDocumentGet'][0])
    {
        list($response) = $this->aBillingDocumentPartnerBillingDocumentBillingDocumentPartnerFunctionPartnerFunctionToBillingDocumentGetWithHttpInfo($billing_document, $partner_function, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aBillingDocumentPartnerBillingDocumentBillingDocumentPartnerFunctionPartnerFunctionToBillingDocumentGetWithHttpInfo
     *
     * Reads the billing document header for a specific header partner function.
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentPartnerBillingDocumentBillingDocumentPartnerFunctionPartnerFunctionToBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentRCG2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BillingDocumentRCG2\Model\ABillingDocumentType|\BeLenka\SAP\BillingDocumentRCG2\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBillingDocumentPartnerBillingDocumentBillingDocumentPartnerFunctionPartnerFunctionToBillingDocumentGetWithHttpInfo($billing_document, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentPartnerBillingDocumentBillingDocumentPartnerFunctionPartnerFunctionToBillingDocumentGet'][0])
    {
        $request = $this->aBillingDocumentPartnerBillingDocumentBillingDocumentPartnerFunctionPartnerFunctionToBillingDocumentGetRequest($billing_document, $partner_function, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BillingDocumentRCG2\Model\ABillingDocumentType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BillingDocumentRCG2\Model\ABillingDocumentType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BillingDocumentRCG2\Model\ABillingDocumentType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BillingDocumentRCG2\Model\ABillingDocumentType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BillingDocumentRCG2\Model\ABillingDocumentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBillingDocumentPartnerBillingDocumentBillingDocumentPartnerFunctionPartnerFunctionToBillingDocumentGetAsync
     *
     * Reads the billing document header for a specific header partner function.
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentPartnerBillingDocumentBillingDocumentPartnerFunctionPartnerFunctionToBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBillingDocumentPartnerBillingDocumentBillingDocumentPartnerFunctionPartnerFunctionToBillingDocumentGetAsync($billing_document, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentPartnerBillingDocumentBillingDocumentPartnerFunctionPartnerFunctionToBillingDocumentGet'][0])
    {
        return $this->aBillingDocumentPartnerBillingDocumentBillingDocumentPartnerFunctionPartnerFunctionToBillingDocumentGetAsyncWithHttpInfo($billing_document, $partner_function, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBillingDocumentPartnerBillingDocumentBillingDocumentPartnerFunctionPartnerFunctionToBillingDocumentGetAsyncWithHttpInfo
     *
     * Reads the billing document header for a specific header partner function.
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentPartnerBillingDocumentBillingDocumentPartnerFunctionPartnerFunctionToBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBillingDocumentPartnerBillingDocumentBillingDocumentPartnerFunctionPartnerFunctionToBillingDocumentGetAsyncWithHttpInfo($billing_document, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentPartnerBillingDocumentBillingDocumentPartnerFunctionPartnerFunctionToBillingDocumentGet'][0])
    {
        $returnType = '\BeLenka\SAP\BillingDocumentRCG2\Model\ABillingDocumentType';
        $request = $this->aBillingDocumentPartnerBillingDocumentBillingDocumentPartnerFunctionPartnerFunctionToBillingDocumentGetRequest($billing_document, $partner_function, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBillingDocumentPartnerBillingDocumentBillingDocumentPartnerFunctionPartnerFunctionToBillingDocumentGet'
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentPartnerBillingDocumentBillingDocumentPartnerFunctionPartnerFunctionToBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBillingDocumentPartnerBillingDocumentBillingDocumentPartnerFunctionPartnerFunctionToBillingDocumentGetRequest($billing_document, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentPartnerBillingDocumentBillingDocumentPartnerFunctionPartnerFunctionToBillingDocumentGet'][0])
    {

        // verify the required parameter 'billing_document' is set
        if ($billing_document === null || (is_array($billing_document) && count($billing_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_document when calling aBillingDocumentPartnerBillingDocumentBillingDocumentPartnerFunctionPartnerFunctionToBillingDocumentGet'
            );
        }
        if (strlen($billing_document) > 10) {
            throw new \InvalidArgumentException('invalid length for "$billing_document" when calling BillingDocumentHeaderApi.aBillingDocumentPartnerBillingDocumentBillingDocumentPartnerFunctionPartnerFunctionToBillingDocumentGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'partner_function' is set
        if ($partner_function === null || (is_array($partner_function) && count($partner_function) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $partner_function when calling aBillingDocumentPartnerBillingDocumentBillingDocumentPartnerFunctionPartnerFunctionToBillingDocumentGet'
            );
        }
        if (strlen($partner_function) > 2) {
            throw new \InvalidArgumentException('invalid length for "$partner_function" when calling BillingDocumentHeaderApi.aBillingDocumentPartnerBillingDocumentBillingDocumentPartnerFunctionPartnerFunctionToBillingDocumentGet, must be smaller than or equal to 2.');
        }
        
        
        

        $resourcePath = '/A_BillingDocumentPartner(BillingDocument=\'{BillingDocument}\',PartnerFunction=\'{PartnerFunction}\')/to_BillingDocument';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($billing_document !== null) {
            $resourcePath = str_replace(
                '{' . 'BillingDocument' . '}',
                ObjectSerializer::toPathValue($billing_document),
                $resourcePath
            );
        }
        // path params
        if ($partner_function !== null) {
            $resourcePath = str_replace(
                '{' . 'PartnerFunction' . '}',
                ObjectSerializer::toPathValue($partner_function),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aBillingDocumentPrcgElmntBillingDocumentBillingDocumentPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGet
     *
     * Reads the billing document header for a specific header pricing element.
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $pricing_procedure_step Step Number (required)
     * @param  string $pricing_procedure_counter Condition Counter (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentPrcgElmntBillingDocumentBillingDocumentPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentRCG2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BillingDocumentRCG2\Model\ABillingDocumentType|\BeLenka\SAP\BillingDocumentRCG2\Model\Error
     */
    public function aBillingDocumentPrcgElmntBillingDocumentBillingDocumentPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGet($billing_document, $pricing_procedure_step, $pricing_procedure_counter, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentPrcgElmntBillingDocumentBillingDocumentPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGet'][0])
    {
        list($response) = $this->aBillingDocumentPrcgElmntBillingDocumentBillingDocumentPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGetWithHttpInfo($billing_document, $pricing_procedure_step, $pricing_procedure_counter, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aBillingDocumentPrcgElmntBillingDocumentBillingDocumentPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGetWithHttpInfo
     *
     * Reads the billing document header for a specific header pricing element.
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $pricing_procedure_step Step Number (required)
     * @param  string $pricing_procedure_counter Condition Counter (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentPrcgElmntBillingDocumentBillingDocumentPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentRCG2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BillingDocumentRCG2\Model\ABillingDocumentType|\BeLenka\SAP\BillingDocumentRCG2\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBillingDocumentPrcgElmntBillingDocumentBillingDocumentPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGetWithHttpInfo($billing_document, $pricing_procedure_step, $pricing_procedure_counter, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentPrcgElmntBillingDocumentBillingDocumentPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGet'][0])
    {
        $request = $this->aBillingDocumentPrcgElmntBillingDocumentBillingDocumentPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGetRequest($billing_document, $pricing_procedure_step, $pricing_procedure_counter, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BillingDocumentRCG2\Model\ABillingDocumentType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BillingDocumentRCG2\Model\ABillingDocumentType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BillingDocumentRCG2\Model\ABillingDocumentType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BillingDocumentRCG2\Model\ABillingDocumentType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BillingDocumentRCG2\Model\ABillingDocumentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBillingDocumentPrcgElmntBillingDocumentBillingDocumentPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGetAsync
     *
     * Reads the billing document header for a specific header pricing element.
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $pricing_procedure_step Step Number (required)
     * @param  string $pricing_procedure_counter Condition Counter (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentPrcgElmntBillingDocumentBillingDocumentPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBillingDocumentPrcgElmntBillingDocumentBillingDocumentPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGetAsync($billing_document, $pricing_procedure_step, $pricing_procedure_counter, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentPrcgElmntBillingDocumentBillingDocumentPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGet'][0])
    {
        return $this->aBillingDocumentPrcgElmntBillingDocumentBillingDocumentPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGetAsyncWithHttpInfo($billing_document, $pricing_procedure_step, $pricing_procedure_counter, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBillingDocumentPrcgElmntBillingDocumentBillingDocumentPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGetAsyncWithHttpInfo
     *
     * Reads the billing document header for a specific header pricing element.
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $pricing_procedure_step Step Number (required)
     * @param  string $pricing_procedure_counter Condition Counter (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentPrcgElmntBillingDocumentBillingDocumentPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBillingDocumentPrcgElmntBillingDocumentBillingDocumentPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGetAsyncWithHttpInfo($billing_document, $pricing_procedure_step, $pricing_procedure_counter, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentPrcgElmntBillingDocumentBillingDocumentPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGet'][0])
    {
        $returnType = '\BeLenka\SAP\BillingDocumentRCG2\Model\ABillingDocumentType';
        $request = $this->aBillingDocumentPrcgElmntBillingDocumentBillingDocumentPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGetRequest($billing_document, $pricing_procedure_step, $pricing_procedure_counter, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBillingDocumentPrcgElmntBillingDocumentBillingDocumentPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGet'
     *
     * @param  string $billing_document Billing Document (required)
     * @param  string $pricing_procedure_step Step Number (required)
     * @param  string $pricing_procedure_counter Condition Counter (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBillingDocumentPrcgElmntBillingDocumentBillingDocumentPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBillingDocumentPrcgElmntBillingDocumentBillingDocumentPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGetRequest($billing_document, $pricing_procedure_step, $pricing_procedure_counter, $select = null, $expand = null, string $contentType = self::contentTypes['aBillingDocumentPrcgElmntBillingDocumentBillingDocumentPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGet'][0])
    {

        // verify the required parameter 'billing_document' is set
        if ($billing_document === null || (is_array($billing_document) && count($billing_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_document when calling aBillingDocumentPrcgElmntBillingDocumentBillingDocumentPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGet'
            );
        }
        if (strlen($billing_document) > 10) {
            throw new \InvalidArgumentException('invalid length for "$billing_document" when calling BillingDocumentHeaderApi.aBillingDocumentPrcgElmntBillingDocumentBillingDocumentPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'pricing_procedure_step' is set
        if ($pricing_procedure_step === null || (is_array($pricing_procedure_step) && count($pricing_procedure_step) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pricing_procedure_step when calling aBillingDocumentPrcgElmntBillingDocumentBillingDocumentPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGet'
            );
        }
        if (strlen($pricing_procedure_step) > 3) {
            throw new \InvalidArgumentException('invalid length for "$pricing_procedure_step" when calling BillingDocumentHeaderApi.aBillingDocumentPrcgElmntBillingDocumentBillingDocumentPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGet, must be smaller than or equal to 3.');
        }
        
        // verify the required parameter 'pricing_procedure_counter' is set
        if ($pricing_procedure_counter === null || (is_array($pricing_procedure_counter) && count($pricing_procedure_counter) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pricing_procedure_counter when calling aBillingDocumentPrcgElmntBillingDocumentBillingDocumentPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGet'
            );
        }
        if (strlen($pricing_procedure_counter) > 3) {
            throw new \InvalidArgumentException('invalid length for "$pricing_procedure_counter" when calling BillingDocumentHeaderApi.aBillingDocumentPrcgElmntBillingDocumentBillingDocumentPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToBillingDocumentGet, must be smaller than or equal to 3.');
        }
        
        
        

        $resourcePath = '/A_BillingDocumentPrcgElmnt(BillingDocument=\'{BillingDocument}\',PricingProcedureStep=\'{PricingProcedureStep}\',PricingProcedureCounter=\'{PricingProcedureCounter}\')/to_BillingDocument';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($billing_document !== null) {
            $resourcePath = str_replace(
                '{' . 'BillingDocument' . '}',
                ObjectSerializer::toPathValue($billing_document),
                $resourcePath
            );
        }
        // path params
        if ($pricing_procedure_step !== null) {
            $resourcePath = str_replace(
                '{' . 'PricingProcedureStep' . '}',
                ObjectSerializer::toPathValue($pricing_procedure_step),
                $resourcePath
            );
        }
        // path params
        if ($pricing_procedure_counter !== null) {
            $resourcePath = str_replace(
                '{' . 'PricingProcedureCounter' . '}',
                ObjectSerializer::toPathValue($pricing_procedure_counter),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cancelPost
     *
     * Cancels one specific billing document.
     *
     * @param  string $billing_document Value needs to be enclosed in single quotes (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentRCG2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BillingDocumentRCG2\Model\Wrapper8|\BeLenka\SAP\BillingDocumentRCG2\Model\Error
     */
    public function cancelPost($billing_document, string $contentType = self::contentTypes['cancelPost'][0])
    {
        list($response) = $this->cancelPostWithHttpInfo($billing_document, $contentType);
        return $response;
    }

    /**
     * Operation cancelPostWithHttpInfo
     *
     * Cancels one specific billing document.
     *
     * @param  string $billing_document Value needs to be enclosed in single quotes (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentRCG2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BillingDocumentRCG2\Model\Wrapper8|\BeLenka\SAP\BillingDocumentRCG2\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelPostWithHttpInfo($billing_document, string $contentType = self::contentTypes['cancelPost'][0])
    {
        $request = $this->cancelPostRequest($billing_document, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BillingDocumentRCG2\Model\Wrapper8' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BillingDocumentRCG2\Model\Wrapper8' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BillingDocumentRCG2\Model\Wrapper8', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BillingDocumentRCG2\Model\Wrapper8';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BillingDocumentRCG2\Model\Wrapper8',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation cancelPostAsync
     *
     * Cancels one specific billing document.
     *
     * @param  string $billing_document Value needs to be enclosed in single quotes (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelPostAsync($billing_document, string $contentType = self::contentTypes['cancelPost'][0])
    {
        return $this->cancelPostAsyncWithHttpInfo($billing_document, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelPostAsyncWithHttpInfo
     *
     * Cancels one specific billing document.
     *
     * @param  string $billing_document Value needs to be enclosed in single quotes (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelPostAsyncWithHttpInfo($billing_document, string $contentType = self::contentTypes['cancelPost'][0])
    {
        $returnType = '\BeLenka\SAP\BillingDocumentRCG2\Model\Wrapper8';
        $request = $this->cancelPostRequest($billing_document, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelPost'
     *
     * @param  string $billing_document Value needs to be enclosed in single quotes (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cancelPostRequest($billing_document, string $contentType = self::contentTypes['cancelPost'][0])
    {

        // verify the required parameter 'billing_document' is set
        if ($billing_document === null || (is_array($billing_document) && count($billing_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_document when calling cancelPost'
            );
        }
        if (strlen($billing_document) > 11002) {
            throw new \InvalidArgumentException('invalid length for "$billing_document" when calling BillingDocumentHeaderApi.cancelPost, must be smaller than or equal to 11002.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $billing_document)) {
            throw new \InvalidArgumentException("invalid value for \"billing_document\" when calling BillingDocumentHeaderApi.cancelPost, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        

        $resourcePath = '/Cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $billing_document,
            'BillingDocument', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPDFGet
     *
     * Retrieves a specific billing document in PDF format.
     *
     * @param  string $billing_document Value needs to be enclosed in single quotes (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPDFGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentRCG2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BillingDocumentRCG2\Model\GetPDFResult|\BeLenka\SAP\BillingDocumentRCG2\Model\Error
     */
    public function getPDFGet($billing_document, string $contentType = self::contentTypes['getPDFGet'][0])
    {
        list($response) = $this->getPDFGetWithHttpInfo($billing_document, $contentType);
        return $response;
    }

    /**
     * Operation getPDFGetWithHttpInfo
     *
     * Retrieves a specific billing document in PDF format.
     *
     * @param  string $billing_document Value needs to be enclosed in single quotes (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPDFGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BillingDocumentRCG2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BillingDocumentRCG2\Model\GetPDFResult|\BeLenka\SAP\BillingDocumentRCG2\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPDFGetWithHttpInfo($billing_document, string $contentType = self::contentTypes['getPDFGet'][0])
    {
        $request = $this->getPDFGetRequest($billing_document, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BillingDocumentRCG2\Model\GetPDFResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BillingDocumentRCG2\Model\GetPDFResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BillingDocumentRCG2\Model\GetPDFResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BillingDocumentRCG2\Model\GetPDFResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BillingDocumentRCG2\Model\GetPDFResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation getPDFGetAsync
     *
     * Retrieves a specific billing document in PDF format.
     *
     * @param  string $billing_document Value needs to be enclosed in single quotes (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPDFGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPDFGetAsync($billing_document, string $contentType = self::contentTypes['getPDFGet'][0])
    {
        return $this->getPDFGetAsyncWithHttpInfo($billing_document, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPDFGetAsyncWithHttpInfo
     *
     * Retrieves a specific billing document in PDF format.
     *
     * @param  string $billing_document Value needs to be enclosed in single quotes (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPDFGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPDFGetAsyncWithHttpInfo($billing_document, string $contentType = self::contentTypes['getPDFGet'][0])
    {
        $returnType = '\BeLenka\SAP\BillingDocumentRCG2\Model\GetPDFResult';
        $request = $this->getPDFGetRequest($billing_document, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPDFGet'
     *
     * @param  string $billing_document Value needs to be enclosed in single quotes (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPDFGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPDFGetRequest($billing_document, string $contentType = self::contentTypes['getPDFGet'][0])
    {

        // verify the required parameter 'billing_document' is set
        if ($billing_document === null || (is_array($billing_document) && count($billing_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_document when calling getPDFGet'
            );
        }
        if (strlen($billing_document) > 11002) {
            throw new \InvalidArgumentException('invalid length for "$billing_document" when calling BillingDocumentHeaderApi.getPDFGet, must be smaller than or equal to 11002.');
        }
        if (!preg_match("/^'[^']*(''[^']*)*'$/", $billing_document)) {
            throw new \InvalidArgumentException("invalid value for \"billing_document\" when calling BillingDocumentHeaderApi.getPDFGet, must conform to the pattern /^'[^']*(''[^']*)*'$/.");
        }
        

        $resourcePath = '/GetPDF';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $billing_document,
            'BillingDocument', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
