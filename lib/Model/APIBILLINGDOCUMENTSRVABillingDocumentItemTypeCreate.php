<?php
/**
 * APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\BillingDocumentRCG2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Billing Document - Read, Cancel, GetPDF
 *
 * Consumers of this inbound service can read and cancel billing documents inside your system by sending OData requests. In addition, they can request entire billing documents in PDF format. The service makes billing document data available through its header, item, business partner, and pricing element entities.
 *
 * The version of the OpenAPI document: 1.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\BillingDocumentRCG2\Model;

use \ArrayAccess;
use \BeLenka\SAP\BillingDocumentRCG2\ObjectSerializer;

/**
 * APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\BillingDocumentRCG2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'API_BILLING_DOCUMENT_SRV.A_BillingDocumentItemType-create';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'billing_document' => 'string',
        'billing_document_item' => 'string',
        'sales_document_item_category' => 'string',
        'sales_document_item_type' => 'string',
        'return_item_processing_type' => 'string',
        'created_by_user' => 'string',
        'creation_date' => 'string',
        'creation_time' => 'string',
        'reference_logical_system' => 'string',
        'organization_division' => 'string',
        'division' => 'string',
        'sales_office' => 'string',
        'material' => 'string',
        'originally_requested_material' => 'string',
        'international_article_number' => 'string',
        'pricing_reference_material' => 'string',
        'batch' => 'string',
        'product_hierarchy_node' => 'string',
        'material_group' => 'string',
        'additional_material_group1' => 'string',
        'additional_material_group2' => 'string',
        'additional_material_group3' => 'string',
        'additional_material_group4' => 'string',
        'additional_material_group5' => 'string',
        'material_commission_group' => 'string',
        'plant' => 'string',
        'storage_location' => 'string',
        'replacement_part_type' => 'string',
        'material_group_hierarchy1' => 'string',
        'material_group_hierarchy2' => 'string',
        'plant_region' => 'string',
        'plant_county' => 'string',
        'plant_city' => 'string',
        'bom_explosion' => 'string',
        'material_determination_type' => 'string',
        'billing_document_item_text' => 'string',
        'services_rendered_date' => 'string',
        'billing_quantity' => 'float',
        'billing_quantity_unit' => 'string',
        'billing_quantity_in_base_unit' => 'float',
        'base_unit' => 'string',
        'mrp_required_quantity_in_base_unit' => 'float',
        'billing_to_base_quantity_dnmntr' => 'float',
        'billing_to_base_quantity_nmrtr' => 'float',
        'item_gross_weight' => 'float',
        'item_net_weight' => 'float',
        'item_weight_unit' => 'string',
        'item_volume' => 'float',
        'item_volume_unit' => 'string',
        'bill_to_party_country' => 'string',
        'bill_to_party_region' => 'string',
        'billing_plan_rule' => 'string',
        'billing_plan' => 'string',
        'billing_plan_item' => 'string',
        'net_amount' => 'float',
        'transaction_currency' => 'string',
        'gross_amount' => 'float',
        'pricing_date' => 'string',
        'abslt_price_detn_exchange_rate' => 'float',
        'price_detn_exch_rate_is_indrct_qtan' => 'bool',
        'price_detn_exchange_rate_date' => 'string',
        'pricing_scale_quantity_in_base_unit' => 'float',
        'tax_amount' => 'float',
        'cost_amount' => 'float',
        'subtotal1_amount' => 'float',
        'subtotal2_amount' => 'float',
        'subtotal3_amount' => 'float',
        'subtotal4_amount' => 'float',
        'subtotal5_amount' => 'float',
        'subtotal6_amount' => 'float',
        'statistical_value_control' => 'string',
        'cash_discount_is_deductible' => 'bool',
        'customer_condition_group1' => 'string',
        'customer_condition_group2' => 'string',
        'customer_condition_group3' => 'string',
        'customer_condition_group4' => 'string',
        'customer_condition_group5' => 'string',
        'manual_price_change_type' => 'string',
        'material_pricing_group' => 'string',
        'abslt_statistics_exchange_rate' => 'float',
        'statistics_exch_rate_is_indrct_qtan' => 'bool',
        'main_item_pricing_ref_material' => 'string',
        'main_item_material_pricing_group' => 'string',
        'departure_country' => 'string',
        'tax_jurisdiction' => 'string',
        'product_tax_classification1' => 'string',
        'product_tax_classification2' => 'string',
        'product_tax_classification3' => 'string',
        'product_tax_classification4' => 'string',
        'product_tax_classification5' => 'string',
        'product_tax_classification6' => 'string',
        'product_tax_classification7' => 'string',
        'product_tax_classification8' => 'string',
        'product_tax_classification9' => 'string',
        'zero_vat_rsn' => 'string',
        'eligible_amount_for_cash_discount' => 'float',
        'business_area' => 'string',
        'profit_center' => 'string',
        'wbs_element' => 'string',
        'controlling_area' => 'string',
        'profitability_segment' => 'string',
        'order_id' => 'string',
        'cost_center' => 'string',
        'origin_sd_document' => 'string',
        'origin_sd_document_item' => 'string',
        'matl_account_assignment_group' => 'string',
        'reference_sd_document' => 'string',
        'reference_sd_document_item' => 'string',
        'reference_sd_document_category' => 'string',
        'sales_document' => 'string',
        'sales_document_item' => 'string',
        'sales_sd_document_category' => 'string',
        'higher_level_item' => 'string',
        'billing_document_item_in_part_sgmt' => 'string',
        'external_reference_document' => 'string',
        'external_reference_document_item' => 'string',
        'sales_group' => 'string',
        'additional_customer_group1' => 'string',
        'additional_customer_group2' => 'string',
        'additional_customer_group3' => 'string',
        'additional_customer_group4' => 'string',
        'additional_customer_group5' => 'string',
        'sd_document_reason' => 'string',
        'retail_promotion' => 'string',
        'rebate_basis_amount' => 'float',
        'volume_rebate_group' => 'string',
        'item_is_relevant_for_credit' => 'bool',
        'credit_related_price' => 'float',
        'sales_deal' => 'string',
        'sales_promotion' => 'string',
        'sales_order_sales_district' => 'string',
        'sales_order_customer_group' => 'string',
        'sales_order_customer_price_group' => 'string',
        'sales_order_price_list_type' => 'string',
        'sales_order_sales_organization' => 'string',
        'sales_order_distribution_channel' => 'string',
        'sales_doc_is_created_from_reference' => 'bool',
        'shipping_point' => 'string',
        'higher_level_item_usage' => 'string',
        'to_billing_document' => '\BeLenka\SAP\BillingDocumentRCG2\Model\APIBILLINGDOCUMENTSRVABillingDocumentTypeCreate',
        'to_item_text' => '\BeLenka\SAP\BillingDocumentRCG2\Model\APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreateToItemText',
        'to_partner' => '\BeLenka\SAP\BillingDocumentRCG2\Model\APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreateToPartner',
        'to_pricing_element' => '\BeLenka\SAP\BillingDocumentRCG2\Model\APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreateToPricingElement'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'billing_document' => null,
        'billing_document_item' => null,
        'sales_document_item_category' => null,
        'sales_document_item_type' => null,
        'return_item_processing_type' => null,
        'created_by_user' => null,
        'creation_date' => null,
        'creation_time' => null,
        'reference_logical_system' => null,
        'organization_division' => null,
        'division' => null,
        'sales_office' => null,
        'material' => null,
        'originally_requested_material' => null,
        'international_article_number' => null,
        'pricing_reference_material' => null,
        'batch' => null,
        'product_hierarchy_node' => null,
        'material_group' => null,
        'additional_material_group1' => null,
        'additional_material_group2' => null,
        'additional_material_group3' => null,
        'additional_material_group4' => null,
        'additional_material_group5' => null,
        'material_commission_group' => null,
        'plant' => null,
        'storage_location' => null,
        'replacement_part_type' => null,
        'material_group_hierarchy1' => null,
        'material_group_hierarchy2' => null,
        'plant_region' => null,
        'plant_county' => null,
        'plant_city' => null,
        'bom_explosion' => null,
        'material_determination_type' => null,
        'billing_document_item_text' => null,
        'services_rendered_date' => null,
        'billing_quantity' => 'decimal',
        'billing_quantity_unit' => null,
        'billing_quantity_in_base_unit' => 'decimal',
        'base_unit' => null,
        'mrp_required_quantity_in_base_unit' => 'decimal',
        'billing_to_base_quantity_dnmntr' => 'decimal',
        'billing_to_base_quantity_nmrtr' => 'decimal',
        'item_gross_weight' => 'decimal',
        'item_net_weight' => 'decimal',
        'item_weight_unit' => null,
        'item_volume' => 'decimal',
        'item_volume_unit' => null,
        'bill_to_party_country' => null,
        'bill_to_party_region' => null,
        'billing_plan_rule' => null,
        'billing_plan' => null,
        'billing_plan_item' => null,
        'net_amount' => 'decimal',
        'transaction_currency' => null,
        'gross_amount' => 'decimal',
        'pricing_date' => null,
        'abslt_price_detn_exchange_rate' => 'decimal',
        'price_detn_exch_rate_is_indrct_qtan' => null,
        'price_detn_exchange_rate_date' => null,
        'pricing_scale_quantity_in_base_unit' => 'decimal',
        'tax_amount' => 'decimal',
        'cost_amount' => 'decimal',
        'subtotal1_amount' => 'decimal',
        'subtotal2_amount' => 'decimal',
        'subtotal3_amount' => 'decimal',
        'subtotal4_amount' => 'decimal',
        'subtotal5_amount' => 'decimal',
        'subtotal6_amount' => 'decimal',
        'statistical_value_control' => null,
        'cash_discount_is_deductible' => null,
        'customer_condition_group1' => null,
        'customer_condition_group2' => null,
        'customer_condition_group3' => null,
        'customer_condition_group4' => null,
        'customer_condition_group5' => null,
        'manual_price_change_type' => null,
        'material_pricing_group' => null,
        'abslt_statistics_exchange_rate' => 'decimal',
        'statistics_exch_rate_is_indrct_qtan' => null,
        'main_item_pricing_ref_material' => null,
        'main_item_material_pricing_group' => null,
        'departure_country' => null,
        'tax_jurisdiction' => null,
        'product_tax_classification1' => null,
        'product_tax_classification2' => null,
        'product_tax_classification3' => null,
        'product_tax_classification4' => null,
        'product_tax_classification5' => null,
        'product_tax_classification6' => null,
        'product_tax_classification7' => null,
        'product_tax_classification8' => null,
        'product_tax_classification9' => null,
        'zero_vat_rsn' => null,
        'eligible_amount_for_cash_discount' => 'decimal',
        'business_area' => null,
        'profit_center' => null,
        'wbs_element' => null,
        'controlling_area' => null,
        'profitability_segment' => null,
        'order_id' => null,
        'cost_center' => null,
        'origin_sd_document' => null,
        'origin_sd_document_item' => null,
        'matl_account_assignment_group' => null,
        'reference_sd_document' => null,
        'reference_sd_document_item' => null,
        'reference_sd_document_category' => null,
        'sales_document' => null,
        'sales_document_item' => null,
        'sales_sd_document_category' => null,
        'higher_level_item' => null,
        'billing_document_item_in_part_sgmt' => null,
        'external_reference_document' => null,
        'external_reference_document_item' => null,
        'sales_group' => null,
        'additional_customer_group1' => null,
        'additional_customer_group2' => null,
        'additional_customer_group3' => null,
        'additional_customer_group4' => null,
        'additional_customer_group5' => null,
        'sd_document_reason' => null,
        'retail_promotion' => null,
        'rebate_basis_amount' => 'decimal',
        'volume_rebate_group' => null,
        'item_is_relevant_for_credit' => null,
        'credit_related_price' => 'decimal',
        'sales_deal' => null,
        'sales_promotion' => null,
        'sales_order_sales_district' => null,
        'sales_order_customer_group' => null,
        'sales_order_customer_price_group' => null,
        'sales_order_price_list_type' => null,
        'sales_order_sales_organization' => null,
        'sales_order_distribution_channel' => null,
        'sales_doc_is_created_from_reference' => null,
        'shipping_point' => null,
        'higher_level_item_usage' => null,
        'to_billing_document' => null,
        'to_item_text' => null,
        'to_partner' => null,
        'to_pricing_element' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'billing_document' => false,
		'billing_document_item' => false,
		'sales_document_item_category' => true,
		'sales_document_item_type' => true,
		'return_item_processing_type' => true,
		'created_by_user' => true,
		'creation_date' => true,
		'creation_time' => true,
		'reference_logical_system' => true,
		'organization_division' => true,
		'division' => true,
		'sales_office' => true,
		'material' => true,
		'originally_requested_material' => true,
		'international_article_number' => true,
		'pricing_reference_material' => true,
		'batch' => true,
		'product_hierarchy_node' => true,
		'material_group' => true,
		'additional_material_group1' => true,
		'additional_material_group2' => true,
		'additional_material_group3' => true,
		'additional_material_group4' => true,
		'additional_material_group5' => true,
		'material_commission_group' => true,
		'plant' => true,
		'storage_location' => true,
		'replacement_part_type' => true,
		'material_group_hierarchy1' => true,
		'material_group_hierarchy2' => true,
		'plant_region' => true,
		'plant_county' => true,
		'plant_city' => true,
		'bom_explosion' => true,
		'material_determination_type' => true,
		'billing_document_item_text' => true,
		'services_rendered_date' => true,
		'billing_quantity' => true,
		'billing_quantity_unit' => true,
		'billing_quantity_in_base_unit' => true,
		'base_unit' => true,
		'mrp_required_quantity_in_base_unit' => true,
		'billing_to_base_quantity_dnmntr' => true,
		'billing_to_base_quantity_nmrtr' => true,
		'item_gross_weight' => true,
		'item_net_weight' => true,
		'item_weight_unit' => true,
		'item_volume' => true,
		'item_volume_unit' => true,
		'bill_to_party_country' => true,
		'bill_to_party_region' => true,
		'billing_plan_rule' => true,
		'billing_plan' => true,
		'billing_plan_item' => true,
		'net_amount' => true,
		'transaction_currency' => true,
		'gross_amount' => true,
		'pricing_date' => true,
		'abslt_price_detn_exchange_rate' => true,
		'price_detn_exch_rate_is_indrct_qtan' => true,
		'price_detn_exchange_rate_date' => true,
		'pricing_scale_quantity_in_base_unit' => true,
		'tax_amount' => true,
		'cost_amount' => true,
		'subtotal1_amount' => true,
		'subtotal2_amount' => true,
		'subtotal3_amount' => true,
		'subtotal4_amount' => true,
		'subtotal5_amount' => true,
		'subtotal6_amount' => true,
		'statistical_value_control' => true,
		'cash_discount_is_deductible' => true,
		'customer_condition_group1' => true,
		'customer_condition_group2' => true,
		'customer_condition_group3' => true,
		'customer_condition_group4' => true,
		'customer_condition_group5' => true,
		'manual_price_change_type' => true,
		'material_pricing_group' => true,
		'abslt_statistics_exchange_rate' => true,
		'statistics_exch_rate_is_indrct_qtan' => true,
		'main_item_pricing_ref_material' => true,
		'main_item_material_pricing_group' => true,
		'departure_country' => true,
		'tax_jurisdiction' => true,
		'product_tax_classification1' => true,
		'product_tax_classification2' => true,
		'product_tax_classification3' => true,
		'product_tax_classification4' => true,
		'product_tax_classification5' => true,
		'product_tax_classification6' => true,
		'product_tax_classification7' => true,
		'product_tax_classification8' => true,
		'product_tax_classification9' => true,
		'zero_vat_rsn' => true,
		'eligible_amount_for_cash_discount' => true,
		'business_area' => true,
		'profit_center' => true,
		'wbs_element' => true,
		'controlling_area' => true,
		'profitability_segment' => true,
		'order_id' => true,
		'cost_center' => true,
		'origin_sd_document' => true,
		'origin_sd_document_item' => true,
		'matl_account_assignment_group' => true,
		'reference_sd_document' => true,
		'reference_sd_document_item' => true,
		'reference_sd_document_category' => true,
		'sales_document' => true,
		'sales_document_item' => true,
		'sales_sd_document_category' => true,
		'higher_level_item' => true,
		'billing_document_item_in_part_sgmt' => true,
		'external_reference_document' => true,
		'external_reference_document_item' => true,
		'sales_group' => true,
		'additional_customer_group1' => true,
		'additional_customer_group2' => true,
		'additional_customer_group3' => true,
		'additional_customer_group4' => true,
		'additional_customer_group5' => true,
		'sd_document_reason' => true,
		'retail_promotion' => true,
		'rebate_basis_amount' => true,
		'volume_rebate_group' => true,
		'item_is_relevant_for_credit' => true,
		'credit_related_price' => true,
		'sales_deal' => true,
		'sales_promotion' => true,
		'sales_order_sales_district' => true,
		'sales_order_customer_group' => true,
		'sales_order_customer_price_group' => true,
		'sales_order_price_list_type' => true,
		'sales_order_sales_organization' => true,
		'sales_order_distribution_channel' => true,
		'sales_doc_is_created_from_reference' => true,
		'shipping_point' => true,
		'higher_level_item_usage' => true,
		'to_billing_document' => false,
		'to_item_text' => false,
		'to_partner' => false,
		'to_pricing_element' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'billing_document' => 'BillingDocument',
        'billing_document_item' => 'BillingDocumentItem',
        'sales_document_item_category' => 'SalesDocumentItemCategory',
        'sales_document_item_type' => 'SalesDocumentItemType',
        'return_item_processing_type' => 'ReturnItemProcessingType',
        'created_by_user' => 'CreatedByUser',
        'creation_date' => 'CreationDate',
        'creation_time' => 'CreationTime',
        'reference_logical_system' => 'ReferenceLogicalSystem',
        'organization_division' => 'OrganizationDivision',
        'division' => 'Division',
        'sales_office' => 'SalesOffice',
        'material' => 'Material',
        'originally_requested_material' => 'OriginallyRequestedMaterial',
        'international_article_number' => 'InternationalArticleNumber',
        'pricing_reference_material' => 'PricingReferenceMaterial',
        'batch' => 'Batch',
        'product_hierarchy_node' => 'ProductHierarchyNode',
        'material_group' => 'MaterialGroup',
        'additional_material_group1' => 'AdditionalMaterialGroup1',
        'additional_material_group2' => 'AdditionalMaterialGroup2',
        'additional_material_group3' => 'AdditionalMaterialGroup3',
        'additional_material_group4' => 'AdditionalMaterialGroup4',
        'additional_material_group5' => 'AdditionalMaterialGroup5',
        'material_commission_group' => 'MaterialCommissionGroup',
        'plant' => 'Plant',
        'storage_location' => 'StorageLocation',
        'replacement_part_type' => 'ReplacementPartType',
        'material_group_hierarchy1' => 'MaterialGroupHierarchy1',
        'material_group_hierarchy2' => 'MaterialGroupHierarchy2',
        'plant_region' => 'PlantRegion',
        'plant_county' => 'PlantCounty',
        'plant_city' => 'PlantCity',
        'bom_explosion' => 'BOMExplosion',
        'material_determination_type' => 'MaterialDeterminationType',
        'billing_document_item_text' => 'BillingDocumentItemText',
        'services_rendered_date' => 'ServicesRenderedDate',
        'billing_quantity' => 'BillingQuantity',
        'billing_quantity_unit' => 'BillingQuantityUnit',
        'billing_quantity_in_base_unit' => 'BillingQuantityInBaseUnit',
        'base_unit' => 'BaseUnit',
        'mrp_required_quantity_in_base_unit' => 'MRPRequiredQuantityInBaseUnit',
        'billing_to_base_quantity_dnmntr' => 'BillingToBaseQuantityDnmntr',
        'billing_to_base_quantity_nmrtr' => 'BillingToBaseQuantityNmrtr',
        'item_gross_weight' => 'ItemGrossWeight',
        'item_net_weight' => 'ItemNetWeight',
        'item_weight_unit' => 'ItemWeightUnit',
        'item_volume' => 'ItemVolume',
        'item_volume_unit' => 'ItemVolumeUnit',
        'bill_to_party_country' => 'BillToPartyCountry',
        'bill_to_party_region' => 'BillToPartyRegion',
        'billing_plan_rule' => 'BillingPlanRule',
        'billing_plan' => 'BillingPlan',
        'billing_plan_item' => 'BillingPlanItem',
        'net_amount' => 'NetAmount',
        'transaction_currency' => 'TransactionCurrency',
        'gross_amount' => 'GrossAmount',
        'pricing_date' => 'PricingDate',
        'abslt_price_detn_exchange_rate' => 'AbsltPriceDetnExchangeRate',
        'price_detn_exch_rate_is_indrct_qtan' => 'PriceDetnExchRateIsIndrctQtan',
        'price_detn_exchange_rate_date' => 'PriceDetnExchangeRateDate',
        'pricing_scale_quantity_in_base_unit' => 'PricingScaleQuantityInBaseUnit',
        'tax_amount' => 'TaxAmount',
        'cost_amount' => 'CostAmount',
        'subtotal1_amount' => 'Subtotal1Amount',
        'subtotal2_amount' => 'Subtotal2Amount',
        'subtotal3_amount' => 'Subtotal3Amount',
        'subtotal4_amount' => 'Subtotal4Amount',
        'subtotal5_amount' => 'Subtotal5Amount',
        'subtotal6_amount' => 'Subtotal6Amount',
        'statistical_value_control' => 'StatisticalValueControl',
        'cash_discount_is_deductible' => 'CashDiscountIsDeductible',
        'customer_condition_group1' => 'CustomerConditionGroup1',
        'customer_condition_group2' => 'CustomerConditionGroup2',
        'customer_condition_group3' => 'CustomerConditionGroup3',
        'customer_condition_group4' => 'CustomerConditionGroup4',
        'customer_condition_group5' => 'CustomerConditionGroup5',
        'manual_price_change_type' => 'ManualPriceChangeType',
        'material_pricing_group' => 'MaterialPricingGroup',
        'abslt_statistics_exchange_rate' => 'AbsltStatisticsExchangeRate',
        'statistics_exch_rate_is_indrct_qtan' => 'StatisticsExchRateIsIndrctQtan',
        'main_item_pricing_ref_material' => 'MainItemPricingRefMaterial',
        'main_item_material_pricing_group' => 'MainItemMaterialPricingGroup',
        'departure_country' => 'DepartureCountry',
        'tax_jurisdiction' => 'TaxJurisdiction',
        'product_tax_classification1' => 'ProductTaxClassification1',
        'product_tax_classification2' => 'ProductTaxClassification2',
        'product_tax_classification3' => 'ProductTaxClassification3',
        'product_tax_classification4' => 'ProductTaxClassification4',
        'product_tax_classification5' => 'ProductTaxClassification5',
        'product_tax_classification6' => 'ProductTaxClassification6',
        'product_tax_classification7' => 'ProductTaxClassification7',
        'product_tax_classification8' => 'ProductTaxClassification8',
        'product_tax_classification9' => 'ProductTaxClassification9',
        'zero_vat_rsn' => 'ZeroVATRsn',
        'eligible_amount_for_cash_discount' => 'EligibleAmountForCashDiscount',
        'business_area' => 'BusinessArea',
        'profit_center' => 'ProfitCenter',
        'wbs_element' => 'WBSElement',
        'controlling_area' => 'ControllingArea',
        'profitability_segment' => 'ProfitabilitySegment',
        'order_id' => 'OrderID',
        'cost_center' => 'CostCenter',
        'origin_sd_document' => 'OriginSDDocument',
        'origin_sd_document_item' => 'OriginSDDocumentItem',
        'matl_account_assignment_group' => 'MatlAccountAssignmentGroup',
        'reference_sd_document' => 'ReferenceSDDocument',
        'reference_sd_document_item' => 'ReferenceSDDocumentItem',
        'reference_sd_document_category' => 'ReferenceSDDocumentCategory',
        'sales_document' => 'SalesDocument',
        'sales_document_item' => 'SalesDocumentItem',
        'sales_sd_document_category' => 'SalesSDDocumentCategory',
        'higher_level_item' => 'HigherLevelItem',
        'billing_document_item_in_part_sgmt' => 'BillingDocumentItemInPartSgmt',
        'external_reference_document' => 'ExternalReferenceDocument',
        'external_reference_document_item' => 'ExternalReferenceDocumentItem',
        'sales_group' => 'SalesGroup',
        'additional_customer_group1' => 'AdditionalCustomerGroup1',
        'additional_customer_group2' => 'AdditionalCustomerGroup2',
        'additional_customer_group3' => 'AdditionalCustomerGroup3',
        'additional_customer_group4' => 'AdditionalCustomerGroup4',
        'additional_customer_group5' => 'AdditionalCustomerGroup5',
        'sd_document_reason' => 'SDDocumentReason',
        'retail_promotion' => 'RetailPromotion',
        'rebate_basis_amount' => 'RebateBasisAmount',
        'volume_rebate_group' => 'VolumeRebateGroup',
        'item_is_relevant_for_credit' => 'ItemIsRelevantForCredit',
        'credit_related_price' => 'CreditRelatedPrice',
        'sales_deal' => 'SalesDeal',
        'sales_promotion' => 'SalesPromotion',
        'sales_order_sales_district' => 'SalesOrderSalesDistrict',
        'sales_order_customer_group' => 'SalesOrderCustomerGroup',
        'sales_order_customer_price_group' => 'SalesOrderCustomerPriceGroup',
        'sales_order_price_list_type' => 'SalesOrderPriceListType',
        'sales_order_sales_organization' => 'SalesOrderSalesOrganization',
        'sales_order_distribution_channel' => 'SalesOrderDistributionChannel',
        'sales_doc_is_created_from_reference' => 'SalesDocIsCreatedFromReference',
        'shipping_point' => 'ShippingPoint',
        'higher_level_item_usage' => 'HigherLevelItemUsage',
        'to_billing_document' => 'to_BillingDocument',
        'to_item_text' => 'to_ItemText',
        'to_partner' => 'to_Partner',
        'to_pricing_element' => 'to_PricingElement'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'billing_document' => 'setBillingDocument',
        'billing_document_item' => 'setBillingDocumentItem',
        'sales_document_item_category' => 'setSalesDocumentItemCategory',
        'sales_document_item_type' => 'setSalesDocumentItemType',
        'return_item_processing_type' => 'setReturnItemProcessingType',
        'created_by_user' => 'setCreatedByUser',
        'creation_date' => 'setCreationDate',
        'creation_time' => 'setCreationTime',
        'reference_logical_system' => 'setReferenceLogicalSystem',
        'organization_division' => 'setOrganizationDivision',
        'division' => 'setDivision',
        'sales_office' => 'setSalesOffice',
        'material' => 'setMaterial',
        'originally_requested_material' => 'setOriginallyRequestedMaterial',
        'international_article_number' => 'setInternationalArticleNumber',
        'pricing_reference_material' => 'setPricingReferenceMaterial',
        'batch' => 'setBatch',
        'product_hierarchy_node' => 'setProductHierarchyNode',
        'material_group' => 'setMaterialGroup',
        'additional_material_group1' => 'setAdditionalMaterialGroup1',
        'additional_material_group2' => 'setAdditionalMaterialGroup2',
        'additional_material_group3' => 'setAdditionalMaterialGroup3',
        'additional_material_group4' => 'setAdditionalMaterialGroup4',
        'additional_material_group5' => 'setAdditionalMaterialGroup5',
        'material_commission_group' => 'setMaterialCommissionGroup',
        'plant' => 'setPlant',
        'storage_location' => 'setStorageLocation',
        'replacement_part_type' => 'setReplacementPartType',
        'material_group_hierarchy1' => 'setMaterialGroupHierarchy1',
        'material_group_hierarchy2' => 'setMaterialGroupHierarchy2',
        'plant_region' => 'setPlantRegion',
        'plant_county' => 'setPlantCounty',
        'plant_city' => 'setPlantCity',
        'bom_explosion' => 'setBomExplosion',
        'material_determination_type' => 'setMaterialDeterminationType',
        'billing_document_item_text' => 'setBillingDocumentItemText',
        'services_rendered_date' => 'setServicesRenderedDate',
        'billing_quantity' => 'setBillingQuantity',
        'billing_quantity_unit' => 'setBillingQuantityUnit',
        'billing_quantity_in_base_unit' => 'setBillingQuantityInBaseUnit',
        'base_unit' => 'setBaseUnit',
        'mrp_required_quantity_in_base_unit' => 'setMrpRequiredQuantityInBaseUnit',
        'billing_to_base_quantity_dnmntr' => 'setBillingToBaseQuantityDnmntr',
        'billing_to_base_quantity_nmrtr' => 'setBillingToBaseQuantityNmrtr',
        'item_gross_weight' => 'setItemGrossWeight',
        'item_net_weight' => 'setItemNetWeight',
        'item_weight_unit' => 'setItemWeightUnit',
        'item_volume' => 'setItemVolume',
        'item_volume_unit' => 'setItemVolumeUnit',
        'bill_to_party_country' => 'setBillToPartyCountry',
        'bill_to_party_region' => 'setBillToPartyRegion',
        'billing_plan_rule' => 'setBillingPlanRule',
        'billing_plan' => 'setBillingPlan',
        'billing_plan_item' => 'setBillingPlanItem',
        'net_amount' => 'setNetAmount',
        'transaction_currency' => 'setTransactionCurrency',
        'gross_amount' => 'setGrossAmount',
        'pricing_date' => 'setPricingDate',
        'abslt_price_detn_exchange_rate' => 'setAbsltPriceDetnExchangeRate',
        'price_detn_exch_rate_is_indrct_qtan' => 'setPriceDetnExchRateIsIndrctQtan',
        'price_detn_exchange_rate_date' => 'setPriceDetnExchangeRateDate',
        'pricing_scale_quantity_in_base_unit' => 'setPricingScaleQuantityInBaseUnit',
        'tax_amount' => 'setTaxAmount',
        'cost_amount' => 'setCostAmount',
        'subtotal1_amount' => 'setSubtotal1Amount',
        'subtotal2_amount' => 'setSubtotal2Amount',
        'subtotal3_amount' => 'setSubtotal3Amount',
        'subtotal4_amount' => 'setSubtotal4Amount',
        'subtotal5_amount' => 'setSubtotal5Amount',
        'subtotal6_amount' => 'setSubtotal6Amount',
        'statistical_value_control' => 'setStatisticalValueControl',
        'cash_discount_is_deductible' => 'setCashDiscountIsDeductible',
        'customer_condition_group1' => 'setCustomerConditionGroup1',
        'customer_condition_group2' => 'setCustomerConditionGroup2',
        'customer_condition_group3' => 'setCustomerConditionGroup3',
        'customer_condition_group4' => 'setCustomerConditionGroup4',
        'customer_condition_group5' => 'setCustomerConditionGroup5',
        'manual_price_change_type' => 'setManualPriceChangeType',
        'material_pricing_group' => 'setMaterialPricingGroup',
        'abslt_statistics_exchange_rate' => 'setAbsltStatisticsExchangeRate',
        'statistics_exch_rate_is_indrct_qtan' => 'setStatisticsExchRateIsIndrctQtan',
        'main_item_pricing_ref_material' => 'setMainItemPricingRefMaterial',
        'main_item_material_pricing_group' => 'setMainItemMaterialPricingGroup',
        'departure_country' => 'setDepartureCountry',
        'tax_jurisdiction' => 'setTaxJurisdiction',
        'product_tax_classification1' => 'setProductTaxClassification1',
        'product_tax_classification2' => 'setProductTaxClassification2',
        'product_tax_classification3' => 'setProductTaxClassification3',
        'product_tax_classification4' => 'setProductTaxClassification4',
        'product_tax_classification5' => 'setProductTaxClassification5',
        'product_tax_classification6' => 'setProductTaxClassification6',
        'product_tax_classification7' => 'setProductTaxClassification7',
        'product_tax_classification8' => 'setProductTaxClassification8',
        'product_tax_classification9' => 'setProductTaxClassification9',
        'zero_vat_rsn' => 'setZeroVatRsn',
        'eligible_amount_for_cash_discount' => 'setEligibleAmountForCashDiscount',
        'business_area' => 'setBusinessArea',
        'profit_center' => 'setProfitCenter',
        'wbs_element' => 'setWbsElement',
        'controlling_area' => 'setControllingArea',
        'profitability_segment' => 'setProfitabilitySegment',
        'order_id' => 'setOrderId',
        'cost_center' => 'setCostCenter',
        'origin_sd_document' => 'setOriginSdDocument',
        'origin_sd_document_item' => 'setOriginSdDocumentItem',
        'matl_account_assignment_group' => 'setMatlAccountAssignmentGroup',
        'reference_sd_document' => 'setReferenceSdDocument',
        'reference_sd_document_item' => 'setReferenceSdDocumentItem',
        'reference_sd_document_category' => 'setReferenceSdDocumentCategory',
        'sales_document' => 'setSalesDocument',
        'sales_document_item' => 'setSalesDocumentItem',
        'sales_sd_document_category' => 'setSalesSdDocumentCategory',
        'higher_level_item' => 'setHigherLevelItem',
        'billing_document_item_in_part_sgmt' => 'setBillingDocumentItemInPartSgmt',
        'external_reference_document' => 'setExternalReferenceDocument',
        'external_reference_document_item' => 'setExternalReferenceDocumentItem',
        'sales_group' => 'setSalesGroup',
        'additional_customer_group1' => 'setAdditionalCustomerGroup1',
        'additional_customer_group2' => 'setAdditionalCustomerGroup2',
        'additional_customer_group3' => 'setAdditionalCustomerGroup3',
        'additional_customer_group4' => 'setAdditionalCustomerGroup4',
        'additional_customer_group5' => 'setAdditionalCustomerGroup5',
        'sd_document_reason' => 'setSdDocumentReason',
        'retail_promotion' => 'setRetailPromotion',
        'rebate_basis_amount' => 'setRebateBasisAmount',
        'volume_rebate_group' => 'setVolumeRebateGroup',
        'item_is_relevant_for_credit' => 'setItemIsRelevantForCredit',
        'credit_related_price' => 'setCreditRelatedPrice',
        'sales_deal' => 'setSalesDeal',
        'sales_promotion' => 'setSalesPromotion',
        'sales_order_sales_district' => 'setSalesOrderSalesDistrict',
        'sales_order_customer_group' => 'setSalesOrderCustomerGroup',
        'sales_order_customer_price_group' => 'setSalesOrderCustomerPriceGroup',
        'sales_order_price_list_type' => 'setSalesOrderPriceListType',
        'sales_order_sales_organization' => 'setSalesOrderSalesOrganization',
        'sales_order_distribution_channel' => 'setSalesOrderDistributionChannel',
        'sales_doc_is_created_from_reference' => 'setSalesDocIsCreatedFromReference',
        'shipping_point' => 'setShippingPoint',
        'higher_level_item_usage' => 'setHigherLevelItemUsage',
        'to_billing_document' => 'setToBillingDocument',
        'to_item_text' => 'setToItemText',
        'to_partner' => 'setToPartner',
        'to_pricing_element' => 'setToPricingElement'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'billing_document' => 'getBillingDocument',
        'billing_document_item' => 'getBillingDocumentItem',
        'sales_document_item_category' => 'getSalesDocumentItemCategory',
        'sales_document_item_type' => 'getSalesDocumentItemType',
        'return_item_processing_type' => 'getReturnItemProcessingType',
        'created_by_user' => 'getCreatedByUser',
        'creation_date' => 'getCreationDate',
        'creation_time' => 'getCreationTime',
        'reference_logical_system' => 'getReferenceLogicalSystem',
        'organization_division' => 'getOrganizationDivision',
        'division' => 'getDivision',
        'sales_office' => 'getSalesOffice',
        'material' => 'getMaterial',
        'originally_requested_material' => 'getOriginallyRequestedMaterial',
        'international_article_number' => 'getInternationalArticleNumber',
        'pricing_reference_material' => 'getPricingReferenceMaterial',
        'batch' => 'getBatch',
        'product_hierarchy_node' => 'getProductHierarchyNode',
        'material_group' => 'getMaterialGroup',
        'additional_material_group1' => 'getAdditionalMaterialGroup1',
        'additional_material_group2' => 'getAdditionalMaterialGroup2',
        'additional_material_group3' => 'getAdditionalMaterialGroup3',
        'additional_material_group4' => 'getAdditionalMaterialGroup4',
        'additional_material_group5' => 'getAdditionalMaterialGroup5',
        'material_commission_group' => 'getMaterialCommissionGroup',
        'plant' => 'getPlant',
        'storage_location' => 'getStorageLocation',
        'replacement_part_type' => 'getReplacementPartType',
        'material_group_hierarchy1' => 'getMaterialGroupHierarchy1',
        'material_group_hierarchy2' => 'getMaterialGroupHierarchy2',
        'plant_region' => 'getPlantRegion',
        'plant_county' => 'getPlantCounty',
        'plant_city' => 'getPlantCity',
        'bom_explosion' => 'getBomExplosion',
        'material_determination_type' => 'getMaterialDeterminationType',
        'billing_document_item_text' => 'getBillingDocumentItemText',
        'services_rendered_date' => 'getServicesRenderedDate',
        'billing_quantity' => 'getBillingQuantity',
        'billing_quantity_unit' => 'getBillingQuantityUnit',
        'billing_quantity_in_base_unit' => 'getBillingQuantityInBaseUnit',
        'base_unit' => 'getBaseUnit',
        'mrp_required_quantity_in_base_unit' => 'getMrpRequiredQuantityInBaseUnit',
        'billing_to_base_quantity_dnmntr' => 'getBillingToBaseQuantityDnmntr',
        'billing_to_base_quantity_nmrtr' => 'getBillingToBaseQuantityNmrtr',
        'item_gross_weight' => 'getItemGrossWeight',
        'item_net_weight' => 'getItemNetWeight',
        'item_weight_unit' => 'getItemWeightUnit',
        'item_volume' => 'getItemVolume',
        'item_volume_unit' => 'getItemVolumeUnit',
        'bill_to_party_country' => 'getBillToPartyCountry',
        'bill_to_party_region' => 'getBillToPartyRegion',
        'billing_plan_rule' => 'getBillingPlanRule',
        'billing_plan' => 'getBillingPlan',
        'billing_plan_item' => 'getBillingPlanItem',
        'net_amount' => 'getNetAmount',
        'transaction_currency' => 'getTransactionCurrency',
        'gross_amount' => 'getGrossAmount',
        'pricing_date' => 'getPricingDate',
        'abslt_price_detn_exchange_rate' => 'getAbsltPriceDetnExchangeRate',
        'price_detn_exch_rate_is_indrct_qtan' => 'getPriceDetnExchRateIsIndrctQtan',
        'price_detn_exchange_rate_date' => 'getPriceDetnExchangeRateDate',
        'pricing_scale_quantity_in_base_unit' => 'getPricingScaleQuantityInBaseUnit',
        'tax_amount' => 'getTaxAmount',
        'cost_amount' => 'getCostAmount',
        'subtotal1_amount' => 'getSubtotal1Amount',
        'subtotal2_amount' => 'getSubtotal2Amount',
        'subtotal3_amount' => 'getSubtotal3Amount',
        'subtotal4_amount' => 'getSubtotal4Amount',
        'subtotal5_amount' => 'getSubtotal5Amount',
        'subtotal6_amount' => 'getSubtotal6Amount',
        'statistical_value_control' => 'getStatisticalValueControl',
        'cash_discount_is_deductible' => 'getCashDiscountIsDeductible',
        'customer_condition_group1' => 'getCustomerConditionGroup1',
        'customer_condition_group2' => 'getCustomerConditionGroup2',
        'customer_condition_group3' => 'getCustomerConditionGroup3',
        'customer_condition_group4' => 'getCustomerConditionGroup4',
        'customer_condition_group5' => 'getCustomerConditionGroup5',
        'manual_price_change_type' => 'getManualPriceChangeType',
        'material_pricing_group' => 'getMaterialPricingGroup',
        'abslt_statistics_exchange_rate' => 'getAbsltStatisticsExchangeRate',
        'statistics_exch_rate_is_indrct_qtan' => 'getStatisticsExchRateIsIndrctQtan',
        'main_item_pricing_ref_material' => 'getMainItemPricingRefMaterial',
        'main_item_material_pricing_group' => 'getMainItemMaterialPricingGroup',
        'departure_country' => 'getDepartureCountry',
        'tax_jurisdiction' => 'getTaxJurisdiction',
        'product_tax_classification1' => 'getProductTaxClassification1',
        'product_tax_classification2' => 'getProductTaxClassification2',
        'product_tax_classification3' => 'getProductTaxClassification3',
        'product_tax_classification4' => 'getProductTaxClassification4',
        'product_tax_classification5' => 'getProductTaxClassification5',
        'product_tax_classification6' => 'getProductTaxClassification6',
        'product_tax_classification7' => 'getProductTaxClassification7',
        'product_tax_classification8' => 'getProductTaxClassification8',
        'product_tax_classification9' => 'getProductTaxClassification9',
        'zero_vat_rsn' => 'getZeroVatRsn',
        'eligible_amount_for_cash_discount' => 'getEligibleAmountForCashDiscount',
        'business_area' => 'getBusinessArea',
        'profit_center' => 'getProfitCenter',
        'wbs_element' => 'getWbsElement',
        'controlling_area' => 'getControllingArea',
        'profitability_segment' => 'getProfitabilitySegment',
        'order_id' => 'getOrderId',
        'cost_center' => 'getCostCenter',
        'origin_sd_document' => 'getOriginSdDocument',
        'origin_sd_document_item' => 'getOriginSdDocumentItem',
        'matl_account_assignment_group' => 'getMatlAccountAssignmentGroup',
        'reference_sd_document' => 'getReferenceSdDocument',
        'reference_sd_document_item' => 'getReferenceSdDocumentItem',
        'reference_sd_document_category' => 'getReferenceSdDocumentCategory',
        'sales_document' => 'getSalesDocument',
        'sales_document_item' => 'getSalesDocumentItem',
        'sales_sd_document_category' => 'getSalesSdDocumentCategory',
        'higher_level_item' => 'getHigherLevelItem',
        'billing_document_item_in_part_sgmt' => 'getBillingDocumentItemInPartSgmt',
        'external_reference_document' => 'getExternalReferenceDocument',
        'external_reference_document_item' => 'getExternalReferenceDocumentItem',
        'sales_group' => 'getSalesGroup',
        'additional_customer_group1' => 'getAdditionalCustomerGroup1',
        'additional_customer_group2' => 'getAdditionalCustomerGroup2',
        'additional_customer_group3' => 'getAdditionalCustomerGroup3',
        'additional_customer_group4' => 'getAdditionalCustomerGroup4',
        'additional_customer_group5' => 'getAdditionalCustomerGroup5',
        'sd_document_reason' => 'getSdDocumentReason',
        'retail_promotion' => 'getRetailPromotion',
        'rebate_basis_amount' => 'getRebateBasisAmount',
        'volume_rebate_group' => 'getVolumeRebateGroup',
        'item_is_relevant_for_credit' => 'getItemIsRelevantForCredit',
        'credit_related_price' => 'getCreditRelatedPrice',
        'sales_deal' => 'getSalesDeal',
        'sales_promotion' => 'getSalesPromotion',
        'sales_order_sales_district' => 'getSalesOrderSalesDistrict',
        'sales_order_customer_group' => 'getSalesOrderCustomerGroup',
        'sales_order_customer_price_group' => 'getSalesOrderCustomerPriceGroup',
        'sales_order_price_list_type' => 'getSalesOrderPriceListType',
        'sales_order_sales_organization' => 'getSalesOrderSalesOrganization',
        'sales_order_distribution_channel' => 'getSalesOrderDistributionChannel',
        'sales_doc_is_created_from_reference' => 'getSalesDocIsCreatedFromReference',
        'shipping_point' => 'getShippingPoint',
        'higher_level_item_usage' => 'getHigherLevelItemUsage',
        'to_billing_document' => 'getToBillingDocument',
        'to_item_text' => 'getToItemText',
        'to_partner' => 'getToPartner',
        'to_pricing_element' => 'getToPricingElement'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('billing_document', $data ?? [], null);
        $this->setIfExists('billing_document_item', $data ?? [], null);
        $this->setIfExists('sales_document_item_category', $data ?? [], null);
        $this->setIfExists('sales_document_item_type', $data ?? [], null);
        $this->setIfExists('return_item_processing_type', $data ?? [], null);
        $this->setIfExists('created_by_user', $data ?? [], null);
        $this->setIfExists('creation_date', $data ?? [], null);
        $this->setIfExists('creation_time', $data ?? [], null);
        $this->setIfExists('reference_logical_system', $data ?? [], null);
        $this->setIfExists('organization_division', $data ?? [], null);
        $this->setIfExists('division', $data ?? [], null);
        $this->setIfExists('sales_office', $data ?? [], null);
        $this->setIfExists('material', $data ?? [], null);
        $this->setIfExists('originally_requested_material', $data ?? [], null);
        $this->setIfExists('international_article_number', $data ?? [], null);
        $this->setIfExists('pricing_reference_material', $data ?? [], null);
        $this->setIfExists('batch', $data ?? [], null);
        $this->setIfExists('product_hierarchy_node', $data ?? [], null);
        $this->setIfExists('material_group', $data ?? [], null);
        $this->setIfExists('additional_material_group1', $data ?? [], null);
        $this->setIfExists('additional_material_group2', $data ?? [], null);
        $this->setIfExists('additional_material_group3', $data ?? [], null);
        $this->setIfExists('additional_material_group4', $data ?? [], null);
        $this->setIfExists('additional_material_group5', $data ?? [], null);
        $this->setIfExists('material_commission_group', $data ?? [], null);
        $this->setIfExists('plant', $data ?? [], null);
        $this->setIfExists('storage_location', $data ?? [], null);
        $this->setIfExists('replacement_part_type', $data ?? [], null);
        $this->setIfExists('material_group_hierarchy1', $data ?? [], null);
        $this->setIfExists('material_group_hierarchy2', $data ?? [], null);
        $this->setIfExists('plant_region', $data ?? [], null);
        $this->setIfExists('plant_county', $data ?? [], null);
        $this->setIfExists('plant_city', $data ?? [], null);
        $this->setIfExists('bom_explosion', $data ?? [], null);
        $this->setIfExists('material_determination_type', $data ?? [], null);
        $this->setIfExists('billing_document_item_text', $data ?? [], null);
        $this->setIfExists('services_rendered_date', $data ?? [], null);
        $this->setIfExists('billing_quantity', $data ?? [], null);
        $this->setIfExists('billing_quantity_unit', $data ?? [], null);
        $this->setIfExists('billing_quantity_in_base_unit', $data ?? [], null);
        $this->setIfExists('base_unit', $data ?? [], null);
        $this->setIfExists('mrp_required_quantity_in_base_unit', $data ?? [], null);
        $this->setIfExists('billing_to_base_quantity_dnmntr', $data ?? [], null);
        $this->setIfExists('billing_to_base_quantity_nmrtr', $data ?? [], null);
        $this->setIfExists('item_gross_weight', $data ?? [], null);
        $this->setIfExists('item_net_weight', $data ?? [], null);
        $this->setIfExists('item_weight_unit', $data ?? [], null);
        $this->setIfExists('item_volume', $data ?? [], null);
        $this->setIfExists('item_volume_unit', $data ?? [], null);
        $this->setIfExists('bill_to_party_country', $data ?? [], null);
        $this->setIfExists('bill_to_party_region', $data ?? [], null);
        $this->setIfExists('billing_plan_rule', $data ?? [], null);
        $this->setIfExists('billing_plan', $data ?? [], null);
        $this->setIfExists('billing_plan_item', $data ?? [], null);
        $this->setIfExists('net_amount', $data ?? [], null);
        $this->setIfExists('transaction_currency', $data ?? [], null);
        $this->setIfExists('gross_amount', $data ?? [], null);
        $this->setIfExists('pricing_date', $data ?? [], null);
        $this->setIfExists('abslt_price_detn_exchange_rate', $data ?? [], null);
        $this->setIfExists('price_detn_exch_rate_is_indrct_qtan', $data ?? [], null);
        $this->setIfExists('price_detn_exchange_rate_date', $data ?? [], null);
        $this->setIfExists('pricing_scale_quantity_in_base_unit', $data ?? [], null);
        $this->setIfExists('tax_amount', $data ?? [], null);
        $this->setIfExists('cost_amount', $data ?? [], null);
        $this->setIfExists('subtotal1_amount', $data ?? [], null);
        $this->setIfExists('subtotal2_amount', $data ?? [], null);
        $this->setIfExists('subtotal3_amount', $data ?? [], null);
        $this->setIfExists('subtotal4_amount', $data ?? [], null);
        $this->setIfExists('subtotal5_amount', $data ?? [], null);
        $this->setIfExists('subtotal6_amount', $data ?? [], null);
        $this->setIfExists('statistical_value_control', $data ?? [], null);
        $this->setIfExists('cash_discount_is_deductible', $data ?? [], null);
        $this->setIfExists('customer_condition_group1', $data ?? [], null);
        $this->setIfExists('customer_condition_group2', $data ?? [], null);
        $this->setIfExists('customer_condition_group3', $data ?? [], null);
        $this->setIfExists('customer_condition_group4', $data ?? [], null);
        $this->setIfExists('customer_condition_group5', $data ?? [], null);
        $this->setIfExists('manual_price_change_type', $data ?? [], null);
        $this->setIfExists('material_pricing_group', $data ?? [], null);
        $this->setIfExists('abslt_statistics_exchange_rate', $data ?? [], null);
        $this->setIfExists('statistics_exch_rate_is_indrct_qtan', $data ?? [], null);
        $this->setIfExists('main_item_pricing_ref_material', $data ?? [], null);
        $this->setIfExists('main_item_material_pricing_group', $data ?? [], null);
        $this->setIfExists('departure_country', $data ?? [], null);
        $this->setIfExists('tax_jurisdiction', $data ?? [], null);
        $this->setIfExists('product_tax_classification1', $data ?? [], null);
        $this->setIfExists('product_tax_classification2', $data ?? [], null);
        $this->setIfExists('product_tax_classification3', $data ?? [], null);
        $this->setIfExists('product_tax_classification4', $data ?? [], null);
        $this->setIfExists('product_tax_classification5', $data ?? [], null);
        $this->setIfExists('product_tax_classification6', $data ?? [], null);
        $this->setIfExists('product_tax_classification7', $data ?? [], null);
        $this->setIfExists('product_tax_classification8', $data ?? [], null);
        $this->setIfExists('product_tax_classification9', $data ?? [], null);
        $this->setIfExists('zero_vat_rsn', $data ?? [], null);
        $this->setIfExists('eligible_amount_for_cash_discount', $data ?? [], null);
        $this->setIfExists('business_area', $data ?? [], null);
        $this->setIfExists('profit_center', $data ?? [], null);
        $this->setIfExists('wbs_element', $data ?? [], null);
        $this->setIfExists('controlling_area', $data ?? [], null);
        $this->setIfExists('profitability_segment', $data ?? [], null);
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('cost_center', $data ?? [], null);
        $this->setIfExists('origin_sd_document', $data ?? [], null);
        $this->setIfExists('origin_sd_document_item', $data ?? [], null);
        $this->setIfExists('matl_account_assignment_group', $data ?? [], null);
        $this->setIfExists('reference_sd_document', $data ?? [], null);
        $this->setIfExists('reference_sd_document_item', $data ?? [], null);
        $this->setIfExists('reference_sd_document_category', $data ?? [], null);
        $this->setIfExists('sales_document', $data ?? [], null);
        $this->setIfExists('sales_document_item', $data ?? [], null);
        $this->setIfExists('sales_sd_document_category', $data ?? [], null);
        $this->setIfExists('higher_level_item', $data ?? [], null);
        $this->setIfExists('billing_document_item_in_part_sgmt', $data ?? [], null);
        $this->setIfExists('external_reference_document', $data ?? [], null);
        $this->setIfExists('external_reference_document_item', $data ?? [], null);
        $this->setIfExists('sales_group', $data ?? [], null);
        $this->setIfExists('additional_customer_group1', $data ?? [], null);
        $this->setIfExists('additional_customer_group2', $data ?? [], null);
        $this->setIfExists('additional_customer_group3', $data ?? [], null);
        $this->setIfExists('additional_customer_group4', $data ?? [], null);
        $this->setIfExists('additional_customer_group5', $data ?? [], null);
        $this->setIfExists('sd_document_reason', $data ?? [], null);
        $this->setIfExists('retail_promotion', $data ?? [], null);
        $this->setIfExists('rebate_basis_amount', $data ?? [], null);
        $this->setIfExists('volume_rebate_group', $data ?? [], null);
        $this->setIfExists('item_is_relevant_for_credit', $data ?? [], null);
        $this->setIfExists('credit_related_price', $data ?? [], null);
        $this->setIfExists('sales_deal', $data ?? [], null);
        $this->setIfExists('sales_promotion', $data ?? [], null);
        $this->setIfExists('sales_order_sales_district', $data ?? [], null);
        $this->setIfExists('sales_order_customer_group', $data ?? [], null);
        $this->setIfExists('sales_order_customer_price_group', $data ?? [], null);
        $this->setIfExists('sales_order_price_list_type', $data ?? [], null);
        $this->setIfExists('sales_order_sales_organization', $data ?? [], null);
        $this->setIfExists('sales_order_distribution_channel', $data ?? [], null);
        $this->setIfExists('sales_doc_is_created_from_reference', $data ?? [], null);
        $this->setIfExists('shipping_point', $data ?? [], null);
        $this->setIfExists('higher_level_item_usage', $data ?? [], null);
        $this->setIfExists('to_billing_document', $data ?? [], null);
        $this->setIfExists('to_item_text', $data ?? [], null);
        $this->setIfExists('to_partner', $data ?? [], null);
        $this->setIfExists('to_pricing_element', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['billing_document'] === null) {
            $invalidProperties[] = "'billing_document' can't be null";
        }
        if ((mb_strlen($this->container['billing_document']) > 10)) {
            $invalidProperties[] = "invalid value for 'billing_document', the character length must be smaller than or equal to 10.";
        }

        if ($this->container['billing_document_item'] === null) {
            $invalidProperties[] = "'billing_document_item' can't be null";
        }
        if ((mb_strlen($this->container['billing_document_item']) > 6)) {
            $invalidProperties[] = "invalid value for 'billing_document_item', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['sales_document_item_category']) && (mb_strlen($this->container['sales_document_item_category']) > 4)) {
            $invalidProperties[] = "invalid value for 'sales_document_item_category', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['sales_document_item_type']) && (mb_strlen($this->container['sales_document_item_type']) > 1)) {
            $invalidProperties[] = "invalid value for 'sales_document_item_type', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['return_item_processing_type']) && (mb_strlen($this->container['return_item_processing_type']) > 1)) {
            $invalidProperties[] = "invalid value for 'return_item_processing_type', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['created_by_user']) && (mb_strlen($this->container['created_by_user']) > 12)) {
            $invalidProperties[] = "invalid value for 'created_by_user', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['reference_logical_system']) && (mb_strlen($this->container['reference_logical_system']) > 10)) {
            $invalidProperties[] = "invalid value for 'reference_logical_system', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['organization_division']) && (mb_strlen($this->container['organization_division']) > 2)) {
            $invalidProperties[] = "invalid value for 'organization_division', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['division']) && (mb_strlen($this->container['division']) > 2)) {
            $invalidProperties[] = "invalid value for 'division', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['sales_office']) && (mb_strlen($this->container['sales_office']) > 4)) {
            $invalidProperties[] = "invalid value for 'sales_office', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['material']) && (mb_strlen($this->container['material']) > 40)) {
            $invalidProperties[] = "invalid value for 'material', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['originally_requested_material']) && (mb_strlen($this->container['originally_requested_material']) > 40)) {
            $invalidProperties[] = "invalid value for 'originally_requested_material', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['international_article_number']) && (mb_strlen($this->container['international_article_number']) > 18)) {
            $invalidProperties[] = "invalid value for 'international_article_number', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['pricing_reference_material']) && (mb_strlen($this->container['pricing_reference_material']) > 40)) {
            $invalidProperties[] = "invalid value for 'pricing_reference_material', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['batch']) && (mb_strlen($this->container['batch']) > 10)) {
            $invalidProperties[] = "invalid value for 'batch', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['product_hierarchy_node']) && (mb_strlen($this->container['product_hierarchy_node']) > 18)) {
            $invalidProperties[] = "invalid value for 'product_hierarchy_node', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['material_group']) && (mb_strlen($this->container['material_group']) > 9)) {
            $invalidProperties[] = "invalid value for 'material_group', the character length must be smaller than or equal to 9.";
        }

        if (!is_null($this->container['additional_material_group1']) && (mb_strlen($this->container['additional_material_group1']) > 3)) {
            $invalidProperties[] = "invalid value for 'additional_material_group1', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['additional_material_group2']) && (mb_strlen($this->container['additional_material_group2']) > 3)) {
            $invalidProperties[] = "invalid value for 'additional_material_group2', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['additional_material_group3']) && (mb_strlen($this->container['additional_material_group3']) > 3)) {
            $invalidProperties[] = "invalid value for 'additional_material_group3', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['additional_material_group4']) && (mb_strlen($this->container['additional_material_group4']) > 3)) {
            $invalidProperties[] = "invalid value for 'additional_material_group4', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['additional_material_group5']) && (mb_strlen($this->container['additional_material_group5']) > 3)) {
            $invalidProperties[] = "invalid value for 'additional_material_group5', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['material_commission_group']) && (mb_strlen($this->container['material_commission_group']) > 2)) {
            $invalidProperties[] = "invalid value for 'material_commission_group', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['plant']) && (mb_strlen($this->container['plant']) > 4)) {
            $invalidProperties[] = "invalid value for 'plant', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['storage_location']) && (mb_strlen($this->container['storage_location']) > 4)) {
            $invalidProperties[] = "invalid value for 'storage_location', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['replacement_part_type']) && (mb_strlen($this->container['replacement_part_type']) > 1)) {
            $invalidProperties[] = "invalid value for 'replacement_part_type', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['material_group_hierarchy1']) && (mb_strlen($this->container['material_group_hierarchy1']) > 18)) {
            $invalidProperties[] = "invalid value for 'material_group_hierarchy1', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['material_group_hierarchy2']) && (mb_strlen($this->container['material_group_hierarchy2']) > 18)) {
            $invalidProperties[] = "invalid value for 'material_group_hierarchy2', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['plant_region']) && (mb_strlen($this->container['plant_region']) > 3)) {
            $invalidProperties[] = "invalid value for 'plant_region', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['plant_county']) && (mb_strlen($this->container['plant_county']) > 3)) {
            $invalidProperties[] = "invalid value for 'plant_county', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['plant_city']) && (mb_strlen($this->container['plant_city']) > 4)) {
            $invalidProperties[] = "invalid value for 'plant_city', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['bom_explosion']) && (mb_strlen($this->container['bom_explosion']) > 8)) {
            $invalidProperties[] = "invalid value for 'bom_explosion', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['material_determination_type']) && (mb_strlen($this->container['material_determination_type']) > 1)) {
            $invalidProperties[] = "invalid value for 'material_determination_type', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['billing_document_item_text']) && (mb_strlen($this->container['billing_document_item_text']) > 40)) {
            $invalidProperties[] = "invalid value for 'billing_document_item_text', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['billing_quantity_unit']) && (mb_strlen($this->container['billing_quantity_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'billing_quantity_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['base_unit']) && (mb_strlen($this->container['base_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'base_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['item_weight_unit']) && (mb_strlen($this->container['item_weight_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'item_weight_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['item_volume_unit']) && (mb_strlen($this->container['item_volume_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'item_volume_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['bill_to_party_country']) && (mb_strlen($this->container['bill_to_party_country']) > 3)) {
            $invalidProperties[] = "invalid value for 'bill_to_party_country', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['bill_to_party_region']) && (mb_strlen($this->container['bill_to_party_region']) > 3)) {
            $invalidProperties[] = "invalid value for 'bill_to_party_region', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['billing_plan_rule']) && (mb_strlen($this->container['billing_plan_rule']) > 1)) {
            $invalidProperties[] = "invalid value for 'billing_plan_rule', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['billing_plan']) && (mb_strlen($this->container['billing_plan']) > 10)) {
            $invalidProperties[] = "invalid value for 'billing_plan', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['billing_plan_item']) && (mb_strlen($this->container['billing_plan_item']) > 6)) {
            $invalidProperties[] = "invalid value for 'billing_plan_item', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['transaction_currency']) && (mb_strlen($this->container['transaction_currency']) > 5)) {
            $invalidProperties[] = "invalid value for 'transaction_currency', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['statistical_value_control']) && (mb_strlen($this->container['statistical_value_control']) > 1)) {
            $invalidProperties[] = "invalid value for 'statistical_value_control', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['customer_condition_group1']) && (mb_strlen($this->container['customer_condition_group1']) > 2)) {
            $invalidProperties[] = "invalid value for 'customer_condition_group1', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['customer_condition_group2']) && (mb_strlen($this->container['customer_condition_group2']) > 2)) {
            $invalidProperties[] = "invalid value for 'customer_condition_group2', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['customer_condition_group3']) && (mb_strlen($this->container['customer_condition_group3']) > 2)) {
            $invalidProperties[] = "invalid value for 'customer_condition_group3', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['customer_condition_group4']) && (mb_strlen($this->container['customer_condition_group4']) > 2)) {
            $invalidProperties[] = "invalid value for 'customer_condition_group4', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['customer_condition_group5']) && (mb_strlen($this->container['customer_condition_group5']) > 2)) {
            $invalidProperties[] = "invalid value for 'customer_condition_group5', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['manual_price_change_type']) && (mb_strlen($this->container['manual_price_change_type']) > 1)) {
            $invalidProperties[] = "invalid value for 'manual_price_change_type', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['material_pricing_group']) && (mb_strlen($this->container['material_pricing_group']) > 2)) {
            $invalidProperties[] = "invalid value for 'material_pricing_group', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['main_item_pricing_ref_material']) && (mb_strlen($this->container['main_item_pricing_ref_material']) > 40)) {
            $invalidProperties[] = "invalid value for 'main_item_pricing_ref_material', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['main_item_material_pricing_group']) && (mb_strlen($this->container['main_item_material_pricing_group']) > 2)) {
            $invalidProperties[] = "invalid value for 'main_item_material_pricing_group', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['departure_country']) && (mb_strlen($this->container['departure_country']) > 3)) {
            $invalidProperties[] = "invalid value for 'departure_country', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['tax_jurisdiction']) && (mb_strlen($this->container['tax_jurisdiction']) > 15)) {
            $invalidProperties[] = "invalid value for 'tax_jurisdiction', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['product_tax_classification1']) && (mb_strlen($this->container['product_tax_classification1']) > 1)) {
            $invalidProperties[] = "invalid value for 'product_tax_classification1', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['product_tax_classification2']) && (mb_strlen($this->container['product_tax_classification2']) > 1)) {
            $invalidProperties[] = "invalid value for 'product_tax_classification2', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['product_tax_classification3']) && (mb_strlen($this->container['product_tax_classification3']) > 1)) {
            $invalidProperties[] = "invalid value for 'product_tax_classification3', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['product_tax_classification4']) && (mb_strlen($this->container['product_tax_classification4']) > 1)) {
            $invalidProperties[] = "invalid value for 'product_tax_classification4', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['product_tax_classification5']) && (mb_strlen($this->container['product_tax_classification5']) > 1)) {
            $invalidProperties[] = "invalid value for 'product_tax_classification5', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['product_tax_classification6']) && (mb_strlen($this->container['product_tax_classification6']) > 1)) {
            $invalidProperties[] = "invalid value for 'product_tax_classification6', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['product_tax_classification7']) && (mb_strlen($this->container['product_tax_classification7']) > 1)) {
            $invalidProperties[] = "invalid value for 'product_tax_classification7', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['product_tax_classification8']) && (mb_strlen($this->container['product_tax_classification8']) > 1)) {
            $invalidProperties[] = "invalid value for 'product_tax_classification8', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['product_tax_classification9']) && (mb_strlen($this->container['product_tax_classification9']) > 1)) {
            $invalidProperties[] = "invalid value for 'product_tax_classification9', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['zero_vat_rsn']) && (mb_strlen($this->container['zero_vat_rsn']) > 1)) {
            $invalidProperties[] = "invalid value for 'zero_vat_rsn', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['business_area']) && (mb_strlen($this->container['business_area']) > 4)) {
            $invalidProperties[] = "invalid value for 'business_area', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['profit_center']) && (mb_strlen($this->container['profit_center']) > 10)) {
            $invalidProperties[] = "invalid value for 'profit_center', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['wbs_element']) && (mb_strlen($this->container['wbs_element']) > 24)) {
            $invalidProperties[] = "invalid value for 'wbs_element', the character length must be smaller than or equal to 24.";
        }

        if (!is_null($this->container['controlling_area']) && (mb_strlen($this->container['controlling_area']) > 4)) {
            $invalidProperties[] = "invalid value for 'controlling_area', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['profitability_segment']) && (mb_strlen($this->container['profitability_segment']) > 10)) {
            $invalidProperties[] = "invalid value for 'profitability_segment', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['order_id']) && (mb_strlen($this->container['order_id']) > 12)) {
            $invalidProperties[] = "invalid value for 'order_id', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['cost_center']) && (mb_strlen($this->container['cost_center']) > 10)) {
            $invalidProperties[] = "invalid value for 'cost_center', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['origin_sd_document']) && (mb_strlen($this->container['origin_sd_document']) > 10)) {
            $invalidProperties[] = "invalid value for 'origin_sd_document', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['origin_sd_document_item']) && (mb_strlen($this->container['origin_sd_document_item']) > 6)) {
            $invalidProperties[] = "invalid value for 'origin_sd_document_item', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['matl_account_assignment_group']) && (mb_strlen($this->container['matl_account_assignment_group']) > 2)) {
            $invalidProperties[] = "invalid value for 'matl_account_assignment_group', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['reference_sd_document']) && (mb_strlen($this->container['reference_sd_document']) > 10)) {
            $invalidProperties[] = "invalid value for 'reference_sd_document', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['reference_sd_document_item']) && (mb_strlen($this->container['reference_sd_document_item']) > 6)) {
            $invalidProperties[] = "invalid value for 'reference_sd_document_item', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['reference_sd_document_category']) && (mb_strlen($this->container['reference_sd_document_category']) > 4)) {
            $invalidProperties[] = "invalid value for 'reference_sd_document_category', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['sales_document']) && (mb_strlen($this->container['sales_document']) > 10)) {
            $invalidProperties[] = "invalid value for 'sales_document', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['sales_document_item']) && (mb_strlen($this->container['sales_document_item']) > 6)) {
            $invalidProperties[] = "invalid value for 'sales_document_item', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['sales_sd_document_category']) && (mb_strlen($this->container['sales_sd_document_category']) > 4)) {
            $invalidProperties[] = "invalid value for 'sales_sd_document_category', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['higher_level_item']) && (mb_strlen($this->container['higher_level_item']) > 6)) {
            $invalidProperties[] = "invalid value for 'higher_level_item', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['billing_document_item_in_part_sgmt']) && (mb_strlen($this->container['billing_document_item_in_part_sgmt']) > 6)) {
            $invalidProperties[] = "invalid value for 'billing_document_item_in_part_sgmt', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['external_reference_document']) && (mb_strlen($this->container['external_reference_document']) > 10)) {
            $invalidProperties[] = "invalid value for 'external_reference_document', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['external_reference_document_item']) && (mb_strlen($this->container['external_reference_document_item']) > 6)) {
            $invalidProperties[] = "invalid value for 'external_reference_document_item', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['sales_group']) && (mb_strlen($this->container['sales_group']) > 3)) {
            $invalidProperties[] = "invalid value for 'sales_group', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['additional_customer_group1']) && (mb_strlen($this->container['additional_customer_group1']) > 3)) {
            $invalidProperties[] = "invalid value for 'additional_customer_group1', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['additional_customer_group2']) && (mb_strlen($this->container['additional_customer_group2']) > 3)) {
            $invalidProperties[] = "invalid value for 'additional_customer_group2', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['additional_customer_group3']) && (mb_strlen($this->container['additional_customer_group3']) > 3)) {
            $invalidProperties[] = "invalid value for 'additional_customer_group3', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['additional_customer_group4']) && (mb_strlen($this->container['additional_customer_group4']) > 3)) {
            $invalidProperties[] = "invalid value for 'additional_customer_group4', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['additional_customer_group5']) && (mb_strlen($this->container['additional_customer_group5']) > 3)) {
            $invalidProperties[] = "invalid value for 'additional_customer_group5', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['sd_document_reason']) && (mb_strlen($this->container['sd_document_reason']) > 3)) {
            $invalidProperties[] = "invalid value for 'sd_document_reason', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['retail_promotion']) && (mb_strlen($this->container['retail_promotion']) > 10)) {
            $invalidProperties[] = "invalid value for 'retail_promotion', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['volume_rebate_group']) && (mb_strlen($this->container['volume_rebate_group']) > 2)) {
            $invalidProperties[] = "invalid value for 'volume_rebate_group', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['sales_deal']) && (mb_strlen($this->container['sales_deal']) > 10)) {
            $invalidProperties[] = "invalid value for 'sales_deal', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['sales_promotion']) && (mb_strlen($this->container['sales_promotion']) > 10)) {
            $invalidProperties[] = "invalid value for 'sales_promotion', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['sales_order_sales_district']) && (mb_strlen($this->container['sales_order_sales_district']) > 6)) {
            $invalidProperties[] = "invalid value for 'sales_order_sales_district', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['sales_order_customer_group']) && (mb_strlen($this->container['sales_order_customer_group']) > 2)) {
            $invalidProperties[] = "invalid value for 'sales_order_customer_group', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['sales_order_customer_price_group']) && (mb_strlen($this->container['sales_order_customer_price_group']) > 2)) {
            $invalidProperties[] = "invalid value for 'sales_order_customer_price_group', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['sales_order_price_list_type']) && (mb_strlen($this->container['sales_order_price_list_type']) > 2)) {
            $invalidProperties[] = "invalid value for 'sales_order_price_list_type', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['sales_order_sales_organization']) && (mb_strlen($this->container['sales_order_sales_organization']) > 4)) {
            $invalidProperties[] = "invalid value for 'sales_order_sales_organization', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['sales_order_distribution_channel']) && (mb_strlen($this->container['sales_order_distribution_channel']) > 2)) {
            $invalidProperties[] = "invalid value for 'sales_order_distribution_channel', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['shipping_point']) && (mb_strlen($this->container['shipping_point']) > 4)) {
            $invalidProperties[] = "invalid value for 'shipping_point', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['higher_level_item_usage']) && (mb_strlen($this->container['higher_level_item_usage']) > 1)) {
            $invalidProperties[] = "invalid value for 'higher_level_item_usage', the character length must be smaller than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets billing_document
     *
     * @return string
     */
    public function getBillingDocument()
    {
        return $this->container['billing_document'];
    }

    /**
     * Sets billing_document
     *
     * @param string $billing_document billing_document
     *
     * @return self
     */
    public function setBillingDocument($billing_document)
    {
        if (is_null($billing_document)) {
            throw new \InvalidArgumentException('non-nullable billing_document cannot be null');
        }
        if ((mb_strlen($billing_document) > 10)) {
            throw new \InvalidArgumentException('invalid length for $billing_document when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['billing_document'] = $billing_document;

        return $this;
    }

    /**
     * Gets billing_document_item
     *
     * @return string
     */
    public function getBillingDocumentItem()
    {
        return $this->container['billing_document_item'];
    }

    /**
     * Sets billing_document_item
     *
     * @param string $billing_document_item Billing Item
     *
     * @return self
     */
    public function setBillingDocumentItem($billing_document_item)
    {
        if (is_null($billing_document_item)) {
            throw new \InvalidArgumentException('non-nullable billing_document_item cannot be null');
        }
        if ((mb_strlen($billing_document_item) > 6)) {
            throw new \InvalidArgumentException('invalid length for $billing_document_item when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 6.');
        }

        $this->container['billing_document_item'] = $billing_document_item;

        return $this;
    }

    /**
     * Gets sales_document_item_category
     *
     * @return string|null
     */
    public function getSalesDocumentItemCategory()
    {
        return $this->container['sales_document_item_category'];
    }

    /**
     * Sets sales_document_item_category
     *
     * @param string|null $sales_document_item_category Sales Document Item Category
     *
     * @return self
     */
    public function setSalesDocumentItemCategory($sales_document_item_category)
    {
        if (is_null($sales_document_item_category)) {
            array_push($this->openAPINullablesSetToNull, 'sales_document_item_category');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_document_item_category', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_document_item_category) && (mb_strlen($sales_document_item_category) > 4)) {
            throw new \InvalidArgumentException('invalid length for $sales_document_item_category when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['sales_document_item_category'] = $sales_document_item_category;

        return $this;
    }

    /**
     * Gets sales_document_item_type
     *
     * @return string|null
     */
    public function getSalesDocumentItemType()
    {
        return $this->container['sales_document_item_type'];
    }

    /**
     * Sets sales_document_item_type
     *
     * @param string|null $sales_document_item_type sales_document_item_type
     *
     * @return self
     */
    public function setSalesDocumentItemType($sales_document_item_type)
    {
        if (is_null($sales_document_item_type)) {
            array_push($this->openAPINullablesSetToNull, 'sales_document_item_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_document_item_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_document_item_type) && (mb_strlen($sales_document_item_type) > 1)) {
            throw new \InvalidArgumentException('invalid length for $sales_document_item_type when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['sales_document_item_type'] = $sales_document_item_type;

        return $this;
    }

    /**
     * Gets return_item_processing_type
     *
     * @return string|null
     */
    public function getReturnItemProcessingType()
    {
        return $this->container['return_item_processing_type'];
    }

    /**
     * Sets return_item_processing_type
     *
     * @param string|null $return_item_processing_type Returns item
     *
     * @return self
     */
    public function setReturnItemProcessingType($return_item_processing_type)
    {
        if (is_null($return_item_processing_type)) {
            array_push($this->openAPINullablesSetToNull, 'return_item_processing_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('return_item_processing_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($return_item_processing_type) && (mb_strlen($return_item_processing_type) > 1)) {
            throw new \InvalidArgumentException('invalid length for $return_item_processing_type when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['return_item_processing_type'] = $return_item_processing_type;

        return $this;
    }

    /**
     * Gets created_by_user
     *
     * @return string|null
     */
    public function getCreatedByUser()
    {
        return $this->container['created_by_user'];
    }

    /**
     * Sets created_by_user
     *
     * @param string|null $created_by_user Name of Person Responsible for Creating the Object
     *
     * @return self
     */
    public function setCreatedByUser($created_by_user)
    {
        if (is_null($created_by_user)) {
            array_push($this->openAPINullablesSetToNull, 'created_by_user');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_by_user', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($created_by_user) && (mb_strlen($created_by_user) > 12)) {
            throw new \InvalidArgumentException('invalid length for $created_by_user when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 12.');
        }

        $this->container['created_by_user'] = $created_by_user;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return string|null
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param string|null $creation_date Record Creation Date
     *
     * @return self
     */
    public function setCreationDate($creation_date)
    {
        if (is_null($creation_date)) {
            array_push($this->openAPINullablesSetToNull, 'creation_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('creation_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets creation_time
     *
     * @return string|null
     */
    public function getCreationTime()
    {
        return $this->container['creation_time'];
    }

    /**
     * Sets creation_time
     *
     * @param string|null $creation_time Entry time
     *
     * @return self
     */
    public function setCreationTime($creation_time)
    {
        if (is_null($creation_time)) {
            array_push($this->openAPINullablesSetToNull, 'creation_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('creation_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['creation_time'] = $creation_time;

        return $this;
    }

    /**
     * Gets reference_logical_system
     *
     * @return string|null
     */
    public function getReferenceLogicalSystem()
    {
        return $this->container['reference_logical_system'];
    }

    /**
     * Sets reference_logical_system
     *
     * @param string|null $reference_logical_system reference_logical_system
     *
     * @return self
     */
    public function setReferenceLogicalSystem($reference_logical_system)
    {
        if (is_null($reference_logical_system)) {
            array_push($this->openAPINullablesSetToNull, 'reference_logical_system');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reference_logical_system', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($reference_logical_system) && (mb_strlen($reference_logical_system) > 10)) {
            throw new \InvalidArgumentException('invalid length for $reference_logical_system when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['reference_logical_system'] = $reference_logical_system;

        return $this;
    }

    /**
     * Gets organization_division
     *
     * @return string|null
     */
    public function getOrganizationDivision()
    {
        return $this->container['organization_division'];
    }

    /**
     * Sets organization_division
     *
     * @param string|null $organization_division Division in Sales Order Header
     *
     * @return self
     */
    public function setOrganizationDivision($organization_division)
    {
        if (is_null($organization_division)) {
            array_push($this->openAPINullablesSetToNull, 'organization_division');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organization_division', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($organization_division) && (mb_strlen($organization_division) > 2)) {
            throw new \InvalidArgumentException('invalid length for $organization_division when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['organization_division'] = $organization_division;

        return $this;
    }

    /**
     * Gets division
     *
     * @return string|null
     */
    public function getDivision()
    {
        return $this->container['division'];
    }

    /**
     * Sets division
     *
     * @param string|null $division division
     *
     * @return self
     */
    public function setDivision($division)
    {
        if (is_null($division)) {
            array_push($this->openAPINullablesSetToNull, 'division');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('division', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($division) && (mb_strlen($division) > 2)) {
            throw new \InvalidArgumentException('invalid length for $division when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['division'] = $division;

        return $this;
    }

    /**
     * Gets sales_office
     *
     * @return string|null
     */
    public function getSalesOffice()
    {
        return $this->container['sales_office'];
    }

    /**
     * Sets sales_office
     *
     * @param string|null $sales_office sales_office
     *
     * @return self
     */
    public function setSalesOffice($sales_office)
    {
        if (is_null($sales_office)) {
            array_push($this->openAPINullablesSetToNull, 'sales_office');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_office', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_office) && (mb_strlen($sales_office) > 4)) {
            throw new \InvalidArgumentException('invalid length for $sales_office when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['sales_office'] = $sales_office;

        return $this;
    }

    /**
     * Gets material
     *
     * @return string|null
     */
    public function getMaterial()
    {
        return $this->container['material'];
    }

    /**
     * Sets material
     *
     * @param string|null $material Material Number
     *
     * @return self
     */
    public function setMaterial($material)
    {
        if (is_null($material)) {
            array_push($this->openAPINullablesSetToNull, 'material');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('material', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($material) && (mb_strlen($material) > 40)) {
            throw new \InvalidArgumentException('invalid length for $material when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['material'] = $material;

        return $this;
    }

    /**
     * Gets originally_requested_material
     *
     * @return string|null
     */
    public function getOriginallyRequestedMaterial()
    {
        return $this->container['originally_requested_material'];
    }

    /**
     * Sets originally_requested_material
     *
     * @param string|null $originally_requested_material originally_requested_material
     *
     * @return self
     */
    public function setOriginallyRequestedMaterial($originally_requested_material)
    {
        if (is_null($originally_requested_material)) {
            array_push($this->openAPINullablesSetToNull, 'originally_requested_material');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('originally_requested_material', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($originally_requested_material) && (mb_strlen($originally_requested_material) > 40)) {
            throw new \InvalidArgumentException('invalid length for $originally_requested_material when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['originally_requested_material'] = $originally_requested_material;

        return $this;
    }

    /**
     * Gets international_article_number
     *
     * @return string|null
     */
    public function getInternationalArticleNumber()
    {
        return $this->container['international_article_number'];
    }

    /**
     * Sets international_article_number
     *
     * @param string|null $international_article_number International Article Number (EAN/UPC)
     *
     * @return self
     */
    public function setInternationalArticleNumber($international_article_number)
    {
        if (is_null($international_article_number)) {
            array_push($this->openAPINullablesSetToNull, 'international_article_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('international_article_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($international_article_number) && (mb_strlen($international_article_number) > 18)) {
            throw new \InvalidArgumentException('invalid length for $international_article_number when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 18.');
        }

        $this->container['international_article_number'] = $international_article_number;

        return $this;
    }

    /**
     * Gets pricing_reference_material
     *
     * @return string|null
     */
    public function getPricingReferenceMaterial()
    {
        return $this->container['pricing_reference_material'];
    }

    /**
     * Sets pricing_reference_material
     *
     * @param string|null $pricing_reference_material Pricing Reference Material
     *
     * @return self
     */
    public function setPricingReferenceMaterial($pricing_reference_material)
    {
        if (is_null($pricing_reference_material)) {
            array_push($this->openAPINullablesSetToNull, 'pricing_reference_material');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pricing_reference_material', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($pricing_reference_material) && (mb_strlen($pricing_reference_material) > 40)) {
            throw new \InvalidArgumentException('invalid length for $pricing_reference_material when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['pricing_reference_material'] = $pricing_reference_material;

        return $this;
    }

    /**
     * Gets batch
     *
     * @return string|null
     */
    public function getBatch()
    {
        return $this->container['batch'];
    }

    /**
     * Sets batch
     *
     * @param string|null $batch Batch Number
     *
     * @return self
     */
    public function setBatch($batch)
    {
        if (is_null($batch)) {
            array_push($this->openAPINullablesSetToNull, 'batch');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('batch', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($batch) && (mb_strlen($batch) > 10)) {
            throw new \InvalidArgumentException('invalid length for $batch when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['batch'] = $batch;

        return $this;
    }

    /**
     * Gets product_hierarchy_node
     *
     * @return string|null
     */
    public function getProductHierarchyNode()
    {
        return $this->container['product_hierarchy_node'];
    }

    /**
     * Sets product_hierarchy_node
     *
     * @param string|null $product_hierarchy_node product_hierarchy_node
     *
     * @return self
     */
    public function setProductHierarchyNode($product_hierarchy_node)
    {
        if (is_null($product_hierarchy_node)) {
            array_push($this->openAPINullablesSetToNull, 'product_hierarchy_node');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_hierarchy_node', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($product_hierarchy_node) && (mb_strlen($product_hierarchy_node) > 18)) {
            throw new \InvalidArgumentException('invalid length for $product_hierarchy_node when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 18.');
        }

        $this->container['product_hierarchy_node'] = $product_hierarchy_node;

        return $this;
    }

    /**
     * Gets material_group
     *
     * @return string|null
     */
    public function getMaterialGroup()
    {
        return $this->container['material_group'];
    }

    /**
     * Sets material_group
     *
     * @param string|null $material_group material_group
     *
     * @return self
     */
    public function setMaterialGroup($material_group)
    {
        if (is_null($material_group)) {
            array_push($this->openAPINullablesSetToNull, 'material_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('material_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($material_group) && (mb_strlen($material_group) > 9)) {
            throw new \InvalidArgumentException('invalid length for $material_group when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 9.');
        }

        $this->container['material_group'] = $material_group;

        return $this;
    }

    /**
     * Gets additional_material_group1
     *
     * @return string|null
     */
    public function getAdditionalMaterialGroup1()
    {
        return $this->container['additional_material_group1'];
    }

    /**
     * Sets additional_material_group1
     *
     * @param string|null $additional_material_group1 additional_material_group1
     *
     * @return self
     */
    public function setAdditionalMaterialGroup1($additional_material_group1)
    {
        if (is_null($additional_material_group1)) {
            array_push($this->openAPINullablesSetToNull, 'additional_material_group1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_material_group1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($additional_material_group1) && (mb_strlen($additional_material_group1) > 3)) {
            throw new \InvalidArgumentException('invalid length for $additional_material_group1 when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['additional_material_group1'] = $additional_material_group1;

        return $this;
    }

    /**
     * Gets additional_material_group2
     *
     * @return string|null
     */
    public function getAdditionalMaterialGroup2()
    {
        return $this->container['additional_material_group2'];
    }

    /**
     * Sets additional_material_group2
     *
     * @param string|null $additional_material_group2 additional_material_group2
     *
     * @return self
     */
    public function setAdditionalMaterialGroup2($additional_material_group2)
    {
        if (is_null($additional_material_group2)) {
            array_push($this->openAPINullablesSetToNull, 'additional_material_group2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_material_group2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($additional_material_group2) && (mb_strlen($additional_material_group2) > 3)) {
            throw new \InvalidArgumentException('invalid length for $additional_material_group2 when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['additional_material_group2'] = $additional_material_group2;

        return $this;
    }

    /**
     * Gets additional_material_group3
     *
     * @return string|null
     */
    public function getAdditionalMaterialGroup3()
    {
        return $this->container['additional_material_group3'];
    }

    /**
     * Sets additional_material_group3
     *
     * @param string|null $additional_material_group3 additional_material_group3
     *
     * @return self
     */
    public function setAdditionalMaterialGroup3($additional_material_group3)
    {
        if (is_null($additional_material_group3)) {
            array_push($this->openAPINullablesSetToNull, 'additional_material_group3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_material_group3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($additional_material_group3) && (mb_strlen($additional_material_group3) > 3)) {
            throw new \InvalidArgumentException('invalid length for $additional_material_group3 when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['additional_material_group3'] = $additional_material_group3;

        return $this;
    }

    /**
     * Gets additional_material_group4
     *
     * @return string|null
     */
    public function getAdditionalMaterialGroup4()
    {
        return $this->container['additional_material_group4'];
    }

    /**
     * Sets additional_material_group4
     *
     * @param string|null $additional_material_group4 additional_material_group4
     *
     * @return self
     */
    public function setAdditionalMaterialGroup4($additional_material_group4)
    {
        if (is_null($additional_material_group4)) {
            array_push($this->openAPINullablesSetToNull, 'additional_material_group4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_material_group4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($additional_material_group4) && (mb_strlen($additional_material_group4) > 3)) {
            throw new \InvalidArgumentException('invalid length for $additional_material_group4 when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['additional_material_group4'] = $additional_material_group4;

        return $this;
    }

    /**
     * Gets additional_material_group5
     *
     * @return string|null
     */
    public function getAdditionalMaterialGroup5()
    {
        return $this->container['additional_material_group5'];
    }

    /**
     * Sets additional_material_group5
     *
     * @param string|null $additional_material_group5 additional_material_group5
     *
     * @return self
     */
    public function setAdditionalMaterialGroup5($additional_material_group5)
    {
        if (is_null($additional_material_group5)) {
            array_push($this->openAPINullablesSetToNull, 'additional_material_group5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_material_group5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($additional_material_group5) && (mb_strlen($additional_material_group5) > 3)) {
            throw new \InvalidArgumentException('invalid length for $additional_material_group5 when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['additional_material_group5'] = $additional_material_group5;

        return $this;
    }

    /**
     * Gets material_commission_group
     *
     * @return string|null
     */
    public function getMaterialCommissionGroup()
    {
        return $this->container['material_commission_group'];
    }

    /**
     * Sets material_commission_group
     *
     * @param string|null $material_commission_group material_commission_group
     *
     * @return self
     */
    public function setMaterialCommissionGroup($material_commission_group)
    {
        if (is_null($material_commission_group)) {
            array_push($this->openAPINullablesSetToNull, 'material_commission_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('material_commission_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($material_commission_group) && (mb_strlen($material_commission_group) > 2)) {
            throw new \InvalidArgumentException('invalid length for $material_commission_group when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['material_commission_group'] = $material_commission_group;

        return $this;
    }

    /**
     * Gets plant
     *
     * @return string|null
     */
    public function getPlant()
    {
        return $this->container['plant'];
    }

    /**
     * Sets plant
     *
     * @param string|null $plant plant
     *
     * @return self
     */
    public function setPlant($plant)
    {
        if (is_null($plant)) {
            array_push($this->openAPINullablesSetToNull, 'plant');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('plant', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($plant) && (mb_strlen($plant) > 4)) {
            throw new \InvalidArgumentException('invalid length for $plant when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['plant'] = $plant;

        return $this;
    }

    /**
     * Gets storage_location
     *
     * @return string|null
     */
    public function getStorageLocation()
    {
        return $this->container['storage_location'];
    }

    /**
     * Sets storage_location
     *
     * @param string|null $storage_location storage_location
     *
     * @return self
     */
    public function setStorageLocation($storage_location)
    {
        if (is_null($storage_location)) {
            array_push($this->openAPINullablesSetToNull, 'storage_location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('storage_location', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($storage_location) && (mb_strlen($storage_location) > 4)) {
            throw new \InvalidArgumentException('invalid length for $storage_location when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['storage_location'] = $storage_location;

        return $this;
    }

    /**
     * Gets replacement_part_type
     *
     * @return string|null
     */
    public function getReplacementPartType()
    {
        return $this->container['replacement_part_type'];
    }

    /**
     * Sets replacement_part_type
     *
     * @param string|null $replacement_part_type Replacement part
     *
     * @return self
     */
    public function setReplacementPartType($replacement_part_type)
    {
        if (is_null($replacement_part_type)) {
            array_push($this->openAPINullablesSetToNull, 'replacement_part_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('replacement_part_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($replacement_part_type) && (mb_strlen($replacement_part_type) > 1)) {
            throw new \InvalidArgumentException('invalid length for $replacement_part_type when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['replacement_part_type'] = $replacement_part_type;

        return $this;
    }

    /**
     * Gets material_group_hierarchy1
     *
     * @return string|null
     */
    public function getMaterialGroupHierarchy1()
    {
        return $this->container['material_group_hierarchy1'];
    }

    /**
     * Sets material_group_hierarchy1
     *
     * @param string|null $material_group_hierarchy1 Material Group Hierarchy 1
     *
     * @return self
     */
    public function setMaterialGroupHierarchy1($material_group_hierarchy1)
    {
        if (is_null($material_group_hierarchy1)) {
            array_push($this->openAPINullablesSetToNull, 'material_group_hierarchy1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('material_group_hierarchy1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($material_group_hierarchy1) && (mb_strlen($material_group_hierarchy1) > 18)) {
            throw new \InvalidArgumentException('invalid length for $material_group_hierarchy1 when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 18.');
        }

        $this->container['material_group_hierarchy1'] = $material_group_hierarchy1;

        return $this;
    }

    /**
     * Gets material_group_hierarchy2
     *
     * @return string|null
     */
    public function getMaterialGroupHierarchy2()
    {
        return $this->container['material_group_hierarchy2'];
    }

    /**
     * Sets material_group_hierarchy2
     *
     * @param string|null $material_group_hierarchy2 Material Group Hierarchy 2
     *
     * @return self
     */
    public function setMaterialGroupHierarchy2($material_group_hierarchy2)
    {
        if (is_null($material_group_hierarchy2)) {
            array_push($this->openAPINullablesSetToNull, 'material_group_hierarchy2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('material_group_hierarchy2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($material_group_hierarchy2) && (mb_strlen($material_group_hierarchy2) > 18)) {
            throw new \InvalidArgumentException('invalid length for $material_group_hierarchy2 when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 18.');
        }

        $this->container['material_group_hierarchy2'] = $material_group_hierarchy2;

        return $this;
    }

    /**
     * Gets plant_region
     *
     * @return string|null
     */
    public function getPlantRegion()
    {
        return $this->container['plant_region'];
    }

    /**
     * Sets plant_region
     *
     * @param string|null $plant_region Region in which plant is located
     *
     * @return self
     */
    public function setPlantRegion($plant_region)
    {
        if (is_null($plant_region)) {
            array_push($this->openAPINullablesSetToNull, 'plant_region');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('plant_region', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($plant_region) && (mb_strlen($plant_region) > 3)) {
            throw new \InvalidArgumentException('invalid length for $plant_region when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['plant_region'] = $plant_region;

        return $this;
    }

    /**
     * Gets plant_county
     *
     * @return string|null
     */
    public function getPlantCounty()
    {
        return $this->container['plant_county'];
    }

    /**
     * Sets plant_county
     *
     * @param string|null $plant_county County in which plant is located
     *
     * @return self
     */
    public function setPlantCounty($plant_county)
    {
        if (is_null($plant_county)) {
            array_push($this->openAPINullablesSetToNull, 'plant_county');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('plant_county', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($plant_county) && (mb_strlen($plant_county) > 3)) {
            throw new \InvalidArgumentException('invalid length for $plant_county when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['plant_county'] = $plant_county;

        return $this;
    }

    /**
     * Gets plant_city
     *
     * @return string|null
     */
    public function getPlantCity()
    {
        return $this->container['plant_city'];
    }

    /**
     * Sets plant_city
     *
     * @param string|null $plant_city City in which plant is located
     *
     * @return self
     */
    public function setPlantCity($plant_city)
    {
        if (is_null($plant_city)) {
            array_push($this->openAPINullablesSetToNull, 'plant_city');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('plant_city', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($plant_city) && (mb_strlen($plant_city) > 4)) {
            throw new \InvalidArgumentException('invalid length for $plant_city when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['plant_city'] = $plant_city;

        return $this;
    }

    /**
     * Gets bom_explosion
     *
     * @return string|null
     */
    public function getBomExplosion()
    {
        return $this->container['bom_explosion'];
    }

    /**
     * Sets bom_explosion
     *
     * @param string|null $bom_explosion bom_explosion
     *
     * @return self
     */
    public function setBomExplosion($bom_explosion)
    {
        if (is_null($bom_explosion)) {
            array_push($this->openAPINullablesSetToNull, 'bom_explosion');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bom_explosion', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bom_explosion) && (mb_strlen($bom_explosion) > 8)) {
            throw new \InvalidArgumentException('invalid length for $bom_explosion when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 8.');
        }

        $this->container['bom_explosion'] = $bom_explosion;

        return $this;
    }

    /**
     * Gets material_determination_type
     *
     * @return string|null
     */
    public function getMaterialDeterminationType()
    {
        return $this->container['material_determination_type'];
    }

    /**
     * Sets material_determination_type
     *
     * @param string|null $material_determination_type ID for material determination
     *
     * @return self
     */
    public function setMaterialDeterminationType($material_determination_type)
    {
        if (is_null($material_determination_type)) {
            array_push($this->openAPINullablesSetToNull, 'material_determination_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('material_determination_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($material_determination_type) && (mb_strlen($material_determination_type) > 1)) {
            throw new \InvalidArgumentException('invalid length for $material_determination_type when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['material_determination_type'] = $material_determination_type;

        return $this;
    }

    /**
     * Gets billing_document_item_text
     *
     * @return string|null
     */
    public function getBillingDocumentItemText()
    {
        return $this->container['billing_document_item_text'];
    }

    /**
     * Sets billing_document_item_text
     *
     * @param string|null $billing_document_item_text Short Text for Sales Order Item
     *
     * @return self
     */
    public function setBillingDocumentItemText($billing_document_item_text)
    {
        if (is_null($billing_document_item_text)) {
            array_push($this->openAPINullablesSetToNull, 'billing_document_item_text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_document_item_text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($billing_document_item_text) && (mb_strlen($billing_document_item_text) > 40)) {
            throw new \InvalidArgumentException('invalid length for $billing_document_item_text when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['billing_document_item_text'] = $billing_document_item_text;

        return $this;
    }

    /**
     * Gets services_rendered_date
     *
     * @return string|null
     */
    public function getServicesRenderedDate()
    {
        return $this->container['services_rendered_date'];
    }

    /**
     * Sets services_rendered_date
     *
     * @param string|null $services_rendered_date Date on which services are rendered
     *
     * @return self
     */
    public function setServicesRenderedDate($services_rendered_date)
    {
        if (is_null($services_rendered_date)) {
            array_push($this->openAPINullablesSetToNull, 'services_rendered_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('services_rendered_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['services_rendered_date'] = $services_rendered_date;

        return $this;
    }

    /**
     * Gets billing_quantity
     *
     * @return float|null
     */
    public function getBillingQuantity()
    {
        return $this->container['billing_quantity'];
    }

    /**
     * Sets billing_quantity
     *
     * @param float|null $billing_quantity Actual Invoiced Quantity
     *
     * @return self
     */
    public function setBillingQuantity($billing_quantity)
    {
        if (is_null($billing_quantity)) {
            array_push($this->openAPINullablesSetToNull, 'billing_quantity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_quantity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['billing_quantity'] = $billing_quantity;

        return $this;
    }

    /**
     * Gets billing_quantity_unit
     *
     * @return string|null
     */
    public function getBillingQuantityUnit()
    {
        return $this->container['billing_quantity_unit'];
    }

    /**
     * Sets billing_quantity_unit
     *
     * @param string|null $billing_quantity_unit billing_quantity_unit
     *
     * @return self
     */
    public function setBillingQuantityUnit($billing_quantity_unit)
    {
        if (is_null($billing_quantity_unit)) {
            array_push($this->openAPINullablesSetToNull, 'billing_quantity_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_quantity_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($billing_quantity_unit) && (mb_strlen($billing_quantity_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $billing_quantity_unit when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['billing_quantity_unit'] = $billing_quantity_unit;

        return $this;
    }

    /**
     * Gets billing_quantity_in_base_unit
     *
     * @return float|null
     */
    public function getBillingQuantityInBaseUnit()
    {
        return $this->container['billing_quantity_in_base_unit'];
    }

    /**
     * Sets billing_quantity_in_base_unit
     *
     * @param float|null $billing_quantity_in_base_unit Billing quantity in stock keeping unit
     *
     * @return self
     */
    public function setBillingQuantityInBaseUnit($billing_quantity_in_base_unit)
    {
        if (is_null($billing_quantity_in_base_unit)) {
            array_push($this->openAPINullablesSetToNull, 'billing_quantity_in_base_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_quantity_in_base_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['billing_quantity_in_base_unit'] = $billing_quantity_in_base_unit;

        return $this;
    }

    /**
     * Gets base_unit
     *
     * @return string|null
     */
    public function getBaseUnit()
    {
        return $this->container['base_unit'];
    }

    /**
     * Sets base_unit
     *
     * @param string|null $base_unit base_unit
     *
     * @return self
     */
    public function setBaseUnit($base_unit)
    {
        if (is_null($base_unit)) {
            array_push($this->openAPINullablesSetToNull, 'base_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('base_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($base_unit) && (mb_strlen($base_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $base_unit when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['base_unit'] = $base_unit;

        return $this;
    }

    /**
     * Gets mrp_required_quantity_in_base_unit
     *
     * @return float|null
     */
    public function getMrpRequiredQuantityInBaseUnit()
    {
        return $this->container['mrp_required_quantity_in_base_unit'];
    }

    /**
     * Sets mrp_required_quantity_in_base_unit
     *
     * @param float|null $mrp_required_quantity_in_base_unit Required quantity for mat.management in stockkeeping units
     *
     * @return self
     */
    public function setMrpRequiredQuantityInBaseUnit($mrp_required_quantity_in_base_unit)
    {
        if (is_null($mrp_required_quantity_in_base_unit)) {
            array_push($this->openAPINullablesSetToNull, 'mrp_required_quantity_in_base_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mrp_required_quantity_in_base_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['mrp_required_quantity_in_base_unit'] = $mrp_required_quantity_in_base_unit;

        return $this;
    }

    /**
     * Gets billing_to_base_quantity_dnmntr
     *
     * @return float|null
     */
    public function getBillingToBaseQuantityDnmntr()
    {
        return $this->container['billing_to_base_quantity_dnmntr'];
    }

    /**
     * Sets billing_to_base_quantity_dnmntr
     *
     * @param float|null $billing_to_base_quantity_dnmntr Denominator (divisor) for conversion of sales Qty into SKU
     *
     * @return self
     */
    public function setBillingToBaseQuantityDnmntr($billing_to_base_quantity_dnmntr)
    {
        if (is_null($billing_to_base_quantity_dnmntr)) {
            array_push($this->openAPINullablesSetToNull, 'billing_to_base_quantity_dnmntr');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_to_base_quantity_dnmntr', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['billing_to_base_quantity_dnmntr'] = $billing_to_base_quantity_dnmntr;

        return $this;
    }

    /**
     * Gets billing_to_base_quantity_nmrtr
     *
     * @return float|null
     */
    public function getBillingToBaseQuantityNmrtr()
    {
        return $this->container['billing_to_base_quantity_nmrtr'];
    }

    /**
     * Sets billing_to_base_quantity_nmrtr
     *
     * @param float|null $billing_to_base_quantity_nmrtr Numerator (factor) for conversion of sales quantity into SKU
     *
     * @return self
     */
    public function setBillingToBaseQuantityNmrtr($billing_to_base_quantity_nmrtr)
    {
        if (is_null($billing_to_base_quantity_nmrtr)) {
            array_push($this->openAPINullablesSetToNull, 'billing_to_base_quantity_nmrtr');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_to_base_quantity_nmrtr', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['billing_to_base_quantity_nmrtr'] = $billing_to_base_quantity_nmrtr;

        return $this;
    }

    /**
     * Gets item_gross_weight
     *
     * @return float|null
     */
    public function getItemGrossWeight()
    {
        return $this->container['item_gross_weight'];
    }

    /**
     * Sets item_gross_weight
     *
     * @param float|null $item_gross_weight item_gross_weight
     *
     * @return self
     */
    public function setItemGrossWeight($item_gross_weight)
    {
        if (is_null($item_gross_weight)) {
            array_push($this->openAPINullablesSetToNull, 'item_gross_weight');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_gross_weight', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['item_gross_weight'] = $item_gross_weight;

        return $this;
    }

    /**
     * Gets item_net_weight
     *
     * @return float|null
     */
    public function getItemNetWeight()
    {
        return $this->container['item_net_weight'];
    }

    /**
     * Sets item_net_weight
     *
     * @param float|null $item_net_weight item_net_weight
     *
     * @return self
     */
    public function setItemNetWeight($item_net_weight)
    {
        if (is_null($item_net_weight)) {
            array_push($this->openAPINullablesSetToNull, 'item_net_weight');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_net_weight', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['item_net_weight'] = $item_net_weight;

        return $this;
    }

    /**
     * Gets item_weight_unit
     *
     * @return string|null
     */
    public function getItemWeightUnit()
    {
        return $this->container['item_weight_unit'];
    }

    /**
     * Sets item_weight_unit
     *
     * @param string|null $item_weight_unit item_weight_unit
     *
     * @return self
     */
    public function setItemWeightUnit($item_weight_unit)
    {
        if (is_null($item_weight_unit)) {
            array_push($this->openAPINullablesSetToNull, 'item_weight_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_weight_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($item_weight_unit) && (mb_strlen($item_weight_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $item_weight_unit when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['item_weight_unit'] = $item_weight_unit;

        return $this;
    }

    /**
     * Gets item_volume
     *
     * @return float|null
     */
    public function getItemVolume()
    {
        return $this->container['item_volume'];
    }

    /**
     * Sets item_volume
     *
     * @param float|null $item_volume item_volume
     *
     * @return self
     */
    public function setItemVolume($item_volume)
    {
        if (is_null($item_volume)) {
            array_push($this->openAPINullablesSetToNull, 'item_volume');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_volume', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['item_volume'] = $item_volume;

        return $this;
    }

    /**
     * Gets item_volume_unit
     *
     * @return string|null
     */
    public function getItemVolumeUnit()
    {
        return $this->container['item_volume_unit'];
    }

    /**
     * Sets item_volume_unit
     *
     * @param string|null $item_volume_unit item_volume_unit
     *
     * @return self
     */
    public function setItemVolumeUnit($item_volume_unit)
    {
        if (is_null($item_volume_unit)) {
            array_push($this->openAPINullablesSetToNull, 'item_volume_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_volume_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($item_volume_unit) && (mb_strlen($item_volume_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $item_volume_unit when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['item_volume_unit'] = $item_volume_unit;

        return $this;
    }

    /**
     * Gets bill_to_party_country
     *
     * @return string|null
     */
    public function getBillToPartyCountry()
    {
        return $this->container['bill_to_party_country'];
    }

    /**
     * Sets bill_to_party_country
     *
     * @param string|null $bill_to_party_country Destination Country/Region of Sales Order
     *
     * @return self
     */
    public function setBillToPartyCountry($bill_to_party_country)
    {
        if (is_null($bill_to_party_country)) {
            array_push($this->openAPINullablesSetToNull, 'bill_to_party_country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bill_to_party_country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bill_to_party_country) && (mb_strlen($bill_to_party_country) > 3)) {
            throw new \InvalidArgumentException('invalid length for $bill_to_party_country when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['bill_to_party_country'] = $bill_to_party_country;

        return $this;
    }

    /**
     * Gets bill_to_party_region
     *
     * @return string|null
     */
    public function getBillToPartyRegion()
    {
        return $this->container['bill_to_party_region'];
    }

    /**
     * Sets bill_to_party_region
     *
     * @param string|null $bill_to_party_region Region of Sales Order
     *
     * @return self
     */
    public function setBillToPartyRegion($bill_to_party_region)
    {
        if (is_null($bill_to_party_region)) {
            array_push($this->openAPINullablesSetToNull, 'bill_to_party_region');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bill_to_party_region', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bill_to_party_region) && (mb_strlen($bill_to_party_region) > 3)) {
            throw new \InvalidArgumentException('invalid length for $bill_to_party_region when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['bill_to_party_region'] = $bill_to_party_region;

        return $this;
    }

    /**
     * Gets billing_plan_rule
     *
     * @return string|null
     */
    public function getBillingPlanRule()
    {
        return $this->container['billing_plan_rule'];
    }

    /**
     * Sets billing_plan_rule
     *
     * @param string|null $billing_plan_rule Rule in billing plan/invoice plan
     *
     * @return self
     */
    public function setBillingPlanRule($billing_plan_rule)
    {
        if (is_null($billing_plan_rule)) {
            array_push($this->openAPINullablesSetToNull, 'billing_plan_rule');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_plan_rule', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($billing_plan_rule) && (mb_strlen($billing_plan_rule) > 1)) {
            throw new \InvalidArgumentException('invalid length for $billing_plan_rule when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['billing_plan_rule'] = $billing_plan_rule;

        return $this;
    }

    /**
     * Gets billing_plan
     *
     * @return string|null
     */
    public function getBillingPlan()
    {
        return $this->container['billing_plan'];
    }

    /**
     * Sets billing_plan
     *
     * @param string|null $billing_plan Billing Plan Number / Invoicing Plan Number
     *
     * @return self
     */
    public function setBillingPlan($billing_plan)
    {
        if (is_null($billing_plan)) {
            array_push($this->openAPINullablesSetToNull, 'billing_plan');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_plan', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($billing_plan) && (mb_strlen($billing_plan) > 10)) {
            throw new \InvalidArgumentException('invalid length for $billing_plan when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['billing_plan'] = $billing_plan;

        return $this;
    }

    /**
     * Gets billing_plan_item
     *
     * @return string|null
     */
    public function getBillingPlanItem()
    {
        return $this->container['billing_plan_item'];
    }

    /**
     * Sets billing_plan_item
     *
     * @param string|null $billing_plan_item Item for billing plan/invoice plan/payment cards
     *
     * @return self
     */
    public function setBillingPlanItem($billing_plan_item)
    {
        if (is_null($billing_plan_item)) {
            array_push($this->openAPINullablesSetToNull, 'billing_plan_item');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_plan_item', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($billing_plan_item) && (mb_strlen($billing_plan_item) > 6)) {
            throw new \InvalidArgumentException('invalid length for $billing_plan_item when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 6.');
        }

        $this->container['billing_plan_item'] = $billing_plan_item;

        return $this;
    }

    /**
     * Gets net_amount
     *
     * @return float|null
     */
    public function getNetAmount()
    {
        return $this->container['net_amount'];
    }

    /**
     * Sets net_amount
     *
     * @param float|null $net_amount Net Value of Billing item in Document Currency
     *
     * @return self
     */
    public function setNetAmount($net_amount)
    {
        if (is_null($net_amount)) {
            array_push($this->openAPINullablesSetToNull, 'net_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('net_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['net_amount'] = $net_amount;

        return $this;
    }

    /**
     * Gets transaction_currency
     *
     * @return string|null
     */
    public function getTransactionCurrency()
    {
        return $this->container['transaction_currency'];
    }

    /**
     * Sets transaction_currency
     *
     * @param string|null $transaction_currency SD Document Currency
     *
     * @return self
     */
    public function setTransactionCurrency($transaction_currency)
    {
        if (is_null($transaction_currency)) {
            array_push($this->openAPINullablesSetToNull, 'transaction_currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transaction_currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($transaction_currency) && (mb_strlen($transaction_currency) > 5)) {
            throw new \InvalidArgumentException('invalid length for $transaction_currency when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 5.');
        }

        $this->container['transaction_currency'] = $transaction_currency;

        return $this;
    }

    /**
     * Gets gross_amount
     *
     * @return float|null
     */
    public function getGrossAmount()
    {
        return $this->container['gross_amount'];
    }

    /**
     * Sets gross_amount
     *
     * @param float|null $gross_amount Gross Value of the Billing Item in Document Currency
     *
     * @return self
     */
    public function setGrossAmount($gross_amount)
    {
        if (is_null($gross_amount)) {
            array_push($this->openAPINullablesSetToNull, 'gross_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gross_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['gross_amount'] = $gross_amount;

        return $this;
    }

    /**
     * Gets pricing_date
     *
     * @return string|null
     */
    public function getPricingDate()
    {
        return $this->container['pricing_date'];
    }

    /**
     * Sets pricing_date
     *
     * @param string|null $pricing_date Date for Pricing and Exchange Rate
     *
     * @return self
     */
    public function setPricingDate($pricing_date)
    {
        if (is_null($pricing_date)) {
            array_push($this->openAPINullablesSetToNull, 'pricing_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pricing_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pricing_date'] = $pricing_date;

        return $this;
    }

    /**
     * Gets abslt_price_detn_exchange_rate
     *
     * @return float|null
     */
    public function getAbsltPriceDetnExchangeRate()
    {
        return $this->container['abslt_price_detn_exchange_rate'];
    }

    /**
     * Sets abslt_price_detn_exchange_rate
     *
     * @param float|null $abslt_price_detn_exchange_rate Absolute exchange rate for price determination
     *
     * @return self
     */
    public function setAbsltPriceDetnExchangeRate($abslt_price_detn_exchange_rate)
    {
        if (is_null($abslt_price_detn_exchange_rate)) {
            array_push($this->openAPINullablesSetToNull, 'abslt_price_detn_exchange_rate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('abslt_price_detn_exchange_rate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['abslt_price_detn_exchange_rate'] = $abslt_price_detn_exchange_rate;

        return $this;
    }

    /**
     * Gets price_detn_exch_rate_is_indrct_qtan
     *
     * @return bool|null
     */
    public function getPriceDetnExchRateIsIndrctQtan()
    {
        return $this->container['price_detn_exch_rate_is_indrct_qtan'];
    }

    /**
     * Sets price_detn_exch_rate_is_indrct_qtan
     *
     * @param bool|null $price_detn_exch_rate_is_indrct_qtan Pricing exchange rate quotation is indirect
     *
     * @return self
     */
    public function setPriceDetnExchRateIsIndrctQtan($price_detn_exch_rate_is_indrct_qtan)
    {
        if (is_null($price_detn_exch_rate_is_indrct_qtan)) {
            array_push($this->openAPINullablesSetToNull, 'price_detn_exch_rate_is_indrct_qtan');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('price_detn_exch_rate_is_indrct_qtan', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['price_detn_exch_rate_is_indrct_qtan'] = $price_detn_exch_rate_is_indrct_qtan;

        return $this;
    }

    /**
     * Gets price_detn_exchange_rate_date
     *
     * @return string|null
     */
    public function getPriceDetnExchangeRateDate()
    {
        return $this->container['price_detn_exchange_rate_date'];
    }

    /**
     * Sets price_detn_exchange_rate_date
     *
     * @param string|null $price_detn_exchange_rate_date price_detn_exchange_rate_date
     *
     * @return self
     */
    public function setPriceDetnExchangeRateDate($price_detn_exchange_rate_date)
    {
        if (is_null($price_detn_exchange_rate_date)) {
            array_push($this->openAPINullablesSetToNull, 'price_detn_exchange_rate_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('price_detn_exchange_rate_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['price_detn_exchange_rate_date'] = $price_detn_exchange_rate_date;

        return $this;
    }

    /**
     * Gets pricing_scale_quantity_in_base_unit
     *
     * @return float|null
     */
    public function getPricingScaleQuantityInBaseUnit()
    {
        return $this->container['pricing_scale_quantity_in_base_unit'];
    }

    /**
     * Sets pricing_scale_quantity_in_base_unit
     *
     * @param float|null $pricing_scale_quantity_in_base_unit Scale Quantity in base unit of measure
     *
     * @return self
     */
    public function setPricingScaleQuantityInBaseUnit($pricing_scale_quantity_in_base_unit)
    {
        if (is_null($pricing_scale_quantity_in_base_unit)) {
            array_push($this->openAPINullablesSetToNull, 'pricing_scale_quantity_in_base_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pricing_scale_quantity_in_base_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['pricing_scale_quantity_in_base_unit'] = $pricing_scale_quantity_in_base_unit;

        return $this;
    }

    /**
     * Gets tax_amount
     *
     * @return float|null
     */
    public function getTaxAmount()
    {
        return $this->container['tax_amount'];
    }

    /**
     * Sets tax_amount
     *
     * @param float|null $tax_amount Tax Amount in Document Currency
     *
     * @return self
     */
    public function setTaxAmount($tax_amount)
    {
        if (is_null($tax_amount)) {
            array_push($this->openAPINullablesSetToNull, 'tax_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tax_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['tax_amount'] = $tax_amount;

        return $this;
    }

    /**
     * Gets cost_amount
     *
     * @return float|null
     */
    public function getCostAmount()
    {
        return $this->container['cost_amount'];
    }

    /**
     * Sets cost_amount
     *
     * @param float|null $cost_amount Cost in Document Currency
     *
     * @return self
     */
    public function setCostAmount($cost_amount)
    {
        if (is_null($cost_amount)) {
            array_push($this->openAPINullablesSetToNull, 'cost_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cost_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['cost_amount'] = $cost_amount;

        return $this;
    }

    /**
     * Gets subtotal1_amount
     *
     * @return float|null
     */
    public function getSubtotal1Amount()
    {
        return $this->container['subtotal1_amount'];
    }

    /**
     * Sets subtotal1_amount
     *
     * @param float|null $subtotal1_amount Subtotal 1 from Pricing Procedure for Price Element
     *
     * @return self
     */
    public function setSubtotal1Amount($subtotal1_amount)
    {
        if (is_null($subtotal1_amount)) {
            array_push($this->openAPINullablesSetToNull, 'subtotal1_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subtotal1_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['subtotal1_amount'] = $subtotal1_amount;

        return $this;
    }

    /**
     * Gets subtotal2_amount
     *
     * @return float|null
     */
    public function getSubtotal2Amount()
    {
        return $this->container['subtotal2_amount'];
    }

    /**
     * Sets subtotal2_amount
     *
     * @param float|null $subtotal2_amount Subtotal 2 from Pricing Procedure for Price Element
     *
     * @return self
     */
    public function setSubtotal2Amount($subtotal2_amount)
    {
        if (is_null($subtotal2_amount)) {
            array_push($this->openAPINullablesSetToNull, 'subtotal2_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subtotal2_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['subtotal2_amount'] = $subtotal2_amount;

        return $this;
    }

    /**
     * Gets subtotal3_amount
     *
     * @return float|null
     */
    public function getSubtotal3Amount()
    {
        return $this->container['subtotal3_amount'];
    }

    /**
     * Sets subtotal3_amount
     *
     * @param float|null $subtotal3_amount Subtotal 3 from Pricing Procedure for Price Element
     *
     * @return self
     */
    public function setSubtotal3Amount($subtotal3_amount)
    {
        if (is_null($subtotal3_amount)) {
            array_push($this->openAPINullablesSetToNull, 'subtotal3_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subtotal3_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['subtotal3_amount'] = $subtotal3_amount;

        return $this;
    }

    /**
     * Gets subtotal4_amount
     *
     * @return float|null
     */
    public function getSubtotal4Amount()
    {
        return $this->container['subtotal4_amount'];
    }

    /**
     * Sets subtotal4_amount
     *
     * @param float|null $subtotal4_amount Subtotal 4 from Pricing Procedure for Price Element
     *
     * @return self
     */
    public function setSubtotal4Amount($subtotal4_amount)
    {
        if (is_null($subtotal4_amount)) {
            array_push($this->openAPINullablesSetToNull, 'subtotal4_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subtotal4_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['subtotal4_amount'] = $subtotal4_amount;

        return $this;
    }

    /**
     * Gets subtotal5_amount
     *
     * @return float|null
     */
    public function getSubtotal5Amount()
    {
        return $this->container['subtotal5_amount'];
    }

    /**
     * Sets subtotal5_amount
     *
     * @param float|null $subtotal5_amount Subtotal 5 from Pricing Procedure for Price Element
     *
     * @return self
     */
    public function setSubtotal5Amount($subtotal5_amount)
    {
        if (is_null($subtotal5_amount)) {
            array_push($this->openAPINullablesSetToNull, 'subtotal5_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subtotal5_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['subtotal5_amount'] = $subtotal5_amount;

        return $this;
    }

    /**
     * Gets subtotal6_amount
     *
     * @return float|null
     */
    public function getSubtotal6Amount()
    {
        return $this->container['subtotal6_amount'];
    }

    /**
     * Sets subtotal6_amount
     *
     * @param float|null $subtotal6_amount Subtotal 6 from Pricing Procedure for Price Element
     *
     * @return self
     */
    public function setSubtotal6Amount($subtotal6_amount)
    {
        if (is_null($subtotal6_amount)) {
            array_push($this->openAPINullablesSetToNull, 'subtotal6_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subtotal6_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['subtotal6_amount'] = $subtotal6_amount;

        return $this;
    }

    /**
     * Gets statistical_value_control
     *
     * @return string|null
     */
    public function getStatisticalValueControl()
    {
        return $this->container['statistical_value_control'];
    }

    /**
     * Sets statistical_value_control
     *
     * @param string|null $statistical_value_control Statistical Values
     *
     * @return self
     */
    public function setStatisticalValueControl($statistical_value_control)
    {
        if (is_null($statistical_value_control)) {
            array_push($this->openAPINullablesSetToNull, 'statistical_value_control');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('statistical_value_control', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($statistical_value_control) && (mb_strlen($statistical_value_control) > 1)) {
            throw new \InvalidArgumentException('invalid length for $statistical_value_control when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['statistical_value_control'] = $statistical_value_control;

        return $this;
    }

    /**
     * Gets cash_discount_is_deductible
     *
     * @return bool|null
     */
    public function getCashDiscountIsDeductible()
    {
        return $this->container['cash_discount_is_deductible'];
    }

    /**
     * Sets cash_discount_is_deductible
     *
     * @param bool|null $cash_discount_is_deductible Cash Discount Indicator
     *
     * @return self
     */
    public function setCashDiscountIsDeductible($cash_discount_is_deductible)
    {
        if (is_null($cash_discount_is_deductible)) {
            array_push($this->openAPINullablesSetToNull, 'cash_discount_is_deductible');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cash_discount_is_deductible', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cash_discount_is_deductible'] = $cash_discount_is_deductible;

        return $this;
    }

    /**
     * Gets customer_condition_group1
     *
     * @return string|null
     */
    public function getCustomerConditionGroup1()
    {
        return $this->container['customer_condition_group1'];
    }

    /**
     * Sets customer_condition_group1
     *
     * @param string|null $customer_condition_group1 Customer Condition Group 1
     *
     * @return self
     */
    public function setCustomerConditionGroup1($customer_condition_group1)
    {
        if (is_null($customer_condition_group1)) {
            array_push($this->openAPINullablesSetToNull, 'customer_condition_group1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_condition_group1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_condition_group1) && (mb_strlen($customer_condition_group1) > 2)) {
            throw new \InvalidArgumentException('invalid length for $customer_condition_group1 when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['customer_condition_group1'] = $customer_condition_group1;

        return $this;
    }

    /**
     * Gets customer_condition_group2
     *
     * @return string|null
     */
    public function getCustomerConditionGroup2()
    {
        return $this->container['customer_condition_group2'];
    }

    /**
     * Sets customer_condition_group2
     *
     * @param string|null $customer_condition_group2 Customer Condition Group 2
     *
     * @return self
     */
    public function setCustomerConditionGroup2($customer_condition_group2)
    {
        if (is_null($customer_condition_group2)) {
            array_push($this->openAPINullablesSetToNull, 'customer_condition_group2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_condition_group2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_condition_group2) && (mb_strlen($customer_condition_group2) > 2)) {
            throw new \InvalidArgumentException('invalid length for $customer_condition_group2 when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['customer_condition_group2'] = $customer_condition_group2;

        return $this;
    }

    /**
     * Gets customer_condition_group3
     *
     * @return string|null
     */
    public function getCustomerConditionGroup3()
    {
        return $this->container['customer_condition_group3'];
    }

    /**
     * Sets customer_condition_group3
     *
     * @param string|null $customer_condition_group3 Customer Condition Group 3
     *
     * @return self
     */
    public function setCustomerConditionGroup3($customer_condition_group3)
    {
        if (is_null($customer_condition_group3)) {
            array_push($this->openAPINullablesSetToNull, 'customer_condition_group3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_condition_group3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_condition_group3) && (mb_strlen($customer_condition_group3) > 2)) {
            throw new \InvalidArgumentException('invalid length for $customer_condition_group3 when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['customer_condition_group3'] = $customer_condition_group3;

        return $this;
    }

    /**
     * Gets customer_condition_group4
     *
     * @return string|null
     */
    public function getCustomerConditionGroup4()
    {
        return $this->container['customer_condition_group4'];
    }

    /**
     * Sets customer_condition_group4
     *
     * @param string|null $customer_condition_group4 Customer Condition Group 4
     *
     * @return self
     */
    public function setCustomerConditionGroup4($customer_condition_group4)
    {
        if (is_null($customer_condition_group4)) {
            array_push($this->openAPINullablesSetToNull, 'customer_condition_group4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_condition_group4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_condition_group4) && (mb_strlen($customer_condition_group4) > 2)) {
            throw new \InvalidArgumentException('invalid length for $customer_condition_group4 when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['customer_condition_group4'] = $customer_condition_group4;

        return $this;
    }

    /**
     * Gets customer_condition_group5
     *
     * @return string|null
     */
    public function getCustomerConditionGroup5()
    {
        return $this->container['customer_condition_group5'];
    }

    /**
     * Sets customer_condition_group5
     *
     * @param string|null $customer_condition_group5 Customer Condition Group 5
     *
     * @return self
     */
    public function setCustomerConditionGroup5($customer_condition_group5)
    {
        if (is_null($customer_condition_group5)) {
            array_push($this->openAPINullablesSetToNull, 'customer_condition_group5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_condition_group5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_condition_group5) && (mb_strlen($customer_condition_group5) > 2)) {
            throw new \InvalidArgumentException('invalid length for $customer_condition_group5 when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['customer_condition_group5'] = $customer_condition_group5;

        return $this;
    }

    /**
     * Gets manual_price_change_type
     *
     * @return string|null
     */
    public function getManualPriceChangeType()
    {
        return $this->container['manual_price_change_type'];
    }

    /**
     * Sets manual_price_change_type
     *
     * @param string|null $manual_price_change_type Status manual price change
     *
     * @return self
     */
    public function setManualPriceChangeType($manual_price_change_type)
    {
        if (is_null($manual_price_change_type)) {
            array_push($this->openAPINullablesSetToNull, 'manual_price_change_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('manual_price_change_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($manual_price_change_type) && (mb_strlen($manual_price_change_type) > 1)) {
            throw new \InvalidArgumentException('invalid length for $manual_price_change_type when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['manual_price_change_type'] = $manual_price_change_type;

        return $this;
    }

    /**
     * Gets material_pricing_group
     *
     * @return string|null
     */
    public function getMaterialPricingGroup()
    {
        return $this->container['material_pricing_group'];
    }

    /**
     * Sets material_pricing_group
     *
     * @param string|null $material_pricing_group Material Price Group
     *
     * @return self
     */
    public function setMaterialPricingGroup($material_pricing_group)
    {
        if (is_null($material_pricing_group)) {
            array_push($this->openAPINullablesSetToNull, 'material_pricing_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('material_pricing_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($material_pricing_group) && (mb_strlen($material_pricing_group) > 2)) {
            throw new \InvalidArgumentException('invalid length for $material_pricing_group when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['material_pricing_group'] = $material_pricing_group;

        return $this;
    }

    /**
     * Gets abslt_statistics_exchange_rate
     *
     * @return float|null
     */
    public function getAbsltStatisticsExchangeRate()
    {
        return $this->container['abslt_statistics_exchange_rate'];
    }

    /**
     * Sets abslt_statistics_exchange_rate
     *
     * @param float|null $abslt_statistics_exchange_rate Absolute exchange rate for statistics
     *
     * @return self
     */
    public function setAbsltStatisticsExchangeRate($abslt_statistics_exchange_rate)
    {
        if (is_null($abslt_statistics_exchange_rate)) {
            array_push($this->openAPINullablesSetToNull, 'abslt_statistics_exchange_rate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('abslt_statistics_exchange_rate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['abslt_statistics_exchange_rate'] = $abslt_statistics_exchange_rate;

        return $this;
    }

    /**
     * Gets statistics_exch_rate_is_indrct_qtan
     *
     * @return bool|null
     */
    public function getStatisticsExchRateIsIndrctQtan()
    {
        return $this->container['statistics_exch_rate_is_indrct_qtan'];
    }

    /**
     * Sets statistics_exch_rate_is_indrct_qtan
     *
     * @param bool|null $statistics_exch_rate_is_indrct_qtan Statistics exchange rate quotation is indirect
     *
     * @return self
     */
    public function setStatisticsExchRateIsIndrctQtan($statistics_exch_rate_is_indrct_qtan)
    {
        if (is_null($statistics_exch_rate_is_indrct_qtan)) {
            array_push($this->openAPINullablesSetToNull, 'statistics_exch_rate_is_indrct_qtan');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('statistics_exch_rate_is_indrct_qtan', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['statistics_exch_rate_is_indrct_qtan'] = $statistics_exch_rate_is_indrct_qtan;

        return $this;
    }

    /**
     * Gets main_item_pricing_ref_material
     *
     * @return string|null
     */
    public function getMainItemPricingRefMaterial()
    {
        return $this->container['main_item_pricing_ref_material'];
    }

    /**
     * Sets main_item_pricing_ref_material
     *
     * @param string|null $main_item_pricing_ref_material Pricing reference material of main item
     *
     * @return self
     */
    public function setMainItemPricingRefMaterial($main_item_pricing_ref_material)
    {
        if (is_null($main_item_pricing_ref_material)) {
            array_push($this->openAPINullablesSetToNull, 'main_item_pricing_ref_material');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('main_item_pricing_ref_material', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($main_item_pricing_ref_material) && (mb_strlen($main_item_pricing_ref_material) > 40)) {
            throw new \InvalidArgumentException('invalid length for $main_item_pricing_ref_material when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['main_item_pricing_ref_material'] = $main_item_pricing_ref_material;

        return $this;
    }

    /**
     * Gets main_item_material_pricing_group
     *
     * @return string|null
     */
    public function getMainItemMaterialPricingGroup()
    {
        return $this->container['main_item_material_pricing_group'];
    }

    /**
     * Sets main_item_material_pricing_group
     *
     * @param string|null $main_item_material_pricing_group Material pricing group of main item
     *
     * @return self
     */
    public function setMainItemMaterialPricingGroup($main_item_material_pricing_group)
    {
        if (is_null($main_item_material_pricing_group)) {
            array_push($this->openAPINullablesSetToNull, 'main_item_material_pricing_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('main_item_material_pricing_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($main_item_material_pricing_group) && (mb_strlen($main_item_material_pricing_group) > 2)) {
            throw new \InvalidArgumentException('invalid length for $main_item_material_pricing_group when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['main_item_material_pricing_group'] = $main_item_material_pricing_group;

        return $this;
    }

    /**
     * Gets departure_country
     *
     * @return string|null
     */
    public function getDepartureCountry()
    {
        return $this->container['departure_country'];
    }

    /**
     * Sets departure_country
     *
     * @param string|null $departure_country Departure Country/Region (from which the goods are sent)
     *
     * @return self
     */
    public function setDepartureCountry($departure_country)
    {
        if (is_null($departure_country)) {
            array_push($this->openAPINullablesSetToNull, 'departure_country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('departure_country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($departure_country) && (mb_strlen($departure_country) > 3)) {
            throw new \InvalidArgumentException('invalid length for $departure_country when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['departure_country'] = $departure_country;

        return $this;
    }

    /**
     * Gets tax_jurisdiction
     *
     * @return string|null
     */
    public function getTaxJurisdiction()
    {
        return $this->container['tax_jurisdiction'];
    }

    /**
     * Sets tax_jurisdiction
     *
     * @param string|null $tax_jurisdiction tax_jurisdiction
     *
     * @return self
     */
    public function setTaxJurisdiction($tax_jurisdiction)
    {
        if (is_null($tax_jurisdiction)) {
            array_push($this->openAPINullablesSetToNull, 'tax_jurisdiction');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tax_jurisdiction', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tax_jurisdiction) && (mb_strlen($tax_jurisdiction) > 15)) {
            throw new \InvalidArgumentException('invalid length for $tax_jurisdiction when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 15.');
        }

        $this->container['tax_jurisdiction'] = $tax_jurisdiction;

        return $this;
    }

    /**
     * Gets product_tax_classification1
     *
     * @return string|null
     */
    public function getProductTaxClassification1()
    {
        return $this->container['product_tax_classification1'];
    }

    /**
     * Sets product_tax_classification1
     *
     * @param string|null $product_tax_classification1 Tax Classification of Material
     *
     * @return self
     */
    public function setProductTaxClassification1($product_tax_classification1)
    {
        if (is_null($product_tax_classification1)) {
            array_push($this->openAPINullablesSetToNull, 'product_tax_classification1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_tax_classification1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($product_tax_classification1) && (mb_strlen($product_tax_classification1) > 1)) {
            throw new \InvalidArgumentException('invalid length for $product_tax_classification1 when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['product_tax_classification1'] = $product_tax_classification1;

        return $this;
    }

    /**
     * Gets product_tax_classification2
     *
     * @return string|null
     */
    public function getProductTaxClassification2()
    {
        return $this->container['product_tax_classification2'];
    }

    /**
     * Sets product_tax_classification2
     *
     * @param string|null $product_tax_classification2 Tax Classification 2 for Material
     *
     * @return self
     */
    public function setProductTaxClassification2($product_tax_classification2)
    {
        if (is_null($product_tax_classification2)) {
            array_push($this->openAPINullablesSetToNull, 'product_tax_classification2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_tax_classification2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($product_tax_classification2) && (mb_strlen($product_tax_classification2) > 1)) {
            throw new \InvalidArgumentException('invalid length for $product_tax_classification2 when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['product_tax_classification2'] = $product_tax_classification2;

        return $this;
    }

    /**
     * Gets product_tax_classification3
     *
     * @return string|null
     */
    public function getProductTaxClassification3()
    {
        return $this->container['product_tax_classification3'];
    }

    /**
     * Sets product_tax_classification3
     *
     * @param string|null $product_tax_classification3 Tax Classification 3 for Material
     *
     * @return self
     */
    public function setProductTaxClassification3($product_tax_classification3)
    {
        if (is_null($product_tax_classification3)) {
            array_push($this->openAPINullablesSetToNull, 'product_tax_classification3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_tax_classification3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($product_tax_classification3) && (mb_strlen($product_tax_classification3) > 1)) {
            throw new \InvalidArgumentException('invalid length for $product_tax_classification3 when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['product_tax_classification3'] = $product_tax_classification3;

        return $this;
    }

    /**
     * Gets product_tax_classification4
     *
     * @return string|null
     */
    public function getProductTaxClassification4()
    {
        return $this->container['product_tax_classification4'];
    }

    /**
     * Sets product_tax_classification4
     *
     * @param string|null $product_tax_classification4 Tax Classification 4 for Material
     *
     * @return self
     */
    public function setProductTaxClassification4($product_tax_classification4)
    {
        if (is_null($product_tax_classification4)) {
            array_push($this->openAPINullablesSetToNull, 'product_tax_classification4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_tax_classification4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($product_tax_classification4) && (mb_strlen($product_tax_classification4) > 1)) {
            throw new \InvalidArgumentException('invalid length for $product_tax_classification4 when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['product_tax_classification4'] = $product_tax_classification4;

        return $this;
    }

    /**
     * Gets product_tax_classification5
     *
     * @return string|null
     */
    public function getProductTaxClassification5()
    {
        return $this->container['product_tax_classification5'];
    }

    /**
     * Sets product_tax_classification5
     *
     * @param string|null $product_tax_classification5 Tax Classification 5 for Material
     *
     * @return self
     */
    public function setProductTaxClassification5($product_tax_classification5)
    {
        if (is_null($product_tax_classification5)) {
            array_push($this->openAPINullablesSetToNull, 'product_tax_classification5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_tax_classification5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($product_tax_classification5) && (mb_strlen($product_tax_classification5) > 1)) {
            throw new \InvalidArgumentException('invalid length for $product_tax_classification5 when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['product_tax_classification5'] = $product_tax_classification5;

        return $this;
    }

    /**
     * Gets product_tax_classification6
     *
     * @return string|null
     */
    public function getProductTaxClassification6()
    {
        return $this->container['product_tax_classification6'];
    }

    /**
     * Sets product_tax_classification6
     *
     * @param string|null $product_tax_classification6 Tax Classification 6 for Material
     *
     * @return self
     */
    public function setProductTaxClassification6($product_tax_classification6)
    {
        if (is_null($product_tax_classification6)) {
            array_push($this->openAPINullablesSetToNull, 'product_tax_classification6');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_tax_classification6', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($product_tax_classification6) && (mb_strlen($product_tax_classification6) > 1)) {
            throw new \InvalidArgumentException('invalid length for $product_tax_classification6 when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['product_tax_classification6'] = $product_tax_classification6;

        return $this;
    }

    /**
     * Gets product_tax_classification7
     *
     * @return string|null
     */
    public function getProductTaxClassification7()
    {
        return $this->container['product_tax_classification7'];
    }

    /**
     * Sets product_tax_classification7
     *
     * @param string|null $product_tax_classification7 Tax Classification 7 for Material
     *
     * @return self
     */
    public function setProductTaxClassification7($product_tax_classification7)
    {
        if (is_null($product_tax_classification7)) {
            array_push($this->openAPINullablesSetToNull, 'product_tax_classification7');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_tax_classification7', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($product_tax_classification7) && (mb_strlen($product_tax_classification7) > 1)) {
            throw new \InvalidArgumentException('invalid length for $product_tax_classification7 when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['product_tax_classification7'] = $product_tax_classification7;

        return $this;
    }

    /**
     * Gets product_tax_classification8
     *
     * @return string|null
     */
    public function getProductTaxClassification8()
    {
        return $this->container['product_tax_classification8'];
    }

    /**
     * Sets product_tax_classification8
     *
     * @param string|null $product_tax_classification8 Tax Classification 8 for Material
     *
     * @return self
     */
    public function setProductTaxClassification8($product_tax_classification8)
    {
        if (is_null($product_tax_classification8)) {
            array_push($this->openAPINullablesSetToNull, 'product_tax_classification8');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_tax_classification8', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($product_tax_classification8) && (mb_strlen($product_tax_classification8) > 1)) {
            throw new \InvalidArgumentException('invalid length for $product_tax_classification8 when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['product_tax_classification8'] = $product_tax_classification8;

        return $this;
    }

    /**
     * Gets product_tax_classification9
     *
     * @return string|null
     */
    public function getProductTaxClassification9()
    {
        return $this->container['product_tax_classification9'];
    }

    /**
     * Sets product_tax_classification9
     *
     * @param string|null $product_tax_classification9 Tax Classification 9 for Material
     *
     * @return self
     */
    public function setProductTaxClassification9($product_tax_classification9)
    {
        if (is_null($product_tax_classification9)) {
            array_push($this->openAPINullablesSetToNull, 'product_tax_classification9');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_tax_classification9', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($product_tax_classification9) && (mb_strlen($product_tax_classification9) > 1)) {
            throw new \InvalidArgumentException('invalid length for $product_tax_classification9 when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['product_tax_classification9'] = $product_tax_classification9;

        return $this;
    }

    /**
     * Gets zero_vat_rsn
     *
     * @return string|null
     */
    public function getZeroVatRsn()
    {
        return $this->container['zero_vat_rsn'];
    }

    /**
     * Sets zero_vat_rsn
     *
     * @param string|null $zero_vat_rsn Reason for Zero VAT
     *
     * @return self
     */
    public function setZeroVatRsn($zero_vat_rsn)
    {
        if (is_null($zero_vat_rsn)) {
            array_push($this->openAPINullablesSetToNull, 'zero_vat_rsn');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('zero_vat_rsn', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($zero_vat_rsn) && (mb_strlen($zero_vat_rsn) > 1)) {
            throw new \InvalidArgumentException('invalid length for $zero_vat_rsn when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['zero_vat_rsn'] = $zero_vat_rsn;

        return $this;
    }

    /**
     * Gets eligible_amount_for_cash_discount
     *
     * @return float|null
     */
    public function getEligibleAmountForCashDiscount()
    {
        return $this->container['eligible_amount_for_cash_discount'];
    }

    /**
     * Sets eligible_amount_for_cash_discount
     *
     * @param float|null $eligible_amount_for_cash_discount Amount eligible for cash discount in document currency
     *
     * @return self
     */
    public function setEligibleAmountForCashDiscount($eligible_amount_for_cash_discount)
    {
        if (is_null($eligible_amount_for_cash_discount)) {
            array_push($this->openAPINullablesSetToNull, 'eligible_amount_for_cash_discount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('eligible_amount_for_cash_discount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['eligible_amount_for_cash_discount'] = $eligible_amount_for_cash_discount;

        return $this;
    }

    /**
     * Gets business_area
     *
     * @return string|null
     */
    public function getBusinessArea()
    {
        return $this->container['business_area'];
    }

    /**
     * Sets business_area
     *
     * @param string|null $business_area business_area
     *
     * @return self
     */
    public function setBusinessArea($business_area)
    {
        if (is_null($business_area)) {
            array_push($this->openAPINullablesSetToNull, 'business_area');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_area', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($business_area) && (mb_strlen($business_area) > 4)) {
            throw new \InvalidArgumentException('invalid length for $business_area when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['business_area'] = $business_area;

        return $this;
    }

    /**
     * Gets profit_center
     *
     * @return string|null
     */
    public function getProfitCenter()
    {
        return $this->container['profit_center'];
    }

    /**
     * Sets profit_center
     *
     * @param string|null $profit_center profit_center
     *
     * @return self
     */
    public function setProfitCenter($profit_center)
    {
        if (is_null($profit_center)) {
            array_push($this->openAPINullablesSetToNull, 'profit_center');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('profit_center', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($profit_center) && (mb_strlen($profit_center) > 10)) {
            throw new \InvalidArgumentException('invalid length for $profit_center when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['profit_center'] = $profit_center;

        return $this;
    }

    /**
     * Gets wbs_element
     *
     * @return string|null
     */
    public function getWbsElement()
    {
        return $this->container['wbs_element'];
    }

    /**
     * Sets wbs_element
     *
     * @param string|null $wbs_element Work Breakdown Structure Element (WBS Element)
     *
     * @return self
     */
    public function setWbsElement($wbs_element)
    {
        if (is_null($wbs_element)) {
            array_push($this->openAPINullablesSetToNull, 'wbs_element');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('wbs_element', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($wbs_element) && (mb_strlen($wbs_element) > 24)) {
            throw new \InvalidArgumentException('invalid length for $wbs_element when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 24.');
        }

        $this->container['wbs_element'] = $wbs_element;

        return $this;
    }

    /**
     * Gets controlling_area
     *
     * @return string|null
     */
    public function getControllingArea()
    {
        return $this->container['controlling_area'];
    }

    /**
     * Sets controlling_area
     *
     * @param string|null $controlling_area controlling_area
     *
     * @return self
     */
    public function setControllingArea($controlling_area)
    {
        if (is_null($controlling_area)) {
            array_push($this->openAPINullablesSetToNull, 'controlling_area');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('controlling_area', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($controlling_area) && (mb_strlen($controlling_area) > 4)) {
            throw new \InvalidArgumentException('invalid length for $controlling_area when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['controlling_area'] = $controlling_area;

        return $this;
    }

    /**
     * Gets profitability_segment
     *
     * @return string|null
     */
    public function getProfitabilitySegment()
    {
        return $this->container['profitability_segment'];
    }

    /**
     * Sets profitability_segment
     *
     * @param string|null $profitability_segment profitability_segment
     *
     * @return self
     */
    public function setProfitabilitySegment($profitability_segment)
    {
        if (is_null($profitability_segment)) {
            array_push($this->openAPINullablesSetToNull, 'profitability_segment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('profitability_segment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($profitability_segment) && (mb_strlen($profitability_segment) > 10)) {
            throw new \InvalidArgumentException('invalid length for $profitability_segment when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['profitability_segment'] = $profitability_segment;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string|null
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string|null $order_id Order Number
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        if (is_null($order_id)) {
            array_push($this->openAPINullablesSetToNull, 'order_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($order_id) && (mb_strlen($order_id) > 12)) {
            throw new \InvalidArgumentException('invalid length for $order_id when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 12.');
        }

        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets cost_center
     *
     * @return string|null
     */
    public function getCostCenter()
    {
        return $this->container['cost_center'];
    }

    /**
     * Sets cost_center
     *
     * @param string|null $cost_center cost_center
     *
     * @return self
     */
    public function setCostCenter($cost_center)
    {
        if (is_null($cost_center)) {
            array_push($this->openAPINullablesSetToNull, 'cost_center');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cost_center', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($cost_center) && (mb_strlen($cost_center) > 10)) {
            throw new \InvalidArgumentException('invalid length for $cost_center when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['cost_center'] = $cost_center;

        return $this;
    }

    /**
     * Gets origin_sd_document
     *
     * @return string|null
     */
    public function getOriginSdDocument()
    {
        return $this->container['origin_sd_document'];
    }

    /**
     * Sets origin_sd_document
     *
     * @param string|null $origin_sd_document origin_sd_document
     *
     * @return self
     */
    public function setOriginSdDocument($origin_sd_document)
    {
        if (is_null($origin_sd_document)) {
            array_push($this->openAPINullablesSetToNull, 'origin_sd_document');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('origin_sd_document', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($origin_sd_document) && (mb_strlen($origin_sd_document) > 10)) {
            throw new \InvalidArgumentException('invalid length for $origin_sd_document when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['origin_sd_document'] = $origin_sd_document;

        return $this;
    }

    /**
     * Gets origin_sd_document_item
     *
     * @return string|null
     */
    public function getOriginSdDocumentItem()
    {
        return $this->container['origin_sd_document_item'];
    }

    /**
     * Sets origin_sd_document_item
     *
     * @param string|null $origin_sd_document_item origin_sd_document_item
     *
     * @return self
     */
    public function setOriginSdDocumentItem($origin_sd_document_item)
    {
        if (is_null($origin_sd_document_item)) {
            array_push($this->openAPINullablesSetToNull, 'origin_sd_document_item');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('origin_sd_document_item', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($origin_sd_document_item) && (mb_strlen($origin_sd_document_item) > 6)) {
            throw new \InvalidArgumentException('invalid length for $origin_sd_document_item when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 6.');
        }

        $this->container['origin_sd_document_item'] = $origin_sd_document_item;

        return $this;
    }

    /**
     * Gets matl_account_assignment_group
     *
     * @return string|null
     */
    public function getMatlAccountAssignmentGroup()
    {
        return $this->container['matl_account_assignment_group'];
    }

    /**
     * Sets matl_account_assignment_group
     *
     * @param string|null $matl_account_assignment_group Account Assignment Group for Material
     *
     * @return self
     */
    public function setMatlAccountAssignmentGroup($matl_account_assignment_group)
    {
        if (is_null($matl_account_assignment_group)) {
            array_push($this->openAPINullablesSetToNull, 'matl_account_assignment_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('matl_account_assignment_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($matl_account_assignment_group) && (mb_strlen($matl_account_assignment_group) > 2)) {
            throw new \InvalidArgumentException('invalid length for $matl_account_assignment_group when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['matl_account_assignment_group'] = $matl_account_assignment_group;

        return $this;
    }

    /**
     * Gets reference_sd_document
     *
     * @return string|null
     */
    public function getReferenceSdDocument()
    {
        return $this->container['reference_sd_document'];
    }

    /**
     * Sets reference_sd_document
     *
     * @param string|null $reference_sd_document Document Number of Reference Document
     *
     * @return self
     */
    public function setReferenceSdDocument($reference_sd_document)
    {
        if (is_null($reference_sd_document)) {
            array_push($this->openAPINullablesSetToNull, 'reference_sd_document');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reference_sd_document', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($reference_sd_document) && (mb_strlen($reference_sd_document) > 10)) {
            throw new \InvalidArgumentException('invalid length for $reference_sd_document when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['reference_sd_document'] = $reference_sd_document;

        return $this;
    }

    /**
     * Gets reference_sd_document_item
     *
     * @return string|null
     */
    public function getReferenceSdDocumentItem()
    {
        return $this->container['reference_sd_document_item'];
    }

    /**
     * Sets reference_sd_document_item
     *
     * @param string|null $reference_sd_document_item Item Number of the Reference Item
     *
     * @return self
     */
    public function setReferenceSdDocumentItem($reference_sd_document_item)
    {
        if (is_null($reference_sd_document_item)) {
            array_push($this->openAPINullablesSetToNull, 'reference_sd_document_item');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reference_sd_document_item', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($reference_sd_document_item) && (mb_strlen($reference_sd_document_item) > 6)) {
            throw new \InvalidArgumentException('invalid length for $reference_sd_document_item when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 6.');
        }

        $this->container['reference_sd_document_item'] = $reference_sd_document_item;

        return $this;
    }

    /**
     * Gets reference_sd_document_category
     *
     * @return string|null
     */
    public function getReferenceSdDocumentCategory()
    {
        return $this->container['reference_sd_document_category'];
    }

    /**
     * Sets reference_sd_document_category
     *
     * @param string|null $reference_sd_document_category Reference Document Category
     *
     * @return self
     */
    public function setReferenceSdDocumentCategory($reference_sd_document_category)
    {
        if (is_null($reference_sd_document_category)) {
            array_push($this->openAPINullablesSetToNull, 'reference_sd_document_category');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reference_sd_document_category', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($reference_sd_document_category) && (mb_strlen($reference_sd_document_category) > 4)) {
            throw new \InvalidArgumentException('invalid length for $reference_sd_document_category when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['reference_sd_document_category'] = $reference_sd_document_category;

        return $this;
    }

    /**
     * Gets sales_document
     *
     * @return string|null
     */
    public function getSalesDocument()
    {
        return $this->container['sales_document'];
    }

    /**
     * Sets sales_document
     *
     * @param string|null $sales_document sales_document
     *
     * @return self
     */
    public function setSalesDocument($sales_document)
    {
        if (is_null($sales_document)) {
            array_push($this->openAPINullablesSetToNull, 'sales_document');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_document', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_document) && (mb_strlen($sales_document) > 10)) {
            throw new \InvalidArgumentException('invalid length for $sales_document when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['sales_document'] = $sales_document;

        return $this;
    }

    /**
     * Gets sales_document_item
     *
     * @return string|null
     */
    public function getSalesDocumentItem()
    {
        return $this->container['sales_document_item'];
    }

    /**
     * Sets sales_document_item
     *
     * @param string|null $sales_document_item sales_document_item
     *
     * @return self
     */
    public function setSalesDocumentItem($sales_document_item)
    {
        if (is_null($sales_document_item)) {
            array_push($this->openAPINullablesSetToNull, 'sales_document_item');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_document_item', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_document_item) && (mb_strlen($sales_document_item) > 6)) {
            throw new \InvalidArgumentException('invalid length for $sales_document_item when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 6.');
        }

        $this->container['sales_document_item'] = $sales_document_item;

        return $this;
    }

    /**
     * Gets sales_sd_document_category
     *
     * @return string|null
     */
    public function getSalesSdDocumentCategory()
    {
        return $this->container['sales_sd_document_category'];
    }

    /**
     * Sets sales_sd_document_category
     *
     * @param string|null $sales_sd_document_category Sales Document Category
     *
     * @return self
     */
    public function setSalesSdDocumentCategory($sales_sd_document_category)
    {
        if (is_null($sales_sd_document_category)) {
            array_push($this->openAPINullablesSetToNull, 'sales_sd_document_category');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_sd_document_category', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_sd_document_category) && (mb_strlen($sales_sd_document_category) > 4)) {
            throw new \InvalidArgumentException('invalid length for $sales_sd_document_category when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['sales_sd_document_category'] = $sales_sd_document_category;

        return $this;
    }

    /**
     * Gets higher_level_item
     *
     * @return string|null
     */
    public function getHigherLevelItem()
    {
        return $this->container['higher_level_item'];
    }

    /**
     * Sets higher_level_item
     *
     * @param string|null $higher_level_item Higher-Level Item in Bill of Material Structures
     *
     * @return self
     */
    public function setHigherLevelItem($higher_level_item)
    {
        if (is_null($higher_level_item)) {
            array_push($this->openAPINullablesSetToNull, 'higher_level_item');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('higher_level_item', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($higher_level_item) && (mb_strlen($higher_level_item) > 6)) {
            throw new \InvalidArgumentException('invalid length for $higher_level_item when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 6.');
        }

        $this->container['higher_level_item'] = $higher_level_item;

        return $this;
    }

    /**
     * Gets billing_document_item_in_part_sgmt
     *
     * @return string|null
     */
    public function getBillingDocumentItemInPartSgmt()
    {
        return $this->container['billing_document_item_in_part_sgmt'];
    }

    /**
     * Sets billing_document_item_in_part_sgmt
     *
     * @param string|null $billing_document_item_in_part_sgmt Item Number in the Partner Segment
     *
     * @return self
     */
    public function setBillingDocumentItemInPartSgmt($billing_document_item_in_part_sgmt)
    {
        if (is_null($billing_document_item_in_part_sgmt)) {
            array_push($this->openAPINullablesSetToNull, 'billing_document_item_in_part_sgmt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_document_item_in_part_sgmt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($billing_document_item_in_part_sgmt) && (mb_strlen($billing_document_item_in_part_sgmt) > 6)) {
            throw new \InvalidArgumentException('invalid length for $billing_document_item_in_part_sgmt when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 6.');
        }

        $this->container['billing_document_item_in_part_sgmt'] = $billing_document_item_in_part_sgmt;

        return $this;
    }

    /**
     * Gets external_reference_document
     *
     * @return string|null
     */
    public function getExternalReferenceDocument()
    {
        return $this->container['external_reference_document'];
    }

    /**
     * Sets external_reference_document
     *
     * @param string|null $external_reference_document External Reference Document
     *
     * @return self
     */
    public function setExternalReferenceDocument($external_reference_document)
    {
        if (is_null($external_reference_document)) {
            array_push($this->openAPINullablesSetToNull, 'external_reference_document');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('external_reference_document', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($external_reference_document) && (mb_strlen($external_reference_document) > 10)) {
            throw new \InvalidArgumentException('invalid length for $external_reference_document when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['external_reference_document'] = $external_reference_document;

        return $this;
    }

    /**
     * Gets external_reference_document_item
     *
     * @return string|null
     */
    public function getExternalReferenceDocumentItem()
    {
        return $this->container['external_reference_document_item'];
    }

    /**
     * Sets external_reference_document_item
     *
     * @param string|null $external_reference_document_item External Reference Document Item
     *
     * @return self
     */
    public function setExternalReferenceDocumentItem($external_reference_document_item)
    {
        if (is_null($external_reference_document_item)) {
            array_push($this->openAPINullablesSetToNull, 'external_reference_document_item');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('external_reference_document_item', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($external_reference_document_item) && (mb_strlen($external_reference_document_item) > 6)) {
            throw new \InvalidArgumentException('invalid length for $external_reference_document_item when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 6.');
        }

        $this->container['external_reference_document_item'] = $external_reference_document_item;

        return $this;
    }

    /**
     * Gets sales_group
     *
     * @return string|null
     */
    public function getSalesGroup()
    {
        return $this->container['sales_group'];
    }

    /**
     * Sets sales_group
     *
     * @param string|null $sales_group sales_group
     *
     * @return self
     */
    public function setSalesGroup($sales_group)
    {
        if (is_null($sales_group)) {
            array_push($this->openAPINullablesSetToNull, 'sales_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_group) && (mb_strlen($sales_group) > 3)) {
            throw new \InvalidArgumentException('invalid length for $sales_group when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['sales_group'] = $sales_group;

        return $this;
    }

    /**
     * Gets additional_customer_group1
     *
     * @return string|null
     */
    public function getAdditionalCustomerGroup1()
    {
        return $this->container['additional_customer_group1'];
    }

    /**
     * Sets additional_customer_group1
     *
     * @param string|null $additional_customer_group1 additional_customer_group1
     *
     * @return self
     */
    public function setAdditionalCustomerGroup1($additional_customer_group1)
    {
        if (is_null($additional_customer_group1)) {
            array_push($this->openAPINullablesSetToNull, 'additional_customer_group1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_customer_group1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($additional_customer_group1) && (mb_strlen($additional_customer_group1) > 3)) {
            throw new \InvalidArgumentException('invalid length for $additional_customer_group1 when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['additional_customer_group1'] = $additional_customer_group1;

        return $this;
    }

    /**
     * Gets additional_customer_group2
     *
     * @return string|null
     */
    public function getAdditionalCustomerGroup2()
    {
        return $this->container['additional_customer_group2'];
    }

    /**
     * Sets additional_customer_group2
     *
     * @param string|null $additional_customer_group2 additional_customer_group2
     *
     * @return self
     */
    public function setAdditionalCustomerGroup2($additional_customer_group2)
    {
        if (is_null($additional_customer_group2)) {
            array_push($this->openAPINullablesSetToNull, 'additional_customer_group2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_customer_group2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($additional_customer_group2) && (mb_strlen($additional_customer_group2) > 3)) {
            throw new \InvalidArgumentException('invalid length for $additional_customer_group2 when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['additional_customer_group2'] = $additional_customer_group2;

        return $this;
    }

    /**
     * Gets additional_customer_group3
     *
     * @return string|null
     */
    public function getAdditionalCustomerGroup3()
    {
        return $this->container['additional_customer_group3'];
    }

    /**
     * Sets additional_customer_group3
     *
     * @param string|null $additional_customer_group3 additional_customer_group3
     *
     * @return self
     */
    public function setAdditionalCustomerGroup3($additional_customer_group3)
    {
        if (is_null($additional_customer_group3)) {
            array_push($this->openAPINullablesSetToNull, 'additional_customer_group3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_customer_group3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($additional_customer_group3) && (mb_strlen($additional_customer_group3) > 3)) {
            throw new \InvalidArgumentException('invalid length for $additional_customer_group3 when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['additional_customer_group3'] = $additional_customer_group3;

        return $this;
    }

    /**
     * Gets additional_customer_group4
     *
     * @return string|null
     */
    public function getAdditionalCustomerGroup4()
    {
        return $this->container['additional_customer_group4'];
    }

    /**
     * Sets additional_customer_group4
     *
     * @param string|null $additional_customer_group4 additional_customer_group4
     *
     * @return self
     */
    public function setAdditionalCustomerGroup4($additional_customer_group4)
    {
        if (is_null($additional_customer_group4)) {
            array_push($this->openAPINullablesSetToNull, 'additional_customer_group4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_customer_group4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($additional_customer_group4) && (mb_strlen($additional_customer_group4) > 3)) {
            throw new \InvalidArgumentException('invalid length for $additional_customer_group4 when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['additional_customer_group4'] = $additional_customer_group4;

        return $this;
    }

    /**
     * Gets additional_customer_group5
     *
     * @return string|null
     */
    public function getAdditionalCustomerGroup5()
    {
        return $this->container['additional_customer_group5'];
    }

    /**
     * Sets additional_customer_group5
     *
     * @param string|null $additional_customer_group5 additional_customer_group5
     *
     * @return self
     */
    public function setAdditionalCustomerGroup5($additional_customer_group5)
    {
        if (is_null($additional_customer_group5)) {
            array_push($this->openAPINullablesSetToNull, 'additional_customer_group5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_customer_group5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($additional_customer_group5) && (mb_strlen($additional_customer_group5) > 3)) {
            throw new \InvalidArgumentException('invalid length for $additional_customer_group5 when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['additional_customer_group5'] = $additional_customer_group5;

        return $this;
    }

    /**
     * Gets sd_document_reason
     *
     * @return string|null
     */
    public function getSdDocumentReason()
    {
        return $this->container['sd_document_reason'];
    }

    /**
     * Sets sd_document_reason
     *
     * @param string|null $sd_document_reason Order Reason (Reason for the Business Transaction)
     *
     * @return self
     */
    public function setSdDocumentReason($sd_document_reason)
    {
        if (is_null($sd_document_reason)) {
            array_push($this->openAPINullablesSetToNull, 'sd_document_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sd_document_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sd_document_reason) && (mb_strlen($sd_document_reason) > 3)) {
            throw new \InvalidArgumentException('invalid length for $sd_document_reason when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['sd_document_reason'] = $sd_document_reason;

        return $this;
    }

    /**
     * Gets retail_promotion
     *
     * @return string|null
     */
    public function getRetailPromotion()
    {
        return $this->container['retail_promotion'];
    }

    /**
     * Sets retail_promotion
     *
     * @param string|null $retail_promotion retail_promotion
     *
     * @return self
     */
    public function setRetailPromotion($retail_promotion)
    {
        if (is_null($retail_promotion)) {
            array_push($this->openAPINullablesSetToNull, 'retail_promotion');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('retail_promotion', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($retail_promotion) && (mb_strlen($retail_promotion) > 10)) {
            throw new \InvalidArgumentException('invalid length for $retail_promotion when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['retail_promotion'] = $retail_promotion;

        return $this;
    }

    /**
     * Gets rebate_basis_amount
     *
     * @return float|null
     */
    public function getRebateBasisAmount()
    {
        return $this->container['rebate_basis_amount'];
    }

    /**
     * Sets rebate_basis_amount
     *
     * @param float|null $rebate_basis_amount Rebate Basis 1
     *
     * @return self
     */
    public function setRebateBasisAmount($rebate_basis_amount)
    {
        if (is_null($rebate_basis_amount)) {
            array_push($this->openAPINullablesSetToNull, 'rebate_basis_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rebate_basis_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['rebate_basis_amount'] = $rebate_basis_amount;

        return $this;
    }

    /**
     * Gets volume_rebate_group
     *
     * @return string|null
     */
    public function getVolumeRebateGroup()
    {
        return $this->container['volume_rebate_group'];
    }

    /**
     * Sets volume_rebate_group
     *
     * @param string|null $volume_rebate_group Volume rebate group
     *
     * @return self
     */
    public function setVolumeRebateGroup($volume_rebate_group)
    {
        if (is_null($volume_rebate_group)) {
            array_push($this->openAPINullablesSetToNull, 'volume_rebate_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('volume_rebate_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($volume_rebate_group) && (mb_strlen($volume_rebate_group) > 2)) {
            throw new \InvalidArgumentException('invalid length for $volume_rebate_group when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['volume_rebate_group'] = $volume_rebate_group;

        return $this;
    }

    /**
     * Gets item_is_relevant_for_credit
     *
     * @return bool|null
     */
    public function getItemIsRelevantForCredit()
    {
        return $this->container['item_is_relevant_for_credit'];
    }

    /**
     * Sets item_is_relevant_for_credit
     *
     * @param bool|null $item_is_relevant_for_credit ID: Item with active credit function / relevant for credit
     *
     * @return self
     */
    public function setItemIsRelevantForCredit($item_is_relevant_for_credit)
    {
        if (is_null($item_is_relevant_for_credit)) {
            array_push($this->openAPINullablesSetToNull, 'item_is_relevant_for_credit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_is_relevant_for_credit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['item_is_relevant_for_credit'] = $item_is_relevant_for_credit;

        return $this;
    }

    /**
     * Gets credit_related_price
     *
     * @return float|null
     */
    public function getCreditRelatedPrice()
    {
        return $this->container['credit_related_price'];
    }

    /**
     * Sets credit_related_price
     *
     * @param float|null $credit_related_price Item credit price
     *
     * @return self
     */
    public function setCreditRelatedPrice($credit_related_price)
    {
        if (is_null($credit_related_price)) {
            array_push($this->openAPINullablesSetToNull, 'credit_related_price');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('credit_related_price', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['credit_related_price'] = $credit_related_price;

        return $this;
    }

    /**
     * Gets sales_deal
     *
     * @return string|null
     */
    public function getSalesDeal()
    {
        return $this->container['sales_deal'];
    }

    /**
     * Sets sales_deal
     *
     * @param string|null $sales_deal sales_deal
     *
     * @return self
     */
    public function setSalesDeal($sales_deal)
    {
        if (is_null($sales_deal)) {
            array_push($this->openAPINullablesSetToNull, 'sales_deal');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_deal', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_deal) && (mb_strlen($sales_deal) > 10)) {
            throw new \InvalidArgumentException('invalid length for $sales_deal when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['sales_deal'] = $sales_deal;

        return $this;
    }

    /**
     * Gets sales_promotion
     *
     * @return string|null
     */
    public function getSalesPromotion()
    {
        return $this->container['sales_promotion'];
    }

    /**
     * Sets sales_promotion
     *
     * @param string|null $sales_promotion sales_promotion
     *
     * @return self
     */
    public function setSalesPromotion($sales_promotion)
    {
        if (is_null($sales_promotion)) {
            array_push($this->openAPINullablesSetToNull, 'sales_promotion');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_promotion', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_promotion) && (mb_strlen($sales_promotion) > 10)) {
            throw new \InvalidArgumentException('invalid length for $sales_promotion when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['sales_promotion'] = $sales_promotion;

        return $this;
    }

    /**
     * Gets sales_order_sales_district
     *
     * @return string|null
     */
    public function getSalesOrderSalesDistrict()
    {
        return $this->container['sales_order_sales_district'];
    }

    /**
     * Sets sales_order_sales_district
     *
     * @param string|null $sales_order_sales_district Sales district of sales order
     *
     * @return self
     */
    public function setSalesOrderSalesDistrict($sales_order_sales_district)
    {
        if (is_null($sales_order_sales_district)) {
            array_push($this->openAPINullablesSetToNull, 'sales_order_sales_district');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_order_sales_district', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_order_sales_district) && (mb_strlen($sales_order_sales_district) > 6)) {
            throw new \InvalidArgumentException('invalid length for $sales_order_sales_district when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 6.');
        }

        $this->container['sales_order_sales_district'] = $sales_order_sales_district;

        return $this;
    }

    /**
     * Gets sales_order_customer_group
     *
     * @return string|null
     */
    public function getSalesOrderCustomerGroup()
    {
        return $this->container['sales_order_customer_group'];
    }

    /**
     * Sets sales_order_customer_group
     *
     * @param string|null $sales_order_customer_group Customer group of sales order
     *
     * @return self
     */
    public function setSalesOrderCustomerGroup($sales_order_customer_group)
    {
        if (is_null($sales_order_customer_group)) {
            array_push($this->openAPINullablesSetToNull, 'sales_order_customer_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_order_customer_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_order_customer_group) && (mb_strlen($sales_order_customer_group) > 2)) {
            throw new \InvalidArgumentException('invalid length for $sales_order_customer_group when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['sales_order_customer_group'] = $sales_order_customer_group;

        return $this;
    }

    /**
     * Gets sales_order_customer_price_group
     *
     * @return string|null
     */
    public function getSalesOrderCustomerPriceGroup()
    {
        return $this->container['sales_order_customer_price_group'];
    }

    /**
     * Sets sales_order_customer_price_group
     *
     * @param string|null $sales_order_customer_price_group Price group of sales order
     *
     * @return self
     */
    public function setSalesOrderCustomerPriceGroup($sales_order_customer_price_group)
    {
        if (is_null($sales_order_customer_price_group)) {
            array_push($this->openAPINullablesSetToNull, 'sales_order_customer_price_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_order_customer_price_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_order_customer_price_group) && (mb_strlen($sales_order_customer_price_group) > 2)) {
            throw new \InvalidArgumentException('invalid length for $sales_order_customer_price_group when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['sales_order_customer_price_group'] = $sales_order_customer_price_group;

        return $this;
    }

    /**
     * Gets sales_order_price_list_type
     *
     * @return string|null
     */
    public function getSalesOrderPriceListType()
    {
        return $this->container['sales_order_price_list_type'];
    }

    /**
     * Sets sales_order_price_list_type
     *
     * @param string|null $sales_order_price_list_type Price list type of sales order
     *
     * @return self
     */
    public function setSalesOrderPriceListType($sales_order_price_list_type)
    {
        if (is_null($sales_order_price_list_type)) {
            array_push($this->openAPINullablesSetToNull, 'sales_order_price_list_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_order_price_list_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_order_price_list_type) && (mb_strlen($sales_order_price_list_type) > 2)) {
            throw new \InvalidArgumentException('invalid length for $sales_order_price_list_type when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['sales_order_price_list_type'] = $sales_order_price_list_type;

        return $this;
    }

    /**
     * Gets sales_order_sales_organization
     *
     * @return string|null
     */
    public function getSalesOrderSalesOrganization()
    {
        return $this->container['sales_order_sales_organization'];
    }

    /**
     * Sets sales_order_sales_organization
     *
     * @param string|null $sales_order_sales_organization Sales organization of sales order
     *
     * @return self
     */
    public function setSalesOrderSalesOrganization($sales_order_sales_organization)
    {
        if (is_null($sales_order_sales_organization)) {
            array_push($this->openAPINullablesSetToNull, 'sales_order_sales_organization');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_order_sales_organization', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_order_sales_organization) && (mb_strlen($sales_order_sales_organization) > 4)) {
            throw new \InvalidArgumentException('invalid length for $sales_order_sales_organization when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['sales_order_sales_organization'] = $sales_order_sales_organization;

        return $this;
    }

    /**
     * Gets sales_order_distribution_channel
     *
     * @return string|null
     */
    public function getSalesOrderDistributionChannel()
    {
        return $this->container['sales_order_distribution_channel'];
    }

    /**
     * Sets sales_order_distribution_channel
     *
     * @param string|null $sales_order_distribution_channel Distribution channel of sales order
     *
     * @return self
     */
    public function setSalesOrderDistributionChannel($sales_order_distribution_channel)
    {
        if (is_null($sales_order_distribution_channel)) {
            array_push($this->openAPINullablesSetToNull, 'sales_order_distribution_channel');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_order_distribution_channel', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_order_distribution_channel) && (mb_strlen($sales_order_distribution_channel) > 2)) {
            throw new \InvalidArgumentException('invalid length for $sales_order_distribution_channel when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['sales_order_distribution_channel'] = $sales_order_distribution_channel;

        return $this;
    }

    /**
     * Gets sales_doc_is_created_from_reference
     *
     * @return bool|null
     */
    public function getSalesDocIsCreatedFromReference()
    {
        return $this->container['sales_doc_is_created_from_reference'];
    }

    /**
     * Sets sales_doc_is_created_from_reference
     *
     * @param bool|null $sales_doc_is_created_from_reference Sales document was created from reference
     *
     * @return self
     */
    public function setSalesDocIsCreatedFromReference($sales_doc_is_created_from_reference)
    {
        if (is_null($sales_doc_is_created_from_reference)) {
            array_push($this->openAPINullablesSetToNull, 'sales_doc_is_created_from_reference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_doc_is_created_from_reference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sales_doc_is_created_from_reference'] = $sales_doc_is_created_from_reference;

        return $this;
    }

    /**
     * Gets shipping_point
     *
     * @return string|null
     */
    public function getShippingPoint()
    {
        return $this->container['shipping_point'];
    }

    /**
     * Sets shipping_point
     *
     * @param string|null $shipping_point Shipping Point / Receiving Point
     *
     * @return self
     */
    public function setShippingPoint($shipping_point)
    {
        if (is_null($shipping_point)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_point');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_point', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($shipping_point) && (mb_strlen($shipping_point) > 4)) {
            throw new \InvalidArgumentException('invalid length for $shipping_point when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['shipping_point'] = $shipping_point;

        return $this;
    }

    /**
     * Gets higher_level_item_usage
     *
     * @return string|null
     */
    public function getHigherLevelItemUsage()
    {
        return $this->container['higher_level_item_usage'];
    }

    /**
     * Sets higher_level_item_usage
     *
     * @param string|null $higher_level_item_usage ID for higher-level item usage
     *
     * @return self
     */
    public function setHigherLevelItemUsage($higher_level_item_usage)
    {
        if (is_null($higher_level_item_usage)) {
            array_push($this->openAPINullablesSetToNull, 'higher_level_item_usage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('higher_level_item_usage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($higher_level_item_usage) && (mb_strlen($higher_level_item_usage) > 1)) {
            throw new \InvalidArgumentException('invalid length for $higher_level_item_usage when calling APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['higher_level_item_usage'] = $higher_level_item_usage;

        return $this;
    }

    /**
     * Gets to_billing_document
     *
     * @return \BeLenka\SAP\BillingDocumentRCG2\Model\APIBILLINGDOCUMENTSRVABillingDocumentTypeCreate|null
     */
    public function getToBillingDocument()
    {
        return $this->container['to_billing_document'];
    }

    /**
     * Sets to_billing_document
     *
     * @param \BeLenka\SAP\BillingDocumentRCG2\Model\APIBILLINGDOCUMENTSRVABillingDocumentTypeCreate|null $to_billing_document to_billing_document
     *
     * @return self
     */
    public function setToBillingDocument($to_billing_document)
    {
        if (is_null($to_billing_document)) {
            throw new \InvalidArgumentException('non-nullable to_billing_document cannot be null');
        }
        $this->container['to_billing_document'] = $to_billing_document;

        return $this;
    }

    /**
     * Gets to_item_text
     *
     * @return \BeLenka\SAP\BillingDocumentRCG2\Model\APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreateToItemText|null
     */
    public function getToItemText()
    {
        return $this->container['to_item_text'];
    }

    /**
     * Sets to_item_text
     *
     * @param \BeLenka\SAP\BillingDocumentRCG2\Model\APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreateToItemText|null $to_item_text to_item_text
     *
     * @return self
     */
    public function setToItemText($to_item_text)
    {
        if (is_null($to_item_text)) {
            throw new \InvalidArgumentException('non-nullable to_item_text cannot be null');
        }
        $this->container['to_item_text'] = $to_item_text;

        return $this;
    }

    /**
     * Gets to_partner
     *
     * @return \BeLenka\SAP\BillingDocumentRCG2\Model\APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreateToPartner|null
     */
    public function getToPartner()
    {
        return $this->container['to_partner'];
    }

    /**
     * Sets to_partner
     *
     * @param \BeLenka\SAP\BillingDocumentRCG2\Model\APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreateToPartner|null $to_partner to_partner
     *
     * @return self
     */
    public function setToPartner($to_partner)
    {
        if (is_null($to_partner)) {
            throw new \InvalidArgumentException('non-nullable to_partner cannot be null');
        }
        $this->container['to_partner'] = $to_partner;

        return $this;
    }

    /**
     * Gets to_pricing_element
     *
     * @return \BeLenka\SAP\BillingDocumentRCG2\Model\APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreateToPricingElement|null
     */
    public function getToPricingElement()
    {
        return $this->container['to_pricing_element'];
    }

    /**
     * Sets to_pricing_element
     *
     * @param \BeLenka\SAP\BillingDocumentRCG2\Model\APIBILLINGDOCUMENTSRVABillingDocumentItemTypeCreateToPricingElement|null $to_pricing_element to_pricing_element
     *
     * @return self
     */
    public function setToPricingElement($to_pricing_element)
    {
        if (is_null($to_pricing_element)) {
            throw new \InvalidArgumentException('non-nullable to_pricing_element cannot be null');
        }
        $this->container['to_pricing_element'] = $to_pricing_element;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


