<?php
/**
 * APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\BillingDocumentRCG2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Billing Document - Read, Cancel, GetPDF
 *
 * Consumers of this inbound service can read and cancel billing documents inside your system by sending OData requests. In addition, they can request entire billing documents in PDF format. The service makes billing document data available through its header, item, business partner, and pricing element entities.
 *
 * The version of the OpenAPI document: 1.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\BillingDocumentRCG2\Model;

use \ArrayAccess;
use \BeLenka\SAP\BillingDocumentRCG2\ObjectSerializer;

/**
 * APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\BillingDocumentRCG2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'API_BILLING_DOCUMENT_SRV.A_BillingDocumentType-update';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sd_document_category' => 'string',
        'billing_document_category' => 'string',
        'billing_document_type' => 'string',
        'creation_date' => 'string',
        'creation_time' => 'string',
        'last_change_date' => 'string',
        'last_change_date_time' => 'string',
        'logical_system' => 'string',
        'sales_organization' => 'string',
        'distribution_channel' => 'string',
        'division' => 'string',
        'billing_document_date' => 'string',
        'billing_document_is_cancelled' => 'bool',
        'cancelled_billing_document' => 'string',
        'foreign_trade' => 'string',
        'is_export_delivery' => 'string',
        'billing_doc_combination_criteria' => 'string',
        'manual_invoice_maint_is_relevant' => 'bool',
        'is_intrastat_reporting_relevant' => 'bool',
        'is_intrastat_reporting_excluded' => 'bool',
        'total_net_amount' => 'float',
        'transaction_currency' => 'string',
        'statistics_currency' => 'string',
        'tax_amount' => 'float',
        'total_gross_amount' => 'float',
        'customer_price_group' => 'string',
        'price_list_type' => 'string',
        'tax_departure_country' => 'string',
        'vat_registration' => 'string',
        'vat_registration_origin' => 'string',
        'vat_registration_country' => 'string',
        'hierarchy_type_pricing' => 'string',
        'customer_tax_classification1' => 'string',
        'customer_tax_classification2' => 'string',
        'customer_tax_classification3' => 'string',
        'customer_tax_classification4' => 'string',
        'customer_tax_classification5' => 'string',
        'customer_tax_classification6' => 'string',
        'customer_tax_classification7' => 'string',
        'customer_tax_classification8' => 'string',
        'customer_tax_classification9' => 'string',
        'is_eu_triangular_deal' => 'bool',
        'sd_pricing_procedure' => 'string',
        'shipping_condition' => 'string',
        'incoterms_version' => 'string',
        'incoterms_classification' => 'string',
        'incoterms_transfer_location' => 'string',
        'incoterms_location1' => 'string',
        'incoterms_location2' => 'string',
        'payer_party' => 'string',
        'contract_account' => 'string',
        'customer_payment_terms' => 'string',
        'payment_method' => 'string',
        'payment_reference' => 'string',
        'fixed_value_date' => 'string',
        'additional_value_days' => 'string',
        'sepa_mandate' => 'string',
        'company_code' => 'string',
        'fiscal_year' => 'string',
        'accounting_document' => 'string',
        'customer_account_assignment_group' => 'string',
        'accounting_exchange_rate_is_set' => 'bool',
        'abslt_accounting_exchange_rate' => 'float',
        'acctg_exchange_rate_is_indrct_qtan' => 'bool',
        'exchange_rate_date' => 'string',
        'exchange_rate_type' => 'string',
        'document_reference_id' => 'string',
        'assignment_reference' => 'string',
        'dunning_area' => 'string',
        'dunning_blocking_reason' => 'string',
        'dunning_key' => 'string',
        'internal_financial_document' => 'string',
        'is_relevant_for_accrual' => 'bool',
        'sold_to_party' => 'string',
        'partner_company' => 'string',
        'purchase_order_by_customer' => 'string',
        'customer_group' => 'string',
        'country' => 'string',
        'city_code' => 'string',
        'sales_district' => 'string',
        'region' => 'string',
        'county' => 'string',
        'credit_control_area' => 'string',
        'customer_rebate_agreement' => 'string',
        'sales_document_condition' => 'string',
        'overall_sd_process_status' => 'string',
        'overall_billing_status' => 'string',
        'accounting_posting_status' => 'string',
        'accounting_transfer_status' => 'string',
        'billing_issue_type' => 'string',
        'invoice_list_status' => 'string',
        'ovrl_itm_general_incompletion_sts' => 'string',
        'overall_pricing_incompletion_sts' => 'string',
        'invoice_clearing_status' => 'string',
        'billing_document_list_type' => 'string',
        'billing_document_list_date' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sd_document_category' => null,
        'billing_document_category' => null,
        'billing_document_type' => null,
        'creation_date' => null,
        'creation_time' => null,
        'last_change_date' => null,
        'last_change_date_time' => null,
        'logical_system' => null,
        'sales_organization' => null,
        'distribution_channel' => null,
        'division' => null,
        'billing_document_date' => null,
        'billing_document_is_cancelled' => null,
        'cancelled_billing_document' => null,
        'foreign_trade' => null,
        'is_export_delivery' => null,
        'billing_doc_combination_criteria' => null,
        'manual_invoice_maint_is_relevant' => null,
        'is_intrastat_reporting_relevant' => null,
        'is_intrastat_reporting_excluded' => null,
        'total_net_amount' => 'decimal',
        'transaction_currency' => null,
        'statistics_currency' => null,
        'tax_amount' => 'decimal',
        'total_gross_amount' => 'decimal',
        'customer_price_group' => null,
        'price_list_type' => null,
        'tax_departure_country' => null,
        'vat_registration' => null,
        'vat_registration_origin' => null,
        'vat_registration_country' => null,
        'hierarchy_type_pricing' => null,
        'customer_tax_classification1' => null,
        'customer_tax_classification2' => null,
        'customer_tax_classification3' => null,
        'customer_tax_classification4' => null,
        'customer_tax_classification5' => null,
        'customer_tax_classification6' => null,
        'customer_tax_classification7' => null,
        'customer_tax_classification8' => null,
        'customer_tax_classification9' => null,
        'is_eu_triangular_deal' => null,
        'sd_pricing_procedure' => null,
        'shipping_condition' => null,
        'incoterms_version' => null,
        'incoterms_classification' => null,
        'incoterms_transfer_location' => null,
        'incoterms_location1' => null,
        'incoterms_location2' => null,
        'payer_party' => null,
        'contract_account' => null,
        'customer_payment_terms' => null,
        'payment_method' => null,
        'payment_reference' => null,
        'fixed_value_date' => null,
        'additional_value_days' => null,
        'sepa_mandate' => null,
        'company_code' => null,
        'fiscal_year' => null,
        'accounting_document' => null,
        'customer_account_assignment_group' => null,
        'accounting_exchange_rate_is_set' => null,
        'abslt_accounting_exchange_rate' => 'decimal',
        'acctg_exchange_rate_is_indrct_qtan' => null,
        'exchange_rate_date' => null,
        'exchange_rate_type' => null,
        'document_reference_id' => null,
        'assignment_reference' => null,
        'dunning_area' => null,
        'dunning_blocking_reason' => null,
        'dunning_key' => null,
        'internal_financial_document' => null,
        'is_relevant_for_accrual' => null,
        'sold_to_party' => null,
        'partner_company' => null,
        'purchase_order_by_customer' => null,
        'customer_group' => null,
        'country' => null,
        'city_code' => null,
        'sales_district' => null,
        'region' => null,
        'county' => null,
        'credit_control_area' => null,
        'customer_rebate_agreement' => null,
        'sales_document_condition' => null,
        'overall_sd_process_status' => null,
        'overall_billing_status' => null,
        'accounting_posting_status' => null,
        'accounting_transfer_status' => null,
        'billing_issue_type' => null,
        'invoice_list_status' => null,
        'ovrl_itm_general_incompletion_sts' => null,
        'overall_pricing_incompletion_sts' => null,
        'invoice_clearing_status' => null,
        'billing_document_list_type' => null,
        'billing_document_list_date' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'sd_document_category' => true,
		'billing_document_category' => true,
		'billing_document_type' => true,
		'creation_date' => true,
		'creation_time' => true,
		'last_change_date' => true,
		'last_change_date_time' => true,
		'logical_system' => true,
		'sales_organization' => true,
		'distribution_channel' => true,
		'division' => true,
		'billing_document_date' => true,
		'billing_document_is_cancelled' => true,
		'cancelled_billing_document' => true,
		'foreign_trade' => true,
		'is_export_delivery' => true,
		'billing_doc_combination_criteria' => true,
		'manual_invoice_maint_is_relevant' => true,
		'is_intrastat_reporting_relevant' => true,
		'is_intrastat_reporting_excluded' => true,
		'total_net_amount' => true,
		'transaction_currency' => true,
		'statistics_currency' => true,
		'tax_amount' => true,
		'total_gross_amount' => true,
		'customer_price_group' => true,
		'price_list_type' => true,
		'tax_departure_country' => true,
		'vat_registration' => true,
		'vat_registration_origin' => true,
		'vat_registration_country' => true,
		'hierarchy_type_pricing' => true,
		'customer_tax_classification1' => true,
		'customer_tax_classification2' => true,
		'customer_tax_classification3' => true,
		'customer_tax_classification4' => true,
		'customer_tax_classification5' => true,
		'customer_tax_classification6' => true,
		'customer_tax_classification7' => true,
		'customer_tax_classification8' => true,
		'customer_tax_classification9' => true,
		'is_eu_triangular_deal' => true,
		'sd_pricing_procedure' => true,
		'shipping_condition' => true,
		'incoterms_version' => true,
		'incoterms_classification' => true,
		'incoterms_transfer_location' => true,
		'incoterms_location1' => true,
		'incoterms_location2' => true,
		'payer_party' => true,
		'contract_account' => true,
		'customer_payment_terms' => true,
		'payment_method' => true,
		'payment_reference' => true,
		'fixed_value_date' => true,
		'additional_value_days' => true,
		'sepa_mandate' => true,
		'company_code' => true,
		'fiscal_year' => true,
		'accounting_document' => true,
		'customer_account_assignment_group' => true,
		'accounting_exchange_rate_is_set' => true,
		'abslt_accounting_exchange_rate' => true,
		'acctg_exchange_rate_is_indrct_qtan' => true,
		'exchange_rate_date' => true,
		'exchange_rate_type' => true,
		'document_reference_id' => true,
		'assignment_reference' => true,
		'dunning_area' => true,
		'dunning_blocking_reason' => true,
		'dunning_key' => true,
		'internal_financial_document' => true,
		'is_relevant_for_accrual' => true,
		'sold_to_party' => true,
		'partner_company' => true,
		'purchase_order_by_customer' => true,
		'customer_group' => true,
		'country' => true,
		'city_code' => true,
		'sales_district' => true,
		'region' => true,
		'county' => true,
		'credit_control_area' => true,
		'customer_rebate_agreement' => true,
		'sales_document_condition' => true,
		'overall_sd_process_status' => true,
		'overall_billing_status' => true,
		'accounting_posting_status' => true,
		'accounting_transfer_status' => true,
		'billing_issue_type' => true,
		'invoice_list_status' => true,
		'ovrl_itm_general_incompletion_sts' => true,
		'overall_pricing_incompletion_sts' => true,
		'invoice_clearing_status' => true,
		'billing_document_list_type' => true,
		'billing_document_list_date' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sd_document_category' => 'SDDocumentCategory',
        'billing_document_category' => 'BillingDocumentCategory',
        'billing_document_type' => 'BillingDocumentType',
        'creation_date' => 'CreationDate',
        'creation_time' => 'CreationTime',
        'last_change_date' => 'LastChangeDate',
        'last_change_date_time' => 'LastChangeDateTime',
        'logical_system' => 'LogicalSystem',
        'sales_organization' => 'SalesOrganization',
        'distribution_channel' => 'DistributionChannel',
        'division' => 'Division',
        'billing_document_date' => 'BillingDocumentDate',
        'billing_document_is_cancelled' => 'BillingDocumentIsCancelled',
        'cancelled_billing_document' => 'CancelledBillingDocument',
        'foreign_trade' => 'ForeignTrade',
        'is_export_delivery' => 'IsExportDelivery',
        'billing_doc_combination_criteria' => 'BillingDocCombinationCriteria',
        'manual_invoice_maint_is_relevant' => 'ManualInvoiceMaintIsRelevant',
        'is_intrastat_reporting_relevant' => 'IsIntrastatReportingRelevant',
        'is_intrastat_reporting_excluded' => 'IsIntrastatReportingExcluded',
        'total_net_amount' => 'TotalNetAmount',
        'transaction_currency' => 'TransactionCurrency',
        'statistics_currency' => 'StatisticsCurrency',
        'tax_amount' => 'TaxAmount',
        'total_gross_amount' => 'TotalGrossAmount',
        'customer_price_group' => 'CustomerPriceGroup',
        'price_list_type' => 'PriceListType',
        'tax_departure_country' => 'TaxDepartureCountry',
        'vat_registration' => 'VATRegistration',
        'vat_registration_origin' => 'VATRegistrationOrigin',
        'vat_registration_country' => 'VATRegistrationCountry',
        'hierarchy_type_pricing' => 'HierarchyTypePricing',
        'customer_tax_classification1' => 'CustomerTaxClassification1',
        'customer_tax_classification2' => 'CustomerTaxClassification2',
        'customer_tax_classification3' => 'CustomerTaxClassification3',
        'customer_tax_classification4' => 'CustomerTaxClassification4',
        'customer_tax_classification5' => 'CustomerTaxClassification5',
        'customer_tax_classification6' => 'CustomerTaxClassification6',
        'customer_tax_classification7' => 'CustomerTaxClassification7',
        'customer_tax_classification8' => 'CustomerTaxClassification8',
        'customer_tax_classification9' => 'CustomerTaxClassification9',
        'is_eu_triangular_deal' => 'IsEUTriangularDeal',
        'sd_pricing_procedure' => 'SDPricingProcedure',
        'shipping_condition' => 'ShippingCondition',
        'incoterms_version' => 'IncotermsVersion',
        'incoterms_classification' => 'IncotermsClassification',
        'incoterms_transfer_location' => 'IncotermsTransferLocation',
        'incoterms_location1' => 'IncotermsLocation1',
        'incoterms_location2' => 'IncotermsLocation2',
        'payer_party' => 'PayerParty',
        'contract_account' => 'ContractAccount',
        'customer_payment_terms' => 'CustomerPaymentTerms',
        'payment_method' => 'PaymentMethod',
        'payment_reference' => 'PaymentReference',
        'fixed_value_date' => 'FixedValueDate',
        'additional_value_days' => 'AdditionalValueDays',
        'sepa_mandate' => 'SEPAMandate',
        'company_code' => 'CompanyCode',
        'fiscal_year' => 'FiscalYear',
        'accounting_document' => 'AccountingDocument',
        'customer_account_assignment_group' => 'CustomerAccountAssignmentGroup',
        'accounting_exchange_rate_is_set' => 'AccountingExchangeRateIsSet',
        'abslt_accounting_exchange_rate' => 'AbsltAccountingExchangeRate',
        'acctg_exchange_rate_is_indrct_qtan' => 'AcctgExchangeRateIsIndrctQtan',
        'exchange_rate_date' => 'ExchangeRateDate',
        'exchange_rate_type' => 'ExchangeRateType',
        'document_reference_id' => 'DocumentReferenceID',
        'assignment_reference' => 'AssignmentReference',
        'dunning_area' => 'DunningArea',
        'dunning_blocking_reason' => 'DunningBlockingReason',
        'dunning_key' => 'DunningKey',
        'internal_financial_document' => 'InternalFinancialDocument',
        'is_relevant_for_accrual' => 'IsRelevantForAccrual',
        'sold_to_party' => 'SoldToParty',
        'partner_company' => 'PartnerCompany',
        'purchase_order_by_customer' => 'PurchaseOrderByCustomer',
        'customer_group' => 'CustomerGroup',
        'country' => 'Country',
        'city_code' => 'CityCode',
        'sales_district' => 'SalesDistrict',
        'region' => 'Region',
        'county' => 'County',
        'credit_control_area' => 'CreditControlArea',
        'customer_rebate_agreement' => 'CustomerRebateAgreement',
        'sales_document_condition' => 'SalesDocumentCondition',
        'overall_sd_process_status' => 'OverallSDProcessStatus',
        'overall_billing_status' => 'OverallBillingStatus',
        'accounting_posting_status' => 'AccountingPostingStatus',
        'accounting_transfer_status' => 'AccountingTransferStatus',
        'billing_issue_type' => 'BillingIssueType',
        'invoice_list_status' => 'InvoiceListStatus',
        'ovrl_itm_general_incompletion_sts' => 'OvrlItmGeneralIncompletionSts',
        'overall_pricing_incompletion_sts' => 'OverallPricingIncompletionSts',
        'invoice_clearing_status' => 'InvoiceClearingStatus',
        'billing_document_list_type' => 'BillingDocumentListType',
        'billing_document_list_date' => 'BillingDocumentListDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sd_document_category' => 'setSdDocumentCategory',
        'billing_document_category' => 'setBillingDocumentCategory',
        'billing_document_type' => 'setBillingDocumentType',
        'creation_date' => 'setCreationDate',
        'creation_time' => 'setCreationTime',
        'last_change_date' => 'setLastChangeDate',
        'last_change_date_time' => 'setLastChangeDateTime',
        'logical_system' => 'setLogicalSystem',
        'sales_organization' => 'setSalesOrganization',
        'distribution_channel' => 'setDistributionChannel',
        'division' => 'setDivision',
        'billing_document_date' => 'setBillingDocumentDate',
        'billing_document_is_cancelled' => 'setBillingDocumentIsCancelled',
        'cancelled_billing_document' => 'setCancelledBillingDocument',
        'foreign_trade' => 'setForeignTrade',
        'is_export_delivery' => 'setIsExportDelivery',
        'billing_doc_combination_criteria' => 'setBillingDocCombinationCriteria',
        'manual_invoice_maint_is_relevant' => 'setManualInvoiceMaintIsRelevant',
        'is_intrastat_reporting_relevant' => 'setIsIntrastatReportingRelevant',
        'is_intrastat_reporting_excluded' => 'setIsIntrastatReportingExcluded',
        'total_net_amount' => 'setTotalNetAmount',
        'transaction_currency' => 'setTransactionCurrency',
        'statistics_currency' => 'setStatisticsCurrency',
        'tax_amount' => 'setTaxAmount',
        'total_gross_amount' => 'setTotalGrossAmount',
        'customer_price_group' => 'setCustomerPriceGroup',
        'price_list_type' => 'setPriceListType',
        'tax_departure_country' => 'setTaxDepartureCountry',
        'vat_registration' => 'setVatRegistration',
        'vat_registration_origin' => 'setVatRegistrationOrigin',
        'vat_registration_country' => 'setVatRegistrationCountry',
        'hierarchy_type_pricing' => 'setHierarchyTypePricing',
        'customer_tax_classification1' => 'setCustomerTaxClassification1',
        'customer_tax_classification2' => 'setCustomerTaxClassification2',
        'customer_tax_classification3' => 'setCustomerTaxClassification3',
        'customer_tax_classification4' => 'setCustomerTaxClassification4',
        'customer_tax_classification5' => 'setCustomerTaxClassification5',
        'customer_tax_classification6' => 'setCustomerTaxClassification6',
        'customer_tax_classification7' => 'setCustomerTaxClassification7',
        'customer_tax_classification8' => 'setCustomerTaxClassification8',
        'customer_tax_classification9' => 'setCustomerTaxClassification9',
        'is_eu_triangular_deal' => 'setIsEuTriangularDeal',
        'sd_pricing_procedure' => 'setSdPricingProcedure',
        'shipping_condition' => 'setShippingCondition',
        'incoterms_version' => 'setIncotermsVersion',
        'incoterms_classification' => 'setIncotermsClassification',
        'incoterms_transfer_location' => 'setIncotermsTransferLocation',
        'incoterms_location1' => 'setIncotermsLocation1',
        'incoterms_location2' => 'setIncotermsLocation2',
        'payer_party' => 'setPayerParty',
        'contract_account' => 'setContractAccount',
        'customer_payment_terms' => 'setCustomerPaymentTerms',
        'payment_method' => 'setPaymentMethod',
        'payment_reference' => 'setPaymentReference',
        'fixed_value_date' => 'setFixedValueDate',
        'additional_value_days' => 'setAdditionalValueDays',
        'sepa_mandate' => 'setSepaMandate',
        'company_code' => 'setCompanyCode',
        'fiscal_year' => 'setFiscalYear',
        'accounting_document' => 'setAccountingDocument',
        'customer_account_assignment_group' => 'setCustomerAccountAssignmentGroup',
        'accounting_exchange_rate_is_set' => 'setAccountingExchangeRateIsSet',
        'abslt_accounting_exchange_rate' => 'setAbsltAccountingExchangeRate',
        'acctg_exchange_rate_is_indrct_qtan' => 'setAcctgExchangeRateIsIndrctQtan',
        'exchange_rate_date' => 'setExchangeRateDate',
        'exchange_rate_type' => 'setExchangeRateType',
        'document_reference_id' => 'setDocumentReferenceId',
        'assignment_reference' => 'setAssignmentReference',
        'dunning_area' => 'setDunningArea',
        'dunning_blocking_reason' => 'setDunningBlockingReason',
        'dunning_key' => 'setDunningKey',
        'internal_financial_document' => 'setInternalFinancialDocument',
        'is_relevant_for_accrual' => 'setIsRelevantForAccrual',
        'sold_to_party' => 'setSoldToParty',
        'partner_company' => 'setPartnerCompany',
        'purchase_order_by_customer' => 'setPurchaseOrderByCustomer',
        'customer_group' => 'setCustomerGroup',
        'country' => 'setCountry',
        'city_code' => 'setCityCode',
        'sales_district' => 'setSalesDistrict',
        'region' => 'setRegion',
        'county' => 'setCounty',
        'credit_control_area' => 'setCreditControlArea',
        'customer_rebate_agreement' => 'setCustomerRebateAgreement',
        'sales_document_condition' => 'setSalesDocumentCondition',
        'overall_sd_process_status' => 'setOverallSdProcessStatus',
        'overall_billing_status' => 'setOverallBillingStatus',
        'accounting_posting_status' => 'setAccountingPostingStatus',
        'accounting_transfer_status' => 'setAccountingTransferStatus',
        'billing_issue_type' => 'setBillingIssueType',
        'invoice_list_status' => 'setInvoiceListStatus',
        'ovrl_itm_general_incompletion_sts' => 'setOvrlItmGeneralIncompletionSts',
        'overall_pricing_incompletion_sts' => 'setOverallPricingIncompletionSts',
        'invoice_clearing_status' => 'setInvoiceClearingStatus',
        'billing_document_list_type' => 'setBillingDocumentListType',
        'billing_document_list_date' => 'setBillingDocumentListDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sd_document_category' => 'getSdDocumentCategory',
        'billing_document_category' => 'getBillingDocumentCategory',
        'billing_document_type' => 'getBillingDocumentType',
        'creation_date' => 'getCreationDate',
        'creation_time' => 'getCreationTime',
        'last_change_date' => 'getLastChangeDate',
        'last_change_date_time' => 'getLastChangeDateTime',
        'logical_system' => 'getLogicalSystem',
        'sales_organization' => 'getSalesOrganization',
        'distribution_channel' => 'getDistributionChannel',
        'division' => 'getDivision',
        'billing_document_date' => 'getBillingDocumentDate',
        'billing_document_is_cancelled' => 'getBillingDocumentIsCancelled',
        'cancelled_billing_document' => 'getCancelledBillingDocument',
        'foreign_trade' => 'getForeignTrade',
        'is_export_delivery' => 'getIsExportDelivery',
        'billing_doc_combination_criteria' => 'getBillingDocCombinationCriteria',
        'manual_invoice_maint_is_relevant' => 'getManualInvoiceMaintIsRelevant',
        'is_intrastat_reporting_relevant' => 'getIsIntrastatReportingRelevant',
        'is_intrastat_reporting_excluded' => 'getIsIntrastatReportingExcluded',
        'total_net_amount' => 'getTotalNetAmount',
        'transaction_currency' => 'getTransactionCurrency',
        'statistics_currency' => 'getStatisticsCurrency',
        'tax_amount' => 'getTaxAmount',
        'total_gross_amount' => 'getTotalGrossAmount',
        'customer_price_group' => 'getCustomerPriceGroup',
        'price_list_type' => 'getPriceListType',
        'tax_departure_country' => 'getTaxDepartureCountry',
        'vat_registration' => 'getVatRegistration',
        'vat_registration_origin' => 'getVatRegistrationOrigin',
        'vat_registration_country' => 'getVatRegistrationCountry',
        'hierarchy_type_pricing' => 'getHierarchyTypePricing',
        'customer_tax_classification1' => 'getCustomerTaxClassification1',
        'customer_tax_classification2' => 'getCustomerTaxClassification2',
        'customer_tax_classification3' => 'getCustomerTaxClassification3',
        'customer_tax_classification4' => 'getCustomerTaxClassification4',
        'customer_tax_classification5' => 'getCustomerTaxClassification5',
        'customer_tax_classification6' => 'getCustomerTaxClassification6',
        'customer_tax_classification7' => 'getCustomerTaxClassification7',
        'customer_tax_classification8' => 'getCustomerTaxClassification8',
        'customer_tax_classification9' => 'getCustomerTaxClassification9',
        'is_eu_triangular_deal' => 'getIsEuTriangularDeal',
        'sd_pricing_procedure' => 'getSdPricingProcedure',
        'shipping_condition' => 'getShippingCondition',
        'incoterms_version' => 'getIncotermsVersion',
        'incoterms_classification' => 'getIncotermsClassification',
        'incoterms_transfer_location' => 'getIncotermsTransferLocation',
        'incoterms_location1' => 'getIncotermsLocation1',
        'incoterms_location2' => 'getIncotermsLocation2',
        'payer_party' => 'getPayerParty',
        'contract_account' => 'getContractAccount',
        'customer_payment_terms' => 'getCustomerPaymentTerms',
        'payment_method' => 'getPaymentMethod',
        'payment_reference' => 'getPaymentReference',
        'fixed_value_date' => 'getFixedValueDate',
        'additional_value_days' => 'getAdditionalValueDays',
        'sepa_mandate' => 'getSepaMandate',
        'company_code' => 'getCompanyCode',
        'fiscal_year' => 'getFiscalYear',
        'accounting_document' => 'getAccountingDocument',
        'customer_account_assignment_group' => 'getCustomerAccountAssignmentGroup',
        'accounting_exchange_rate_is_set' => 'getAccountingExchangeRateIsSet',
        'abslt_accounting_exchange_rate' => 'getAbsltAccountingExchangeRate',
        'acctg_exchange_rate_is_indrct_qtan' => 'getAcctgExchangeRateIsIndrctQtan',
        'exchange_rate_date' => 'getExchangeRateDate',
        'exchange_rate_type' => 'getExchangeRateType',
        'document_reference_id' => 'getDocumentReferenceId',
        'assignment_reference' => 'getAssignmentReference',
        'dunning_area' => 'getDunningArea',
        'dunning_blocking_reason' => 'getDunningBlockingReason',
        'dunning_key' => 'getDunningKey',
        'internal_financial_document' => 'getInternalFinancialDocument',
        'is_relevant_for_accrual' => 'getIsRelevantForAccrual',
        'sold_to_party' => 'getSoldToParty',
        'partner_company' => 'getPartnerCompany',
        'purchase_order_by_customer' => 'getPurchaseOrderByCustomer',
        'customer_group' => 'getCustomerGroup',
        'country' => 'getCountry',
        'city_code' => 'getCityCode',
        'sales_district' => 'getSalesDistrict',
        'region' => 'getRegion',
        'county' => 'getCounty',
        'credit_control_area' => 'getCreditControlArea',
        'customer_rebate_agreement' => 'getCustomerRebateAgreement',
        'sales_document_condition' => 'getSalesDocumentCondition',
        'overall_sd_process_status' => 'getOverallSdProcessStatus',
        'overall_billing_status' => 'getOverallBillingStatus',
        'accounting_posting_status' => 'getAccountingPostingStatus',
        'accounting_transfer_status' => 'getAccountingTransferStatus',
        'billing_issue_type' => 'getBillingIssueType',
        'invoice_list_status' => 'getInvoiceListStatus',
        'ovrl_itm_general_incompletion_sts' => 'getOvrlItmGeneralIncompletionSts',
        'overall_pricing_incompletion_sts' => 'getOverallPricingIncompletionSts',
        'invoice_clearing_status' => 'getInvoiceClearingStatus',
        'billing_document_list_type' => 'getBillingDocumentListType',
        'billing_document_list_date' => 'getBillingDocumentListDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('sd_document_category', $data ?? [], null);
        $this->setIfExists('billing_document_category', $data ?? [], null);
        $this->setIfExists('billing_document_type', $data ?? [], null);
        $this->setIfExists('creation_date', $data ?? [], null);
        $this->setIfExists('creation_time', $data ?? [], null);
        $this->setIfExists('last_change_date', $data ?? [], null);
        $this->setIfExists('last_change_date_time', $data ?? [], null);
        $this->setIfExists('logical_system', $data ?? [], null);
        $this->setIfExists('sales_organization', $data ?? [], null);
        $this->setIfExists('distribution_channel', $data ?? [], null);
        $this->setIfExists('division', $data ?? [], null);
        $this->setIfExists('billing_document_date', $data ?? [], null);
        $this->setIfExists('billing_document_is_cancelled', $data ?? [], null);
        $this->setIfExists('cancelled_billing_document', $data ?? [], null);
        $this->setIfExists('foreign_trade', $data ?? [], null);
        $this->setIfExists('is_export_delivery', $data ?? [], null);
        $this->setIfExists('billing_doc_combination_criteria', $data ?? [], null);
        $this->setIfExists('manual_invoice_maint_is_relevant', $data ?? [], null);
        $this->setIfExists('is_intrastat_reporting_relevant', $data ?? [], null);
        $this->setIfExists('is_intrastat_reporting_excluded', $data ?? [], null);
        $this->setIfExists('total_net_amount', $data ?? [], null);
        $this->setIfExists('transaction_currency', $data ?? [], null);
        $this->setIfExists('statistics_currency', $data ?? [], null);
        $this->setIfExists('tax_amount', $data ?? [], null);
        $this->setIfExists('total_gross_amount', $data ?? [], null);
        $this->setIfExists('customer_price_group', $data ?? [], null);
        $this->setIfExists('price_list_type', $data ?? [], null);
        $this->setIfExists('tax_departure_country', $data ?? [], null);
        $this->setIfExists('vat_registration', $data ?? [], null);
        $this->setIfExists('vat_registration_origin', $data ?? [], null);
        $this->setIfExists('vat_registration_country', $data ?? [], null);
        $this->setIfExists('hierarchy_type_pricing', $data ?? [], null);
        $this->setIfExists('customer_tax_classification1', $data ?? [], null);
        $this->setIfExists('customer_tax_classification2', $data ?? [], null);
        $this->setIfExists('customer_tax_classification3', $data ?? [], null);
        $this->setIfExists('customer_tax_classification4', $data ?? [], null);
        $this->setIfExists('customer_tax_classification5', $data ?? [], null);
        $this->setIfExists('customer_tax_classification6', $data ?? [], null);
        $this->setIfExists('customer_tax_classification7', $data ?? [], null);
        $this->setIfExists('customer_tax_classification8', $data ?? [], null);
        $this->setIfExists('customer_tax_classification9', $data ?? [], null);
        $this->setIfExists('is_eu_triangular_deal', $data ?? [], null);
        $this->setIfExists('sd_pricing_procedure', $data ?? [], null);
        $this->setIfExists('shipping_condition', $data ?? [], null);
        $this->setIfExists('incoterms_version', $data ?? [], null);
        $this->setIfExists('incoterms_classification', $data ?? [], null);
        $this->setIfExists('incoterms_transfer_location', $data ?? [], null);
        $this->setIfExists('incoterms_location1', $data ?? [], null);
        $this->setIfExists('incoterms_location2', $data ?? [], null);
        $this->setIfExists('payer_party', $data ?? [], null);
        $this->setIfExists('contract_account', $data ?? [], null);
        $this->setIfExists('customer_payment_terms', $data ?? [], null);
        $this->setIfExists('payment_method', $data ?? [], null);
        $this->setIfExists('payment_reference', $data ?? [], null);
        $this->setIfExists('fixed_value_date', $data ?? [], null);
        $this->setIfExists('additional_value_days', $data ?? [], null);
        $this->setIfExists('sepa_mandate', $data ?? [], null);
        $this->setIfExists('company_code', $data ?? [], null);
        $this->setIfExists('fiscal_year', $data ?? [], null);
        $this->setIfExists('accounting_document', $data ?? [], null);
        $this->setIfExists('customer_account_assignment_group', $data ?? [], null);
        $this->setIfExists('accounting_exchange_rate_is_set', $data ?? [], null);
        $this->setIfExists('abslt_accounting_exchange_rate', $data ?? [], null);
        $this->setIfExists('acctg_exchange_rate_is_indrct_qtan', $data ?? [], null);
        $this->setIfExists('exchange_rate_date', $data ?? [], null);
        $this->setIfExists('exchange_rate_type', $data ?? [], null);
        $this->setIfExists('document_reference_id', $data ?? [], null);
        $this->setIfExists('assignment_reference', $data ?? [], null);
        $this->setIfExists('dunning_area', $data ?? [], null);
        $this->setIfExists('dunning_blocking_reason', $data ?? [], null);
        $this->setIfExists('dunning_key', $data ?? [], null);
        $this->setIfExists('internal_financial_document', $data ?? [], null);
        $this->setIfExists('is_relevant_for_accrual', $data ?? [], null);
        $this->setIfExists('sold_to_party', $data ?? [], null);
        $this->setIfExists('partner_company', $data ?? [], null);
        $this->setIfExists('purchase_order_by_customer', $data ?? [], null);
        $this->setIfExists('customer_group', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('city_code', $data ?? [], null);
        $this->setIfExists('sales_district', $data ?? [], null);
        $this->setIfExists('region', $data ?? [], null);
        $this->setIfExists('county', $data ?? [], null);
        $this->setIfExists('credit_control_area', $data ?? [], null);
        $this->setIfExists('customer_rebate_agreement', $data ?? [], null);
        $this->setIfExists('sales_document_condition', $data ?? [], null);
        $this->setIfExists('overall_sd_process_status', $data ?? [], null);
        $this->setIfExists('overall_billing_status', $data ?? [], null);
        $this->setIfExists('accounting_posting_status', $data ?? [], null);
        $this->setIfExists('accounting_transfer_status', $data ?? [], null);
        $this->setIfExists('billing_issue_type', $data ?? [], null);
        $this->setIfExists('invoice_list_status', $data ?? [], null);
        $this->setIfExists('ovrl_itm_general_incompletion_sts', $data ?? [], null);
        $this->setIfExists('overall_pricing_incompletion_sts', $data ?? [], null);
        $this->setIfExists('invoice_clearing_status', $data ?? [], null);
        $this->setIfExists('billing_document_list_type', $data ?? [], null);
        $this->setIfExists('billing_document_list_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['sd_document_category']) && (mb_strlen($this->container['sd_document_category']) > 4)) {
            $invalidProperties[] = "invalid value for 'sd_document_category', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['billing_document_category']) && (mb_strlen($this->container['billing_document_category']) > 1)) {
            $invalidProperties[] = "invalid value for 'billing_document_category', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['billing_document_type']) && (mb_strlen($this->container['billing_document_type']) > 4)) {
            $invalidProperties[] = "invalid value for 'billing_document_type', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['logical_system']) && (mb_strlen($this->container['logical_system']) > 10)) {
            $invalidProperties[] = "invalid value for 'logical_system', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['sales_organization']) && (mb_strlen($this->container['sales_organization']) > 4)) {
            $invalidProperties[] = "invalid value for 'sales_organization', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['distribution_channel']) && (mb_strlen($this->container['distribution_channel']) > 2)) {
            $invalidProperties[] = "invalid value for 'distribution_channel', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['division']) && (mb_strlen($this->container['division']) > 2)) {
            $invalidProperties[] = "invalid value for 'division', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['cancelled_billing_document']) && (mb_strlen($this->container['cancelled_billing_document']) > 10)) {
            $invalidProperties[] = "invalid value for 'cancelled_billing_document', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['foreign_trade']) && (mb_strlen($this->container['foreign_trade']) > 10)) {
            $invalidProperties[] = "invalid value for 'foreign_trade', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['is_export_delivery']) && (mb_strlen($this->container['is_export_delivery']) > 1)) {
            $invalidProperties[] = "invalid value for 'is_export_delivery', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['billing_doc_combination_criteria']) && (mb_strlen($this->container['billing_doc_combination_criteria']) > 40)) {
            $invalidProperties[] = "invalid value for 'billing_doc_combination_criteria', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['transaction_currency']) && (mb_strlen($this->container['transaction_currency']) > 5)) {
            $invalidProperties[] = "invalid value for 'transaction_currency', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['statistics_currency']) && (mb_strlen($this->container['statistics_currency']) > 5)) {
            $invalidProperties[] = "invalid value for 'statistics_currency', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['customer_price_group']) && (mb_strlen($this->container['customer_price_group']) > 2)) {
            $invalidProperties[] = "invalid value for 'customer_price_group', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['price_list_type']) && (mb_strlen($this->container['price_list_type']) > 2)) {
            $invalidProperties[] = "invalid value for 'price_list_type', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['tax_departure_country']) && (mb_strlen($this->container['tax_departure_country']) > 3)) {
            $invalidProperties[] = "invalid value for 'tax_departure_country', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['vat_registration']) && (mb_strlen($this->container['vat_registration']) > 20)) {
            $invalidProperties[] = "invalid value for 'vat_registration', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['vat_registration_origin']) && (mb_strlen($this->container['vat_registration_origin']) > 1)) {
            $invalidProperties[] = "invalid value for 'vat_registration_origin', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['vat_registration_country']) && (mb_strlen($this->container['vat_registration_country']) > 3)) {
            $invalidProperties[] = "invalid value for 'vat_registration_country', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['hierarchy_type_pricing']) && (mb_strlen($this->container['hierarchy_type_pricing']) > 1)) {
            $invalidProperties[] = "invalid value for 'hierarchy_type_pricing', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['customer_tax_classification1']) && (mb_strlen($this->container['customer_tax_classification1']) > 1)) {
            $invalidProperties[] = "invalid value for 'customer_tax_classification1', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['customer_tax_classification2']) && (mb_strlen($this->container['customer_tax_classification2']) > 1)) {
            $invalidProperties[] = "invalid value for 'customer_tax_classification2', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['customer_tax_classification3']) && (mb_strlen($this->container['customer_tax_classification3']) > 1)) {
            $invalidProperties[] = "invalid value for 'customer_tax_classification3', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['customer_tax_classification4']) && (mb_strlen($this->container['customer_tax_classification4']) > 1)) {
            $invalidProperties[] = "invalid value for 'customer_tax_classification4', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['customer_tax_classification5']) && (mb_strlen($this->container['customer_tax_classification5']) > 1)) {
            $invalidProperties[] = "invalid value for 'customer_tax_classification5', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['customer_tax_classification6']) && (mb_strlen($this->container['customer_tax_classification6']) > 1)) {
            $invalidProperties[] = "invalid value for 'customer_tax_classification6', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['customer_tax_classification7']) && (mb_strlen($this->container['customer_tax_classification7']) > 1)) {
            $invalidProperties[] = "invalid value for 'customer_tax_classification7', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['customer_tax_classification8']) && (mb_strlen($this->container['customer_tax_classification8']) > 1)) {
            $invalidProperties[] = "invalid value for 'customer_tax_classification8', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['customer_tax_classification9']) && (mb_strlen($this->container['customer_tax_classification9']) > 1)) {
            $invalidProperties[] = "invalid value for 'customer_tax_classification9', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['sd_pricing_procedure']) && (mb_strlen($this->container['sd_pricing_procedure']) > 6)) {
            $invalidProperties[] = "invalid value for 'sd_pricing_procedure', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['shipping_condition']) && (mb_strlen($this->container['shipping_condition']) > 2)) {
            $invalidProperties[] = "invalid value for 'shipping_condition', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['incoterms_version']) && (mb_strlen($this->container['incoterms_version']) > 4)) {
            $invalidProperties[] = "invalid value for 'incoterms_version', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['incoterms_classification']) && (mb_strlen($this->container['incoterms_classification']) > 3)) {
            $invalidProperties[] = "invalid value for 'incoterms_classification', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['incoterms_transfer_location']) && (mb_strlen($this->container['incoterms_transfer_location']) > 28)) {
            $invalidProperties[] = "invalid value for 'incoterms_transfer_location', the character length must be smaller than or equal to 28.";
        }

        if (!is_null($this->container['incoterms_location1']) && (mb_strlen($this->container['incoterms_location1']) > 70)) {
            $invalidProperties[] = "invalid value for 'incoterms_location1', the character length must be smaller than or equal to 70.";
        }

        if (!is_null($this->container['incoterms_location2']) && (mb_strlen($this->container['incoterms_location2']) > 70)) {
            $invalidProperties[] = "invalid value for 'incoterms_location2', the character length must be smaller than or equal to 70.";
        }

        if (!is_null($this->container['payer_party']) && (mb_strlen($this->container['payer_party']) > 10)) {
            $invalidProperties[] = "invalid value for 'payer_party', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['contract_account']) && (mb_strlen($this->container['contract_account']) > 12)) {
            $invalidProperties[] = "invalid value for 'contract_account', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['customer_payment_terms']) && (mb_strlen($this->container['customer_payment_terms']) > 4)) {
            $invalidProperties[] = "invalid value for 'customer_payment_terms', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['payment_method']) && (mb_strlen($this->container['payment_method']) > 1)) {
            $invalidProperties[] = "invalid value for 'payment_method', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['payment_reference']) && (mb_strlen($this->container['payment_reference']) > 30)) {
            $invalidProperties[] = "invalid value for 'payment_reference', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['additional_value_days']) && (mb_strlen($this->container['additional_value_days']) > 2)) {
            $invalidProperties[] = "invalid value for 'additional_value_days', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['sepa_mandate']) && (mb_strlen($this->container['sepa_mandate']) > 35)) {
            $invalidProperties[] = "invalid value for 'sepa_mandate', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['company_code']) && (mb_strlen($this->container['company_code']) > 4)) {
            $invalidProperties[] = "invalid value for 'company_code', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['fiscal_year']) && (mb_strlen($this->container['fiscal_year']) > 4)) {
            $invalidProperties[] = "invalid value for 'fiscal_year', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['accounting_document']) && (mb_strlen($this->container['accounting_document']) > 10)) {
            $invalidProperties[] = "invalid value for 'accounting_document', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['customer_account_assignment_group']) && (mb_strlen($this->container['customer_account_assignment_group']) > 2)) {
            $invalidProperties[] = "invalid value for 'customer_account_assignment_group', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['exchange_rate_type']) && (mb_strlen($this->container['exchange_rate_type']) > 4)) {
            $invalidProperties[] = "invalid value for 'exchange_rate_type', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['document_reference_id']) && (mb_strlen($this->container['document_reference_id']) > 16)) {
            $invalidProperties[] = "invalid value for 'document_reference_id', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['assignment_reference']) && (mb_strlen($this->container['assignment_reference']) > 18)) {
            $invalidProperties[] = "invalid value for 'assignment_reference', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['dunning_area']) && (mb_strlen($this->container['dunning_area']) > 2)) {
            $invalidProperties[] = "invalid value for 'dunning_area', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['dunning_blocking_reason']) && (mb_strlen($this->container['dunning_blocking_reason']) > 1)) {
            $invalidProperties[] = "invalid value for 'dunning_blocking_reason', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['dunning_key']) && (mb_strlen($this->container['dunning_key']) > 1)) {
            $invalidProperties[] = "invalid value for 'dunning_key', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['internal_financial_document']) && (mb_strlen($this->container['internal_financial_document']) > 10)) {
            $invalidProperties[] = "invalid value for 'internal_financial_document', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['sold_to_party']) && (mb_strlen($this->container['sold_to_party']) > 10)) {
            $invalidProperties[] = "invalid value for 'sold_to_party', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['partner_company']) && (mb_strlen($this->container['partner_company']) > 6)) {
            $invalidProperties[] = "invalid value for 'partner_company', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['purchase_order_by_customer']) && (mb_strlen($this->container['purchase_order_by_customer']) > 35)) {
            $invalidProperties[] = "invalid value for 'purchase_order_by_customer', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['customer_group']) && (mb_strlen($this->container['customer_group']) > 2)) {
            $invalidProperties[] = "invalid value for 'customer_group', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['country']) && (mb_strlen($this->container['country']) > 3)) {
            $invalidProperties[] = "invalid value for 'country', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['city_code']) && (mb_strlen($this->container['city_code']) > 4)) {
            $invalidProperties[] = "invalid value for 'city_code', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['sales_district']) && (mb_strlen($this->container['sales_district']) > 6)) {
            $invalidProperties[] = "invalid value for 'sales_district', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['region']) && (mb_strlen($this->container['region']) > 3)) {
            $invalidProperties[] = "invalid value for 'region', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['county']) && (mb_strlen($this->container['county']) > 3)) {
            $invalidProperties[] = "invalid value for 'county', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['credit_control_area']) && (mb_strlen($this->container['credit_control_area']) > 4)) {
            $invalidProperties[] = "invalid value for 'credit_control_area', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['customer_rebate_agreement']) && (mb_strlen($this->container['customer_rebate_agreement']) > 10)) {
            $invalidProperties[] = "invalid value for 'customer_rebate_agreement', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['sales_document_condition']) && (mb_strlen($this->container['sales_document_condition']) > 10)) {
            $invalidProperties[] = "invalid value for 'sales_document_condition', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['overall_sd_process_status']) && (mb_strlen($this->container['overall_sd_process_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'overall_sd_process_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['overall_billing_status']) && (mb_strlen($this->container['overall_billing_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'overall_billing_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['accounting_posting_status']) && (mb_strlen($this->container['accounting_posting_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'accounting_posting_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['accounting_transfer_status']) && (mb_strlen($this->container['accounting_transfer_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'accounting_transfer_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['billing_issue_type']) && (mb_strlen($this->container['billing_issue_type']) > 1)) {
            $invalidProperties[] = "invalid value for 'billing_issue_type', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['invoice_list_status']) && (mb_strlen($this->container['invoice_list_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'invoice_list_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['ovrl_itm_general_incompletion_sts']) && (mb_strlen($this->container['ovrl_itm_general_incompletion_sts']) > 1)) {
            $invalidProperties[] = "invalid value for 'ovrl_itm_general_incompletion_sts', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['overall_pricing_incompletion_sts']) && (mb_strlen($this->container['overall_pricing_incompletion_sts']) > 1)) {
            $invalidProperties[] = "invalid value for 'overall_pricing_incompletion_sts', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['invoice_clearing_status']) && (mb_strlen($this->container['invoice_clearing_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'invoice_clearing_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['billing_document_list_type']) && (mb_strlen($this->container['billing_document_list_type']) > 4)) {
            $invalidProperties[] = "invalid value for 'billing_document_list_type', the character length must be smaller than or equal to 4.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sd_document_category
     *
     * @return string|null
     */
    public function getSdDocumentCategory()
    {
        return $this->container['sd_document_category'];
    }

    /**
     * Sets sd_document_category
     *
     * @param string|null $sd_document_category sd_document_category
     *
     * @return self
     */
    public function setSdDocumentCategory($sd_document_category)
    {
        if (is_null($sd_document_category)) {
            array_push($this->openAPINullablesSetToNull, 'sd_document_category');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sd_document_category', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sd_document_category) && (mb_strlen($sd_document_category) > 4)) {
            throw new \InvalidArgumentException('invalid length for $sd_document_category when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['sd_document_category'] = $sd_document_category;

        return $this;
    }

    /**
     * Gets billing_document_category
     *
     * @return string|null
     */
    public function getBillingDocumentCategory()
    {
        return $this->container['billing_document_category'];
    }

    /**
     * Sets billing_document_category
     *
     * @param string|null $billing_document_category billing_document_category
     *
     * @return self
     */
    public function setBillingDocumentCategory($billing_document_category)
    {
        if (is_null($billing_document_category)) {
            array_push($this->openAPINullablesSetToNull, 'billing_document_category');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_document_category', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($billing_document_category) && (mb_strlen($billing_document_category) > 1)) {
            throw new \InvalidArgumentException('invalid length for $billing_document_category when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['billing_document_category'] = $billing_document_category;

        return $this;
    }

    /**
     * Gets billing_document_type
     *
     * @return string|null
     */
    public function getBillingDocumentType()
    {
        return $this->container['billing_document_type'];
    }

    /**
     * Sets billing_document_type
     *
     * @param string|null $billing_document_type billing_document_type
     *
     * @return self
     */
    public function setBillingDocumentType($billing_document_type)
    {
        if (is_null($billing_document_type)) {
            array_push($this->openAPINullablesSetToNull, 'billing_document_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_document_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($billing_document_type) && (mb_strlen($billing_document_type) > 4)) {
            throw new \InvalidArgumentException('invalid length for $billing_document_type when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['billing_document_type'] = $billing_document_type;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return string|null
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param string|null $creation_date Record Creation Date
     *
     * @return self
     */
    public function setCreationDate($creation_date)
    {
        if (is_null($creation_date)) {
            array_push($this->openAPINullablesSetToNull, 'creation_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('creation_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets creation_time
     *
     * @return string|null
     */
    public function getCreationTime()
    {
        return $this->container['creation_time'];
    }

    /**
     * Sets creation_time
     *
     * @param string|null $creation_time Entry time
     *
     * @return self
     */
    public function setCreationTime($creation_time)
    {
        if (is_null($creation_time)) {
            array_push($this->openAPINullablesSetToNull, 'creation_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('creation_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['creation_time'] = $creation_time;

        return $this;
    }

    /**
     * Gets last_change_date
     *
     * @return string|null
     */
    public function getLastChangeDate()
    {
        return $this->container['last_change_date'];
    }

    /**
     * Sets last_change_date
     *
     * @param string|null $last_change_date Last Changed On
     *
     * @return self
     */
    public function setLastChangeDate($last_change_date)
    {
        if (is_null($last_change_date)) {
            array_push($this->openAPINullablesSetToNull, 'last_change_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_change_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_change_date'] = $last_change_date;

        return $this;
    }

    /**
     * Gets last_change_date_time
     *
     * @return string|null
     */
    public function getLastChangeDateTime()
    {
        return $this->container['last_change_date_time'];
    }

    /**
     * Sets last_change_date_time
     *
     * @param string|null $last_change_date_time UTC Time Stamp in Long Form (YYYYMMDDhhmmssmmmuuun)
     *
     * @return self
     */
    public function setLastChangeDateTime($last_change_date_time)
    {
        if (is_null($last_change_date_time)) {
            array_push($this->openAPINullablesSetToNull, 'last_change_date_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_change_date_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_change_date_time'] = $last_change_date_time;

        return $this;
    }

    /**
     * Gets logical_system
     *
     * @return string|null
     */
    public function getLogicalSystem()
    {
        return $this->container['logical_system'];
    }

    /**
     * Sets logical_system
     *
     * @param string|null $logical_system logical_system
     *
     * @return self
     */
    public function setLogicalSystem($logical_system)
    {
        if (is_null($logical_system)) {
            array_push($this->openAPINullablesSetToNull, 'logical_system');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('logical_system', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($logical_system) && (mb_strlen($logical_system) > 10)) {
            throw new \InvalidArgumentException('invalid length for $logical_system when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['logical_system'] = $logical_system;

        return $this;
    }

    /**
     * Gets sales_organization
     *
     * @return string|null
     */
    public function getSalesOrganization()
    {
        return $this->container['sales_organization'];
    }

    /**
     * Sets sales_organization
     *
     * @param string|null $sales_organization sales_organization
     *
     * @return self
     */
    public function setSalesOrganization($sales_organization)
    {
        if (is_null($sales_organization)) {
            array_push($this->openAPINullablesSetToNull, 'sales_organization');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_organization', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_organization) && (mb_strlen($sales_organization) > 4)) {
            throw new \InvalidArgumentException('invalid length for $sales_organization when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['sales_organization'] = $sales_organization;

        return $this;
    }

    /**
     * Gets distribution_channel
     *
     * @return string|null
     */
    public function getDistributionChannel()
    {
        return $this->container['distribution_channel'];
    }

    /**
     * Sets distribution_channel
     *
     * @param string|null $distribution_channel distribution_channel
     *
     * @return self
     */
    public function setDistributionChannel($distribution_channel)
    {
        if (is_null($distribution_channel)) {
            array_push($this->openAPINullablesSetToNull, 'distribution_channel');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('distribution_channel', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($distribution_channel) && (mb_strlen($distribution_channel) > 2)) {
            throw new \InvalidArgumentException('invalid length for $distribution_channel when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['distribution_channel'] = $distribution_channel;

        return $this;
    }

    /**
     * Gets division
     *
     * @return string|null
     */
    public function getDivision()
    {
        return $this->container['division'];
    }

    /**
     * Sets division
     *
     * @param string|null $division division
     *
     * @return self
     */
    public function setDivision($division)
    {
        if (is_null($division)) {
            array_push($this->openAPINullablesSetToNull, 'division');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('division', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($division) && (mb_strlen($division) > 2)) {
            throw new \InvalidArgumentException('invalid length for $division when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['division'] = $division;

        return $this;
    }

    /**
     * Gets billing_document_date
     *
     * @return string|null
     */
    public function getBillingDocumentDate()
    {
        return $this->container['billing_document_date'];
    }

    /**
     * Sets billing_document_date
     *
     * @param string|null $billing_document_date billing_document_date
     *
     * @return self
     */
    public function setBillingDocumentDate($billing_document_date)
    {
        if (is_null($billing_document_date)) {
            array_push($this->openAPINullablesSetToNull, 'billing_document_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_document_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['billing_document_date'] = $billing_document_date;

        return $this;
    }

    /**
     * Gets billing_document_is_cancelled
     *
     * @return bool|null
     */
    public function getBillingDocumentIsCancelled()
    {
        return $this->container['billing_document_is_cancelled'];
    }

    /**
     * Sets billing_document_is_cancelled
     *
     * @param bool|null $billing_document_is_cancelled Billing document is canceled
     *
     * @return self
     */
    public function setBillingDocumentIsCancelled($billing_document_is_cancelled)
    {
        if (is_null($billing_document_is_cancelled)) {
            array_push($this->openAPINullablesSetToNull, 'billing_document_is_cancelled');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_document_is_cancelled', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['billing_document_is_cancelled'] = $billing_document_is_cancelled;

        return $this;
    }

    /**
     * Gets cancelled_billing_document
     *
     * @return string|null
     */
    public function getCancelledBillingDocument()
    {
        return $this->container['cancelled_billing_document'];
    }

    /**
     * Sets cancelled_billing_document
     *
     * @param string|null $cancelled_billing_document Number of canceled billing document
     *
     * @return self
     */
    public function setCancelledBillingDocument($cancelled_billing_document)
    {
        if (is_null($cancelled_billing_document)) {
            array_push($this->openAPINullablesSetToNull, 'cancelled_billing_document');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cancelled_billing_document', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($cancelled_billing_document) && (mb_strlen($cancelled_billing_document) > 10)) {
            throw new \InvalidArgumentException('invalid length for $cancelled_billing_document when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['cancelled_billing_document'] = $cancelled_billing_document;

        return $this;
    }

    /**
     * Gets foreign_trade
     *
     * @return string|null
     */
    public function getForeignTrade()
    {
        return $this->container['foreign_trade'];
    }

    /**
     * Sets foreign_trade
     *
     * @param string|null $foreign_trade Number of foreign trade data in MM and SD documents
     *
     * @return self
     */
    public function setForeignTrade($foreign_trade)
    {
        if (is_null($foreign_trade)) {
            array_push($this->openAPINullablesSetToNull, 'foreign_trade');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('foreign_trade', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($foreign_trade) && (mb_strlen($foreign_trade) > 10)) {
            throw new \InvalidArgumentException('invalid length for $foreign_trade when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['foreign_trade'] = $foreign_trade;

        return $this;
    }

    /**
     * Gets is_export_delivery
     *
     * @return string|null
     */
    public function getIsExportDelivery()
    {
        return $this->container['is_export_delivery'];
    }

    /**
     * Sets is_export_delivery
     *
     * @param string|null $is_export_delivery Export indicator
     *
     * @return self
     */
    public function setIsExportDelivery($is_export_delivery)
    {
        if (is_null($is_export_delivery)) {
            array_push($this->openAPINullablesSetToNull, 'is_export_delivery');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_export_delivery', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($is_export_delivery) && (mb_strlen($is_export_delivery) > 1)) {
            throw new \InvalidArgumentException('invalid length for $is_export_delivery when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['is_export_delivery'] = $is_export_delivery;

        return $this;
    }

    /**
     * Gets billing_doc_combination_criteria
     *
     * @return string|null
     */
    public function getBillingDocCombinationCriteria()
    {
        return $this->container['billing_doc_combination_criteria'];
    }

    /**
     * Sets billing_doc_combination_criteria
     *
     * @param string|null $billing_doc_combination_criteria Combination criteria in the billing document
     *
     * @return self
     */
    public function setBillingDocCombinationCriteria($billing_doc_combination_criteria)
    {
        if (is_null($billing_doc_combination_criteria)) {
            array_push($this->openAPINullablesSetToNull, 'billing_doc_combination_criteria');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_doc_combination_criteria', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($billing_doc_combination_criteria) && (mb_strlen($billing_doc_combination_criteria) > 40)) {
            throw new \InvalidArgumentException('invalid length for $billing_doc_combination_criteria when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 40.');
        }

        $this->container['billing_doc_combination_criteria'] = $billing_doc_combination_criteria;

        return $this;
    }

    /**
     * Gets manual_invoice_maint_is_relevant
     *
     * @return bool|null
     */
    public function getManualInvoiceMaintIsRelevant()
    {
        return $this->container['manual_invoice_maint_is_relevant'];
    }

    /**
     * Sets manual_invoice_maint_is_relevant
     *
     * @param bool|null $manual_invoice_maint_is_relevant Manual Invoice Maintenance
     *
     * @return self
     */
    public function setManualInvoiceMaintIsRelevant($manual_invoice_maint_is_relevant)
    {
        if (is_null($manual_invoice_maint_is_relevant)) {
            array_push($this->openAPINullablesSetToNull, 'manual_invoice_maint_is_relevant');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('manual_invoice_maint_is_relevant', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['manual_invoice_maint_is_relevant'] = $manual_invoice_maint_is_relevant;

        return $this;
    }

    /**
     * Gets is_intrastat_reporting_relevant
     *
     * @return bool|null
     */
    public function getIsIntrastatReportingRelevant()
    {
        return $this->container['is_intrastat_reporting_relevant'];
    }

    /**
     * Sets is_intrastat_reporting_relevant
     *
     * @param bool|null $is_intrastat_reporting_relevant Relevant for Intrastat Reporting
     *
     * @return self
     */
    public function setIsIntrastatReportingRelevant($is_intrastat_reporting_relevant)
    {
        if (is_null($is_intrastat_reporting_relevant)) {
            array_push($this->openAPINullablesSetToNull, 'is_intrastat_reporting_relevant');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_intrastat_reporting_relevant', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_intrastat_reporting_relevant'] = $is_intrastat_reporting_relevant;

        return $this;
    }

    /**
     * Gets is_intrastat_reporting_excluded
     *
     * @return bool|null
     */
    public function getIsIntrastatReportingExcluded()
    {
        return $this->container['is_intrastat_reporting_excluded'];
    }

    /**
     * Sets is_intrastat_reporting_excluded
     *
     * @param bool|null $is_intrastat_reporting_excluded Exclude from Intrastat Reporting
     *
     * @return self
     */
    public function setIsIntrastatReportingExcluded($is_intrastat_reporting_excluded)
    {
        if (is_null($is_intrastat_reporting_excluded)) {
            array_push($this->openAPINullablesSetToNull, 'is_intrastat_reporting_excluded');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_intrastat_reporting_excluded', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_intrastat_reporting_excluded'] = $is_intrastat_reporting_excluded;

        return $this;
    }

    /**
     * Gets total_net_amount
     *
     * @return float|null
     */
    public function getTotalNetAmount()
    {
        return $this->container['total_net_amount'];
    }

    /**
     * Sets total_net_amount
     *
     * @param float|null $total_net_amount Net Value in Document Currency
     *
     * @return self
     */
    public function setTotalNetAmount($total_net_amount)
    {
        if (is_null($total_net_amount)) {
            array_push($this->openAPINullablesSetToNull, 'total_net_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_net_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['total_net_amount'] = $total_net_amount;

        return $this;
    }

    /**
     * Gets transaction_currency
     *
     * @return string|null
     */
    public function getTransactionCurrency()
    {
        return $this->container['transaction_currency'];
    }

    /**
     * Sets transaction_currency
     *
     * @param string|null $transaction_currency SD Document Currency
     *
     * @return self
     */
    public function setTransactionCurrency($transaction_currency)
    {
        if (is_null($transaction_currency)) {
            array_push($this->openAPINullablesSetToNull, 'transaction_currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transaction_currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($transaction_currency) && (mb_strlen($transaction_currency) > 5)) {
            throw new \InvalidArgumentException('invalid length for $transaction_currency when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 5.');
        }

        $this->container['transaction_currency'] = $transaction_currency;

        return $this;
    }

    /**
     * Gets statistics_currency
     *
     * @return string|null
     */
    public function getStatisticsCurrency()
    {
        return $this->container['statistics_currency'];
    }

    /**
     * Sets statistics_currency
     *
     * @param string|null $statistics_currency statistics_currency
     *
     * @return self
     */
    public function setStatisticsCurrency($statistics_currency)
    {
        if (is_null($statistics_currency)) {
            array_push($this->openAPINullablesSetToNull, 'statistics_currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('statistics_currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($statistics_currency) && (mb_strlen($statistics_currency) > 5)) {
            throw new \InvalidArgumentException('invalid length for $statistics_currency when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 5.');
        }

        $this->container['statistics_currency'] = $statistics_currency;

        return $this;
    }

    /**
     * Gets tax_amount
     *
     * @return float|null
     */
    public function getTaxAmount()
    {
        return $this->container['tax_amount'];
    }

    /**
     * Sets tax_amount
     *
     * @param float|null $tax_amount Tax Amount in Document Currency
     *
     * @return self
     */
    public function setTaxAmount($tax_amount)
    {
        if (is_null($tax_amount)) {
            array_push($this->openAPINullablesSetToNull, 'tax_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tax_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['tax_amount'] = $tax_amount;

        return $this;
    }

    /**
     * Gets total_gross_amount
     *
     * @return float|null
     */
    public function getTotalGrossAmount()
    {
        return $this->container['total_gross_amount'];
    }

    /**
     * Sets total_gross_amount
     *
     * @param float|null $total_gross_amount total_gross_amount
     *
     * @return self
     */
    public function setTotalGrossAmount($total_gross_amount)
    {
        if (is_null($total_gross_amount)) {
            array_push($this->openAPINullablesSetToNull, 'total_gross_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_gross_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['total_gross_amount'] = $total_gross_amount;

        return $this;
    }

    /**
     * Gets customer_price_group
     *
     * @return string|null
     */
    public function getCustomerPriceGroup()
    {
        return $this->container['customer_price_group'];
    }

    /**
     * Sets customer_price_group
     *
     * @param string|null $customer_price_group customer_price_group
     *
     * @return self
     */
    public function setCustomerPriceGroup($customer_price_group)
    {
        if (is_null($customer_price_group)) {
            array_push($this->openAPINullablesSetToNull, 'customer_price_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_price_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_price_group) && (mb_strlen($customer_price_group) > 2)) {
            throw new \InvalidArgumentException('invalid length for $customer_price_group when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['customer_price_group'] = $customer_price_group;

        return $this;
    }

    /**
     * Gets price_list_type
     *
     * @return string|null
     */
    public function getPriceListType()
    {
        return $this->container['price_list_type'];
    }

    /**
     * Sets price_list_type
     *
     * @param string|null $price_list_type price_list_type
     *
     * @return self
     */
    public function setPriceListType($price_list_type)
    {
        if (is_null($price_list_type)) {
            array_push($this->openAPINullablesSetToNull, 'price_list_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('price_list_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($price_list_type) && (mb_strlen($price_list_type) > 2)) {
            throw new \InvalidArgumentException('invalid length for $price_list_type when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['price_list_type'] = $price_list_type;

        return $this;
    }

    /**
     * Gets tax_departure_country
     *
     * @return string|null
     */
    public function getTaxDepartureCountry()
    {
        return $this->container['tax_departure_country'];
    }

    /**
     * Sets tax_departure_country
     *
     * @param string|null $tax_departure_country Tax Departure Country/Region
     *
     * @return self
     */
    public function setTaxDepartureCountry($tax_departure_country)
    {
        if (is_null($tax_departure_country)) {
            array_push($this->openAPINullablesSetToNull, 'tax_departure_country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tax_departure_country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tax_departure_country) && (mb_strlen($tax_departure_country) > 3)) {
            throw new \InvalidArgumentException('invalid length for $tax_departure_country when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['tax_departure_country'] = $tax_departure_country;

        return $this;
    }

    /**
     * Gets vat_registration
     *
     * @return string|null
     */
    public function getVatRegistration()
    {
        return $this->container['vat_registration'];
    }

    /**
     * Sets vat_registration
     *
     * @param string|null $vat_registration VAT Registration Number
     *
     * @return self
     */
    public function setVatRegistration($vat_registration)
    {
        if (is_null($vat_registration)) {
            array_push($this->openAPINullablesSetToNull, 'vat_registration');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vat_registration', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($vat_registration) && (mb_strlen($vat_registration) > 20)) {
            throw new \InvalidArgumentException('invalid length for $vat_registration when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 20.');
        }

        $this->container['vat_registration'] = $vat_registration;

        return $this;
    }

    /**
     * Gets vat_registration_origin
     *
     * @return string|null
     */
    public function getVatRegistrationOrigin()
    {
        return $this->container['vat_registration_origin'];
    }

    /**
     * Sets vat_registration_origin
     *
     * @param string|null $vat_registration_origin Origin of Sales Tax Number
     *
     * @return self
     */
    public function setVatRegistrationOrigin($vat_registration_origin)
    {
        if (is_null($vat_registration_origin)) {
            array_push($this->openAPINullablesSetToNull, 'vat_registration_origin');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vat_registration_origin', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($vat_registration_origin) && (mb_strlen($vat_registration_origin) > 1)) {
            throw new \InvalidArgumentException('invalid length for $vat_registration_origin when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['vat_registration_origin'] = $vat_registration_origin;

        return $this;
    }

    /**
     * Gets vat_registration_country
     *
     * @return string|null
     */
    public function getVatRegistrationCountry()
    {
        return $this->container['vat_registration_country'];
    }

    /**
     * Sets vat_registration_country
     *
     * @param string|null $vat_registration_country Country/Region of Sales Tax ID Number
     *
     * @return self
     */
    public function setVatRegistrationCountry($vat_registration_country)
    {
        if (is_null($vat_registration_country)) {
            array_push($this->openAPINullablesSetToNull, 'vat_registration_country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vat_registration_country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($vat_registration_country) && (mb_strlen($vat_registration_country) > 3)) {
            throw new \InvalidArgumentException('invalid length for $vat_registration_country when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['vat_registration_country'] = $vat_registration_country;

        return $this;
    }

    /**
     * Gets hierarchy_type_pricing
     *
     * @return string|null
     */
    public function getHierarchyTypePricing()
    {
        return $this->container['hierarchy_type_pricing'];
    }

    /**
     * Sets hierarchy_type_pricing
     *
     * @param string|null $hierarchy_type_pricing Hierarchy type for pricing
     *
     * @return self
     */
    public function setHierarchyTypePricing($hierarchy_type_pricing)
    {
        if (is_null($hierarchy_type_pricing)) {
            array_push($this->openAPINullablesSetToNull, 'hierarchy_type_pricing');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hierarchy_type_pricing', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($hierarchy_type_pricing) && (mb_strlen($hierarchy_type_pricing) > 1)) {
            throw new \InvalidArgumentException('invalid length for $hierarchy_type_pricing when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['hierarchy_type_pricing'] = $hierarchy_type_pricing;

        return $this;
    }

    /**
     * Gets customer_tax_classification1
     *
     * @return string|null
     */
    public function getCustomerTaxClassification1()
    {
        return $this->container['customer_tax_classification1'];
    }

    /**
     * Sets customer_tax_classification1
     *
     * @param string|null $customer_tax_classification1 Tax Classification 1 for Customer
     *
     * @return self
     */
    public function setCustomerTaxClassification1($customer_tax_classification1)
    {
        if (is_null($customer_tax_classification1)) {
            array_push($this->openAPINullablesSetToNull, 'customer_tax_classification1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_tax_classification1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_tax_classification1) && (mb_strlen($customer_tax_classification1) > 1)) {
            throw new \InvalidArgumentException('invalid length for $customer_tax_classification1 when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['customer_tax_classification1'] = $customer_tax_classification1;

        return $this;
    }

    /**
     * Gets customer_tax_classification2
     *
     * @return string|null
     */
    public function getCustomerTaxClassification2()
    {
        return $this->container['customer_tax_classification2'];
    }

    /**
     * Sets customer_tax_classification2
     *
     * @param string|null $customer_tax_classification2 Tax Classification 2 for Customer
     *
     * @return self
     */
    public function setCustomerTaxClassification2($customer_tax_classification2)
    {
        if (is_null($customer_tax_classification2)) {
            array_push($this->openAPINullablesSetToNull, 'customer_tax_classification2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_tax_classification2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_tax_classification2) && (mb_strlen($customer_tax_classification2) > 1)) {
            throw new \InvalidArgumentException('invalid length for $customer_tax_classification2 when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['customer_tax_classification2'] = $customer_tax_classification2;

        return $this;
    }

    /**
     * Gets customer_tax_classification3
     *
     * @return string|null
     */
    public function getCustomerTaxClassification3()
    {
        return $this->container['customer_tax_classification3'];
    }

    /**
     * Sets customer_tax_classification3
     *
     * @param string|null $customer_tax_classification3 Tax Classification 3 for Customer
     *
     * @return self
     */
    public function setCustomerTaxClassification3($customer_tax_classification3)
    {
        if (is_null($customer_tax_classification3)) {
            array_push($this->openAPINullablesSetToNull, 'customer_tax_classification3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_tax_classification3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_tax_classification3) && (mb_strlen($customer_tax_classification3) > 1)) {
            throw new \InvalidArgumentException('invalid length for $customer_tax_classification3 when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['customer_tax_classification3'] = $customer_tax_classification3;

        return $this;
    }

    /**
     * Gets customer_tax_classification4
     *
     * @return string|null
     */
    public function getCustomerTaxClassification4()
    {
        return $this->container['customer_tax_classification4'];
    }

    /**
     * Sets customer_tax_classification4
     *
     * @param string|null $customer_tax_classification4 Tax Classification 4 for Customer
     *
     * @return self
     */
    public function setCustomerTaxClassification4($customer_tax_classification4)
    {
        if (is_null($customer_tax_classification4)) {
            array_push($this->openAPINullablesSetToNull, 'customer_tax_classification4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_tax_classification4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_tax_classification4) && (mb_strlen($customer_tax_classification4) > 1)) {
            throw new \InvalidArgumentException('invalid length for $customer_tax_classification4 when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['customer_tax_classification4'] = $customer_tax_classification4;

        return $this;
    }

    /**
     * Gets customer_tax_classification5
     *
     * @return string|null
     */
    public function getCustomerTaxClassification5()
    {
        return $this->container['customer_tax_classification5'];
    }

    /**
     * Sets customer_tax_classification5
     *
     * @param string|null $customer_tax_classification5 Tax Classification 5 for Customer
     *
     * @return self
     */
    public function setCustomerTaxClassification5($customer_tax_classification5)
    {
        if (is_null($customer_tax_classification5)) {
            array_push($this->openAPINullablesSetToNull, 'customer_tax_classification5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_tax_classification5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_tax_classification5) && (mb_strlen($customer_tax_classification5) > 1)) {
            throw new \InvalidArgumentException('invalid length for $customer_tax_classification5 when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['customer_tax_classification5'] = $customer_tax_classification5;

        return $this;
    }

    /**
     * Gets customer_tax_classification6
     *
     * @return string|null
     */
    public function getCustomerTaxClassification6()
    {
        return $this->container['customer_tax_classification6'];
    }

    /**
     * Sets customer_tax_classification6
     *
     * @param string|null $customer_tax_classification6 Tax Classification 6 for Customer
     *
     * @return self
     */
    public function setCustomerTaxClassification6($customer_tax_classification6)
    {
        if (is_null($customer_tax_classification6)) {
            array_push($this->openAPINullablesSetToNull, 'customer_tax_classification6');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_tax_classification6', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_tax_classification6) && (mb_strlen($customer_tax_classification6) > 1)) {
            throw new \InvalidArgumentException('invalid length for $customer_tax_classification6 when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['customer_tax_classification6'] = $customer_tax_classification6;

        return $this;
    }

    /**
     * Gets customer_tax_classification7
     *
     * @return string|null
     */
    public function getCustomerTaxClassification7()
    {
        return $this->container['customer_tax_classification7'];
    }

    /**
     * Sets customer_tax_classification7
     *
     * @param string|null $customer_tax_classification7 Tax Classification 7 for Customer
     *
     * @return self
     */
    public function setCustomerTaxClassification7($customer_tax_classification7)
    {
        if (is_null($customer_tax_classification7)) {
            array_push($this->openAPINullablesSetToNull, 'customer_tax_classification7');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_tax_classification7', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_tax_classification7) && (mb_strlen($customer_tax_classification7) > 1)) {
            throw new \InvalidArgumentException('invalid length for $customer_tax_classification7 when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['customer_tax_classification7'] = $customer_tax_classification7;

        return $this;
    }

    /**
     * Gets customer_tax_classification8
     *
     * @return string|null
     */
    public function getCustomerTaxClassification8()
    {
        return $this->container['customer_tax_classification8'];
    }

    /**
     * Sets customer_tax_classification8
     *
     * @param string|null $customer_tax_classification8 Tax Classification 8 for Customer
     *
     * @return self
     */
    public function setCustomerTaxClassification8($customer_tax_classification8)
    {
        if (is_null($customer_tax_classification8)) {
            array_push($this->openAPINullablesSetToNull, 'customer_tax_classification8');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_tax_classification8', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_tax_classification8) && (mb_strlen($customer_tax_classification8) > 1)) {
            throw new \InvalidArgumentException('invalid length for $customer_tax_classification8 when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['customer_tax_classification8'] = $customer_tax_classification8;

        return $this;
    }

    /**
     * Gets customer_tax_classification9
     *
     * @return string|null
     */
    public function getCustomerTaxClassification9()
    {
        return $this->container['customer_tax_classification9'];
    }

    /**
     * Sets customer_tax_classification9
     *
     * @param string|null $customer_tax_classification9 Tax Classification 9 for Customer
     *
     * @return self
     */
    public function setCustomerTaxClassification9($customer_tax_classification9)
    {
        if (is_null($customer_tax_classification9)) {
            array_push($this->openAPINullablesSetToNull, 'customer_tax_classification9');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_tax_classification9', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_tax_classification9) && (mb_strlen($customer_tax_classification9) > 1)) {
            throw new \InvalidArgumentException('invalid length for $customer_tax_classification9 when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['customer_tax_classification9'] = $customer_tax_classification9;

        return $this;
    }

    /**
     * Gets is_eu_triangular_deal
     *
     * @return bool|null
     */
    public function getIsEuTriangularDeal()
    {
        return $this->container['is_eu_triangular_deal'];
    }

    /**
     * Sets is_eu_triangular_deal
     *
     * @param bool|null $is_eu_triangular_deal Indicator: Triangular Deal Within the EU
     *
     * @return self
     */
    public function setIsEuTriangularDeal($is_eu_triangular_deal)
    {
        if (is_null($is_eu_triangular_deal)) {
            array_push($this->openAPINullablesSetToNull, 'is_eu_triangular_deal');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_eu_triangular_deal', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_eu_triangular_deal'] = $is_eu_triangular_deal;

        return $this;
    }

    /**
     * Gets sd_pricing_procedure
     *
     * @return string|null
     */
    public function getSdPricingProcedure()
    {
        return $this->container['sd_pricing_procedure'];
    }

    /**
     * Sets sd_pricing_procedure
     *
     * @param string|null $sd_pricing_procedure Pricing Procedure in Pricing
     *
     * @return self
     */
    public function setSdPricingProcedure($sd_pricing_procedure)
    {
        if (is_null($sd_pricing_procedure)) {
            array_push($this->openAPINullablesSetToNull, 'sd_pricing_procedure');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sd_pricing_procedure', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sd_pricing_procedure) && (mb_strlen($sd_pricing_procedure) > 6)) {
            throw new \InvalidArgumentException('invalid length for $sd_pricing_procedure when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 6.');
        }

        $this->container['sd_pricing_procedure'] = $sd_pricing_procedure;

        return $this;
    }

    /**
     * Gets shipping_condition
     *
     * @return string|null
     */
    public function getShippingCondition()
    {
        return $this->container['shipping_condition'];
    }

    /**
     * Sets shipping_condition
     *
     * @param string|null $shipping_condition shipping_condition
     *
     * @return self
     */
    public function setShippingCondition($shipping_condition)
    {
        if (is_null($shipping_condition)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_condition');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_condition', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($shipping_condition) && (mb_strlen($shipping_condition) > 2)) {
            throw new \InvalidArgumentException('invalid length for $shipping_condition when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['shipping_condition'] = $shipping_condition;

        return $this;
    }

    /**
     * Gets incoterms_version
     *
     * @return string|null
     */
    public function getIncotermsVersion()
    {
        return $this->container['incoterms_version'];
    }

    /**
     * Sets incoterms_version
     *
     * @param string|null $incoterms_version incoterms_version
     *
     * @return self
     */
    public function setIncotermsVersion($incoterms_version)
    {
        if (is_null($incoterms_version)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_version');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_version', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($incoterms_version) && (mb_strlen($incoterms_version) > 4)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_version when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['incoterms_version'] = $incoterms_version;

        return $this;
    }

    /**
     * Gets incoterms_classification
     *
     * @return string|null
     */
    public function getIncotermsClassification()
    {
        return $this->container['incoterms_classification'];
    }

    /**
     * Sets incoterms_classification
     *
     * @param string|null $incoterms_classification Incoterms (Part 1)
     *
     * @return self
     */
    public function setIncotermsClassification($incoterms_classification)
    {
        if (is_null($incoterms_classification)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_classification');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_classification', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($incoterms_classification) && (mb_strlen($incoterms_classification) > 3)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_classification when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['incoterms_classification'] = $incoterms_classification;

        return $this;
    }

    /**
     * Gets incoterms_transfer_location
     *
     * @return string|null
     */
    public function getIncotermsTransferLocation()
    {
        return $this->container['incoterms_transfer_location'];
    }

    /**
     * Sets incoterms_transfer_location
     *
     * @param string|null $incoterms_transfer_location incoterms_transfer_location
     *
     * @return self
     */
    public function setIncotermsTransferLocation($incoterms_transfer_location)
    {
        if (is_null($incoterms_transfer_location)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_transfer_location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_transfer_location', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($incoterms_transfer_location) && (mb_strlen($incoterms_transfer_location) > 28)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_transfer_location when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 28.');
        }

        $this->container['incoterms_transfer_location'] = $incoterms_transfer_location;

        return $this;
    }

    /**
     * Gets incoterms_location1
     *
     * @return string|null
     */
    public function getIncotermsLocation1()
    {
        return $this->container['incoterms_location1'];
    }

    /**
     * Sets incoterms_location1
     *
     * @param string|null $incoterms_location1 incoterms_location1
     *
     * @return self
     */
    public function setIncotermsLocation1($incoterms_location1)
    {
        if (is_null($incoterms_location1)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_location1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_location1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($incoterms_location1) && (mb_strlen($incoterms_location1) > 70)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_location1 when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 70.');
        }

        $this->container['incoterms_location1'] = $incoterms_location1;

        return $this;
    }

    /**
     * Gets incoterms_location2
     *
     * @return string|null
     */
    public function getIncotermsLocation2()
    {
        return $this->container['incoterms_location2'];
    }

    /**
     * Sets incoterms_location2
     *
     * @param string|null $incoterms_location2 incoterms_location2
     *
     * @return self
     */
    public function setIncotermsLocation2($incoterms_location2)
    {
        if (is_null($incoterms_location2)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_location2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_location2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($incoterms_location2) && (mb_strlen($incoterms_location2) > 70)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_location2 when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 70.');
        }

        $this->container['incoterms_location2'] = $incoterms_location2;

        return $this;
    }

    /**
     * Gets payer_party
     *
     * @return string|null
     */
    public function getPayerParty()
    {
        return $this->container['payer_party'];
    }

    /**
     * Sets payer_party
     *
     * @param string|null $payer_party payer_party
     *
     * @return self
     */
    public function setPayerParty($payer_party)
    {
        if (is_null($payer_party)) {
            array_push($this->openAPINullablesSetToNull, 'payer_party');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payer_party', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($payer_party) && (mb_strlen($payer_party) > 10)) {
            throw new \InvalidArgumentException('invalid length for $payer_party when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['payer_party'] = $payer_party;

        return $this;
    }

    /**
     * Gets contract_account
     *
     * @return string|null
     */
    public function getContractAccount()
    {
        return $this->container['contract_account'];
    }

    /**
     * Sets contract_account
     *
     * @param string|null $contract_account Contract Account Number
     *
     * @return self
     */
    public function setContractAccount($contract_account)
    {
        if (is_null($contract_account)) {
            array_push($this->openAPINullablesSetToNull, 'contract_account');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contract_account', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($contract_account) && (mb_strlen($contract_account) > 12)) {
            throw new \InvalidArgumentException('invalid length for $contract_account when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 12.');
        }

        $this->container['contract_account'] = $contract_account;

        return $this;
    }

    /**
     * Gets customer_payment_terms
     *
     * @return string|null
     */
    public function getCustomerPaymentTerms()
    {
        return $this->container['customer_payment_terms'];
    }

    /**
     * Sets customer_payment_terms
     *
     * @param string|null $customer_payment_terms Key for Terms of Payment
     *
     * @return self
     */
    public function setCustomerPaymentTerms($customer_payment_terms)
    {
        if (is_null($customer_payment_terms)) {
            array_push($this->openAPINullablesSetToNull, 'customer_payment_terms');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_payment_terms', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_payment_terms) && (mb_strlen($customer_payment_terms) > 4)) {
            throw new \InvalidArgumentException('invalid length for $customer_payment_terms when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['customer_payment_terms'] = $customer_payment_terms;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return string|null
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param string|null $payment_method payment_method
     *
     * @return self
     */
    public function setPaymentMethod($payment_method)
    {
        if (is_null($payment_method)) {
            array_push($this->openAPINullablesSetToNull, 'payment_method');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_method', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($payment_method) && (mb_strlen($payment_method) > 1)) {
            throw new \InvalidArgumentException('invalid length for $payment_method when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets payment_reference
     *
     * @return string|null
     */
    public function getPaymentReference()
    {
        return $this->container['payment_reference'];
    }

    /**
     * Sets payment_reference
     *
     * @param string|null $payment_reference payment_reference
     *
     * @return self
     */
    public function setPaymentReference($payment_reference)
    {
        if (is_null($payment_reference)) {
            array_push($this->openAPINullablesSetToNull, 'payment_reference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_reference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($payment_reference) && (mb_strlen($payment_reference) > 30)) {
            throw new \InvalidArgumentException('invalid length for $payment_reference when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 30.');
        }

        $this->container['payment_reference'] = $payment_reference;

        return $this;
    }

    /**
     * Gets fixed_value_date
     *
     * @return string|null
     */
    public function getFixedValueDate()
    {
        return $this->container['fixed_value_date'];
    }

    /**
     * Sets fixed_value_date
     *
     * @param string|null $fixed_value_date fixed_value_date
     *
     * @return self
     */
    public function setFixedValueDate($fixed_value_date)
    {
        if (is_null($fixed_value_date)) {
            array_push($this->openAPINullablesSetToNull, 'fixed_value_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fixed_value_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fixed_value_date'] = $fixed_value_date;

        return $this;
    }

    /**
     * Gets additional_value_days
     *
     * @return string|null
     */
    public function getAdditionalValueDays()
    {
        return $this->container['additional_value_days'];
    }

    /**
     * Sets additional_value_days
     *
     * @param string|null $additional_value_days Additional Value Days
     *
     * @return self
     */
    public function setAdditionalValueDays($additional_value_days)
    {
        if (is_null($additional_value_days)) {
            array_push($this->openAPINullablesSetToNull, 'additional_value_days');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_value_days', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($additional_value_days) && (mb_strlen($additional_value_days) > 2)) {
            throw new \InvalidArgumentException('invalid length for $additional_value_days when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['additional_value_days'] = $additional_value_days;

        return $this;
    }

    /**
     * Gets sepa_mandate
     *
     * @return string|null
     */
    public function getSepaMandate()
    {
        return $this->container['sepa_mandate'];
    }

    /**
     * Sets sepa_mandate
     *
     * @param string|null $sepa_mandate Unique Reference to Mandate for each Payee
     *
     * @return self
     */
    public function setSepaMandate($sepa_mandate)
    {
        if (is_null($sepa_mandate)) {
            array_push($this->openAPINullablesSetToNull, 'sepa_mandate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sepa_mandate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sepa_mandate) && (mb_strlen($sepa_mandate) > 35)) {
            throw new \InvalidArgumentException('invalid length for $sepa_mandate when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 35.');
        }

        $this->container['sepa_mandate'] = $sepa_mandate;

        return $this;
    }

    /**
     * Gets company_code
     *
     * @return string|null
     */
    public function getCompanyCode()
    {
        return $this->container['company_code'];
    }

    /**
     * Sets company_code
     *
     * @param string|null $company_code company_code
     *
     * @return self
     */
    public function setCompanyCode($company_code)
    {
        if (is_null($company_code)) {
            array_push($this->openAPINullablesSetToNull, 'company_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('company_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($company_code) && (mb_strlen($company_code) > 4)) {
            throw new \InvalidArgumentException('invalid length for $company_code when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['company_code'] = $company_code;

        return $this;
    }

    /**
     * Gets fiscal_year
     *
     * @return string|null
     */
    public function getFiscalYear()
    {
        return $this->container['fiscal_year'];
    }

    /**
     * Sets fiscal_year
     *
     * @param string|null $fiscal_year fiscal_year
     *
     * @return self
     */
    public function setFiscalYear($fiscal_year)
    {
        if (is_null($fiscal_year)) {
            array_push($this->openAPINullablesSetToNull, 'fiscal_year');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fiscal_year', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($fiscal_year) && (mb_strlen($fiscal_year) > 4)) {
            throw new \InvalidArgumentException('invalid length for $fiscal_year when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['fiscal_year'] = $fiscal_year;

        return $this;
    }

    /**
     * Gets accounting_document
     *
     * @return string|null
     */
    public function getAccountingDocument()
    {
        return $this->container['accounting_document'];
    }

    /**
     * Sets accounting_document
     *
     * @param string|null $accounting_document Document Number of an Accounting Document
     *
     * @return self
     */
    public function setAccountingDocument($accounting_document)
    {
        if (is_null($accounting_document)) {
            array_push($this->openAPINullablesSetToNull, 'accounting_document');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('accounting_document', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($accounting_document) && (mb_strlen($accounting_document) > 10)) {
            throw new \InvalidArgumentException('invalid length for $accounting_document when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['accounting_document'] = $accounting_document;

        return $this;
    }

    /**
     * Gets customer_account_assignment_group
     *
     * @return string|null
     */
    public function getCustomerAccountAssignmentGroup()
    {
        return $this->container['customer_account_assignment_group'];
    }

    /**
     * Sets customer_account_assignment_group
     *
     * @param string|null $customer_account_assignment_group Account Assignment Group for Customer
     *
     * @return self
     */
    public function setCustomerAccountAssignmentGroup($customer_account_assignment_group)
    {
        if (is_null($customer_account_assignment_group)) {
            array_push($this->openAPINullablesSetToNull, 'customer_account_assignment_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_account_assignment_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_account_assignment_group) && (mb_strlen($customer_account_assignment_group) > 2)) {
            throw new \InvalidArgumentException('invalid length for $customer_account_assignment_group when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['customer_account_assignment_group'] = $customer_account_assignment_group;

        return $this;
    }

    /**
     * Gets accounting_exchange_rate_is_set
     *
     * @return bool|null
     */
    public function getAccountingExchangeRateIsSet()
    {
        return $this->container['accounting_exchange_rate_is_set'];
    }

    /**
     * Sets accounting_exchange_rate_is_set
     *
     * @param bool|null $accounting_exchange_rate_is_set Exchange Rate Setting
     *
     * @return self
     */
    public function setAccountingExchangeRateIsSet($accounting_exchange_rate_is_set)
    {
        if (is_null($accounting_exchange_rate_is_set)) {
            array_push($this->openAPINullablesSetToNull, 'accounting_exchange_rate_is_set');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('accounting_exchange_rate_is_set', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['accounting_exchange_rate_is_set'] = $accounting_exchange_rate_is_set;

        return $this;
    }

    /**
     * Gets abslt_accounting_exchange_rate
     *
     * @return float|null
     */
    public function getAbsltAccountingExchangeRate()
    {
        return $this->container['abslt_accounting_exchange_rate'];
    }

    /**
     * Sets abslt_accounting_exchange_rate
     *
     * @param float|null $abslt_accounting_exchange_rate Absolute exchange rate for FI postings
     *
     * @return self
     */
    public function setAbsltAccountingExchangeRate($abslt_accounting_exchange_rate)
    {
        if (is_null($abslt_accounting_exchange_rate)) {
            array_push($this->openAPINullablesSetToNull, 'abslt_accounting_exchange_rate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('abslt_accounting_exchange_rate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['abslt_accounting_exchange_rate'] = $abslt_accounting_exchange_rate;

        return $this;
    }

    /**
     * Gets acctg_exchange_rate_is_indrct_qtan
     *
     * @return bool|null
     */
    public function getAcctgExchangeRateIsIndrctQtan()
    {
        return $this->container['acctg_exchange_rate_is_indrct_qtan'];
    }

    /**
     * Sets acctg_exchange_rate_is_indrct_qtan
     *
     * @param bool|null $acctg_exchange_rate_is_indrct_qtan Accounting exchange rate quotation is indirect
     *
     * @return self
     */
    public function setAcctgExchangeRateIsIndrctQtan($acctg_exchange_rate_is_indrct_qtan)
    {
        if (is_null($acctg_exchange_rate_is_indrct_qtan)) {
            array_push($this->openAPINullablesSetToNull, 'acctg_exchange_rate_is_indrct_qtan');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('acctg_exchange_rate_is_indrct_qtan', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['acctg_exchange_rate_is_indrct_qtan'] = $acctg_exchange_rate_is_indrct_qtan;

        return $this;
    }

    /**
     * Gets exchange_rate_date
     *
     * @return string|null
     */
    public function getExchangeRateDate()
    {
        return $this->container['exchange_rate_date'];
    }

    /**
     * Sets exchange_rate_date
     *
     * @param string|null $exchange_rate_date exchange_rate_date
     *
     * @return self
     */
    public function setExchangeRateDate($exchange_rate_date)
    {
        if (is_null($exchange_rate_date)) {
            array_push($this->openAPINullablesSetToNull, 'exchange_rate_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('exchange_rate_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['exchange_rate_date'] = $exchange_rate_date;

        return $this;
    }

    /**
     * Gets exchange_rate_type
     *
     * @return string|null
     */
    public function getExchangeRateType()
    {
        return $this->container['exchange_rate_type'];
    }

    /**
     * Sets exchange_rate_type
     *
     * @param string|null $exchange_rate_type exchange_rate_type
     *
     * @return self
     */
    public function setExchangeRateType($exchange_rate_type)
    {
        if (is_null($exchange_rate_type)) {
            array_push($this->openAPINullablesSetToNull, 'exchange_rate_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('exchange_rate_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($exchange_rate_type) && (mb_strlen($exchange_rate_type) > 4)) {
            throw new \InvalidArgumentException('invalid length for $exchange_rate_type when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['exchange_rate_type'] = $exchange_rate_type;

        return $this;
    }

    /**
     * Gets document_reference_id
     *
     * @return string|null
     */
    public function getDocumentReferenceId()
    {
        return $this->container['document_reference_id'];
    }

    /**
     * Sets document_reference_id
     *
     * @param string|null $document_reference_id Reference Document Number
     *
     * @return self
     */
    public function setDocumentReferenceId($document_reference_id)
    {
        if (is_null($document_reference_id)) {
            array_push($this->openAPINullablesSetToNull, 'document_reference_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('document_reference_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($document_reference_id) && (mb_strlen($document_reference_id) > 16)) {
            throw new \InvalidArgumentException('invalid length for $document_reference_id when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 16.');
        }

        $this->container['document_reference_id'] = $document_reference_id;

        return $this;
    }

    /**
     * Gets assignment_reference
     *
     * @return string|null
     */
    public function getAssignmentReference()
    {
        return $this->container['assignment_reference'];
    }

    /**
     * Sets assignment_reference
     *
     * @param string|null $assignment_reference Assignment Number
     *
     * @return self
     */
    public function setAssignmentReference($assignment_reference)
    {
        if (is_null($assignment_reference)) {
            array_push($this->openAPINullablesSetToNull, 'assignment_reference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('assignment_reference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($assignment_reference) && (mb_strlen($assignment_reference) > 18)) {
            throw new \InvalidArgumentException('invalid length for $assignment_reference when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 18.');
        }

        $this->container['assignment_reference'] = $assignment_reference;

        return $this;
    }

    /**
     * Gets dunning_area
     *
     * @return string|null
     */
    public function getDunningArea()
    {
        return $this->container['dunning_area'];
    }

    /**
     * Sets dunning_area
     *
     * @param string|null $dunning_area dunning_area
     *
     * @return self
     */
    public function setDunningArea($dunning_area)
    {
        if (is_null($dunning_area)) {
            array_push($this->openAPINullablesSetToNull, 'dunning_area');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dunning_area', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($dunning_area) && (mb_strlen($dunning_area) > 2)) {
            throw new \InvalidArgumentException('invalid length for $dunning_area when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['dunning_area'] = $dunning_area;

        return $this;
    }

    /**
     * Gets dunning_blocking_reason
     *
     * @return string|null
     */
    public function getDunningBlockingReason()
    {
        return $this->container['dunning_blocking_reason'];
    }

    /**
     * Sets dunning_blocking_reason
     *
     * @param string|null $dunning_blocking_reason dunning_blocking_reason
     *
     * @return self
     */
    public function setDunningBlockingReason($dunning_blocking_reason)
    {
        if (is_null($dunning_blocking_reason)) {
            array_push($this->openAPINullablesSetToNull, 'dunning_blocking_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dunning_blocking_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($dunning_blocking_reason) && (mb_strlen($dunning_blocking_reason) > 1)) {
            throw new \InvalidArgumentException('invalid length for $dunning_blocking_reason when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['dunning_blocking_reason'] = $dunning_blocking_reason;

        return $this;
    }

    /**
     * Gets dunning_key
     *
     * @return string|null
     */
    public function getDunningKey()
    {
        return $this->container['dunning_key'];
    }

    /**
     * Sets dunning_key
     *
     * @param string|null $dunning_key dunning_key
     *
     * @return self
     */
    public function setDunningKey($dunning_key)
    {
        if (is_null($dunning_key)) {
            array_push($this->openAPINullablesSetToNull, 'dunning_key');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dunning_key', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($dunning_key) && (mb_strlen($dunning_key) > 1)) {
            throw new \InvalidArgumentException('invalid length for $dunning_key when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['dunning_key'] = $dunning_key;

        return $this;
    }

    /**
     * Gets internal_financial_document
     *
     * @return string|null
     */
    public function getInternalFinancialDocument()
    {
        return $this->container['internal_financial_document'];
    }

    /**
     * Sets internal_financial_document
     *
     * @param string|null $internal_financial_document Financial doc. processing: Internal financial doc. number
     *
     * @return self
     */
    public function setInternalFinancialDocument($internal_financial_document)
    {
        if (is_null($internal_financial_document)) {
            array_push($this->openAPINullablesSetToNull, 'internal_financial_document');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('internal_financial_document', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($internal_financial_document) && (mb_strlen($internal_financial_document) > 10)) {
            throw new \InvalidArgumentException('invalid length for $internal_financial_document when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['internal_financial_document'] = $internal_financial_document;

        return $this;
    }

    /**
     * Gets is_relevant_for_accrual
     *
     * @return bool|null
     */
    public function getIsRelevantForAccrual()
    {
        return $this->container['is_relevant_for_accrual'];
    }

    /**
     * Sets is_relevant_for_accrual
     *
     * @param bool|null $is_relevant_for_accrual Is relevant for accrual
     *
     * @return self
     */
    public function setIsRelevantForAccrual($is_relevant_for_accrual)
    {
        if (is_null($is_relevant_for_accrual)) {
            array_push($this->openAPINullablesSetToNull, 'is_relevant_for_accrual');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_relevant_for_accrual', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_relevant_for_accrual'] = $is_relevant_for_accrual;

        return $this;
    }

    /**
     * Gets sold_to_party
     *
     * @return string|null
     */
    public function getSoldToParty()
    {
        return $this->container['sold_to_party'];
    }

    /**
     * Sets sold_to_party
     *
     * @param string|null $sold_to_party sold_to_party
     *
     * @return self
     */
    public function setSoldToParty($sold_to_party)
    {
        if (is_null($sold_to_party)) {
            array_push($this->openAPINullablesSetToNull, 'sold_to_party');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sold_to_party', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sold_to_party) && (mb_strlen($sold_to_party) > 10)) {
            throw new \InvalidArgumentException('invalid length for $sold_to_party when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['sold_to_party'] = $sold_to_party;

        return $this;
    }

    /**
     * Gets partner_company
     *
     * @return string|null
     */
    public function getPartnerCompany()
    {
        return $this->container['partner_company'];
    }

    /**
     * Sets partner_company
     *
     * @param string|null $partner_company Company ID of Trading Partner
     *
     * @return self
     */
    public function setPartnerCompany($partner_company)
    {
        if (is_null($partner_company)) {
            array_push($this->openAPINullablesSetToNull, 'partner_company');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('partner_company', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($partner_company) && (mb_strlen($partner_company) > 6)) {
            throw new \InvalidArgumentException('invalid length for $partner_company when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 6.');
        }

        $this->container['partner_company'] = $partner_company;

        return $this;
    }

    /**
     * Gets purchase_order_by_customer
     *
     * @return string|null
     */
    public function getPurchaseOrderByCustomer()
    {
        return $this->container['purchase_order_by_customer'];
    }

    /**
     * Sets purchase_order_by_customer
     *
     * @param string|null $purchase_order_by_customer purchase_order_by_customer
     *
     * @return self
     */
    public function setPurchaseOrderByCustomer($purchase_order_by_customer)
    {
        if (is_null($purchase_order_by_customer)) {
            array_push($this->openAPINullablesSetToNull, 'purchase_order_by_customer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('purchase_order_by_customer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($purchase_order_by_customer) && (mb_strlen($purchase_order_by_customer) > 35)) {
            throw new \InvalidArgumentException('invalid length for $purchase_order_by_customer when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 35.');
        }

        $this->container['purchase_order_by_customer'] = $purchase_order_by_customer;

        return $this;
    }

    /**
     * Gets customer_group
     *
     * @return string|null
     */
    public function getCustomerGroup()
    {
        return $this->container['customer_group'];
    }

    /**
     * Sets customer_group
     *
     * @param string|null $customer_group customer_group
     *
     * @return self
     */
    public function setCustomerGroup($customer_group)
    {
        if (is_null($customer_group)) {
            array_push($this->openAPINullablesSetToNull, 'customer_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_group) && (mb_strlen($customer_group) > 2)) {
            throw new \InvalidArgumentException('invalid length for $customer_group when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['customer_group'] = $customer_group;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country Destination Country/Region
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            array_push($this->openAPINullablesSetToNull, 'country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($country) && (mb_strlen($country) > 3)) {
            throw new \InvalidArgumentException('invalid length for $country when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets city_code
     *
     * @return string|null
     */
    public function getCityCode()
    {
        return $this->container['city_code'];
    }

    /**
     * Sets city_code
     *
     * @param string|null $city_code city_code
     *
     * @return self
     */
    public function setCityCode($city_code)
    {
        if (is_null($city_code)) {
            array_push($this->openAPINullablesSetToNull, 'city_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('city_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($city_code) && (mb_strlen($city_code) > 4)) {
            throw new \InvalidArgumentException('invalid length for $city_code when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['city_code'] = $city_code;

        return $this;
    }

    /**
     * Gets sales_district
     *
     * @return string|null
     */
    public function getSalesDistrict()
    {
        return $this->container['sales_district'];
    }

    /**
     * Sets sales_district
     *
     * @param string|null $sales_district sales_district
     *
     * @return self
     */
    public function setSalesDistrict($sales_district)
    {
        if (is_null($sales_district)) {
            array_push($this->openAPINullablesSetToNull, 'sales_district');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_district', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_district) && (mb_strlen($sales_district) > 6)) {
            throw new \InvalidArgumentException('invalid length for $sales_district when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 6.');
        }

        $this->container['sales_district'] = $sales_district;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string|null
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string|null $region Region (State, Province, County)
     *
     * @return self
     */
    public function setRegion($region)
    {
        if (is_null($region)) {
            array_push($this->openAPINullablesSetToNull, 'region');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('region', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($region) && (mb_strlen($region) > 3)) {
            throw new \InvalidArgumentException('invalid length for $region when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets county
     *
     * @return string|null
     */
    public function getCounty()
    {
        return $this->container['county'];
    }

    /**
     * Sets county
     *
     * @param string|null $county county
     *
     * @return self
     */
    public function setCounty($county)
    {
        if (is_null($county)) {
            array_push($this->openAPINullablesSetToNull, 'county');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('county', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($county) && (mb_strlen($county) > 3)) {
            throw new \InvalidArgumentException('invalid length for $county when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['county'] = $county;

        return $this;
    }

    /**
     * Gets credit_control_area
     *
     * @return string|null
     */
    public function getCreditControlArea()
    {
        return $this->container['credit_control_area'];
    }

    /**
     * Sets credit_control_area
     *
     * @param string|null $credit_control_area credit_control_area
     *
     * @return self
     */
    public function setCreditControlArea($credit_control_area)
    {
        if (is_null($credit_control_area)) {
            array_push($this->openAPINullablesSetToNull, 'credit_control_area');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('credit_control_area', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($credit_control_area) && (mb_strlen($credit_control_area) > 4)) {
            throw new \InvalidArgumentException('invalid length for $credit_control_area when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['credit_control_area'] = $credit_control_area;

        return $this;
    }

    /**
     * Gets customer_rebate_agreement
     *
     * @return string|null
     */
    public function getCustomerRebateAgreement()
    {
        return $this->container['customer_rebate_agreement'];
    }

    /**
     * Sets customer_rebate_agreement
     *
     * @param string|null $customer_rebate_agreement Agreement (various conditions grouped together)
     *
     * @return self
     */
    public function setCustomerRebateAgreement($customer_rebate_agreement)
    {
        if (is_null($customer_rebate_agreement)) {
            array_push($this->openAPINullablesSetToNull, 'customer_rebate_agreement');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_rebate_agreement', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_rebate_agreement) && (mb_strlen($customer_rebate_agreement) > 10)) {
            throw new \InvalidArgumentException('invalid length for $customer_rebate_agreement when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['customer_rebate_agreement'] = $customer_rebate_agreement;

        return $this;
    }

    /**
     * Gets sales_document_condition
     *
     * @return string|null
     */
    public function getSalesDocumentCondition()
    {
        return $this->container['sales_document_condition'];
    }

    /**
     * Sets sales_document_condition
     *
     * @param string|null $sales_document_condition Number of the Document Condition
     *
     * @return self
     */
    public function setSalesDocumentCondition($sales_document_condition)
    {
        if (is_null($sales_document_condition)) {
            array_push($this->openAPINullablesSetToNull, 'sales_document_condition');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_document_condition', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_document_condition) && (mb_strlen($sales_document_condition) > 10)) {
            throw new \InvalidArgumentException('invalid length for $sales_document_condition when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['sales_document_condition'] = $sales_document_condition;

        return $this;
    }

    /**
     * Gets overall_sd_process_status
     *
     * @return string|null
     */
    public function getOverallSdProcessStatus()
    {
        return $this->container['overall_sd_process_status'];
    }

    /**
     * Sets overall_sd_process_status
     *
     * @param string|null $overall_sd_process_status Overall Processing Status (Header/All Items)
     *
     * @return self
     */
    public function setOverallSdProcessStatus($overall_sd_process_status)
    {
        if (is_null($overall_sd_process_status)) {
            array_push($this->openAPINullablesSetToNull, 'overall_sd_process_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('overall_sd_process_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($overall_sd_process_status) && (mb_strlen($overall_sd_process_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $overall_sd_process_status when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['overall_sd_process_status'] = $overall_sd_process_status;

        return $this;
    }

    /**
     * Gets overall_billing_status
     *
     * @return string|null
     */
    public function getOverallBillingStatus()
    {
        return $this->container['overall_billing_status'];
    }

    /**
     * Sets overall_billing_status
     *
     * @param string|null $overall_billing_status SD Billing Status
     *
     * @return self
     */
    public function setOverallBillingStatus($overall_billing_status)
    {
        if (is_null($overall_billing_status)) {
            array_push($this->openAPINullablesSetToNull, 'overall_billing_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('overall_billing_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($overall_billing_status) && (mb_strlen($overall_billing_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $overall_billing_status when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['overall_billing_status'] = $overall_billing_status;

        return $this;
    }

    /**
     * Gets accounting_posting_status
     *
     * @return string|null
     */
    public function getAccountingPostingStatus()
    {
        return $this->container['accounting_posting_status'];
    }

    /**
     * Sets accounting_posting_status
     *
     * @param string|null $accounting_posting_status Posting Status of Billing Document
     *
     * @return self
     */
    public function setAccountingPostingStatus($accounting_posting_status)
    {
        if (is_null($accounting_posting_status)) {
            array_push($this->openAPINullablesSetToNull, 'accounting_posting_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('accounting_posting_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($accounting_posting_status) && (mb_strlen($accounting_posting_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $accounting_posting_status when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['accounting_posting_status'] = $accounting_posting_status;

        return $this;
    }

    /**
     * Gets accounting_transfer_status
     *
     * @return string|null
     */
    public function getAccountingTransferStatus()
    {
        return $this->container['accounting_transfer_status'];
    }

    /**
     * Sets accounting_transfer_status
     *
     * @param string|null $accounting_transfer_status Status for Transfer to Accounting
     *
     * @return self
     */
    public function setAccountingTransferStatus($accounting_transfer_status)
    {
        if (is_null($accounting_transfer_status)) {
            array_push($this->openAPINullablesSetToNull, 'accounting_transfer_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('accounting_transfer_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($accounting_transfer_status) && (mb_strlen($accounting_transfer_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $accounting_transfer_status when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['accounting_transfer_status'] = $accounting_transfer_status;

        return $this;
    }

    /**
     * Gets billing_issue_type
     *
     * @return string|null
     */
    public function getBillingIssueType()
    {
        return $this->container['billing_issue_type'];
    }

    /**
     * Sets billing_issue_type
     *
     * @param string|null $billing_issue_type Billing Issue Type
     *
     * @return self
     */
    public function setBillingIssueType($billing_issue_type)
    {
        if (is_null($billing_issue_type)) {
            array_push($this->openAPINullablesSetToNull, 'billing_issue_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_issue_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($billing_issue_type) && (mb_strlen($billing_issue_type) > 1)) {
            throw new \InvalidArgumentException('invalid length for $billing_issue_type when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['billing_issue_type'] = $billing_issue_type;

        return $this;
    }

    /**
     * Gets invoice_list_status
     *
     * @return string|null
     */
    public function getInvoiceListStatus()
    {
        return $this->container['invoice_list_status'];
    }

    /**
     * Sets invoice_list_status
     *
     * @param string|null $invoice_list_status Invoice list status of billing document
     *
     * @return self
     */
    public function setInvoiceListStatus($invoice_list_status)
    {
        if (is_null($invoice_list_status)) {
            array_push($this->openAPINullablesSetToNull, 'invoice_list_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invoice_list_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($invoice_list_status) && (mb_strlen($invoice_list_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $invoice_list_status when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['invoice_list_status'] = $invoice_list_status;

        return $this;
    }

    /**
     * Gets ovrl_itm_general_incompletion_sts
     *
     * @return string|null
     */
    public function getOvrlItmGeneralIncompletionSts()
    {
        return $this->container['ovrl_itm_general_incompletion_sts'];
    }

    /**
     * Sets ovrl_itm_general_incompletion_sts
     *
     * @param string|null $ovrl_itm_general_incompletion_sts Incompletion Status (All Items)
     *
     * @return self
     */
    public function setOvrlItmGeneralIncompletionSts($ovrl_itm_general_incompletion_sts)
    {
        if (is_null($ovrl_itm_general_incompletion_sts)) {
            array_push($this->openAPINullablesSetToNull, 'ovrl_itm_general_incompletion_sts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ovrl_itm_general_incompletion_sts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($ovrl_itm_general_incompletion_sts) && (mb_strlen($ovrl_itm_general_incompletion_sts) > 1)) {
            throw new \InvalidArgumentException('invalid length for $ovrl_itm_general_incompletion_sts when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['ovrl_itm_general_incompletion_sts'] = $ovrl_itm_general_incompletion_sts;

        return $this;
    }

    /**
     * Gets overall_pricing_incompletion_sts
     *
     * @return string|null
     */
    public function getOverallPricingIncompletionSts()
    {
        return $this->container['overall_pricing_incompletion_sts'];
    }

    /**
     * Sets overall_pricing_incompletion_sts
     *
     * @param string|null $overall_pricing_incompletion_sts Pricing Incompletion Status (All Items)
     *
     * @return self
     */
    public function setOverallPricingIncompletionSts($overall_pricing_incompletion_sts)
    {
        if (is_null($overall_pricing_incompletion_sts)) {
            array_push($this->openAPINullablesSetToNull, 'overall_pricing_incompletion_sts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('overall_pricing_incompletion_sts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($overall_pricing_incompletion_sts) && (mb_strlen($overall_pricing_incompletion_sts) > 1)) {
            throw new \InvalidArgumentException('invalid length for $overall_pricing_incompletion_sts when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['overall_pricing_incompletion_sts'] = $overall_pricing_incompletion_sts;

        return $this;
    }

    /**
     * Gets invoice_clearing_status
     *
     * @return string|null
     */
    public function getInvoiceClearingStatus()
    {
        return $this->container['invoice_clearing_status'];
    }

    /**
     * Sets invoice_clearing_status
     *
     * @param string|null $invoice_clearing_status Clearing Status of Billing Document
     *
     * @return self
     */
    public function setInvoiceClearingStatus($invoice_clearing_status)
    {
        if (is_null($invoice_clearing_status)) {
            array_push($this->openAPINullablesSetToNull, 'invoice_clearing_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invoice_clearing_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($invoice_clearing_status) && (mb_strlen($invoice_clearing_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $invoice_clearing_status when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['invoice_clearing_status'] = $invoice_clearing_status;

        return $this;
    }

    /**
     * Gets billing_document_list_type
     *
     * @return string|null
     */
    public function getBillingDocumentListType()
    {
        return $this->container['billing_document_list_type'];
    }

    /**
     * Sets billing_document_list_type
     *
     * @param string|null $billing_document_list_type billing_document_list_type
     *
     * @return self
     */
    public function setBillingDocumentListType($billing_document_list_type)
    {
        if (is_null($billing_document_list_type)) {
            array_push($this->openAPINullablesSetToNull, 'billing_document_list_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_document_list_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($billing_document_list_type) && (mb_strlen($billing_document_list_type) > 4)) {
            throw new \InvalidArgumentException('invalid length for $billing_document_list_type when calling APIBILLINGDOCUMENTSRVABillingDocumentTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['billing_document_list_type'] = $billing_document_list_type;

        return $this;
    }

    /**
     * Gets billing_document_list_date
     *
     * @return string|null
     */
    public function getBillingDocumentListDate()
    {
        return $this->container['billing_document_list_date'];
    }

    /**
     * Sets billing_document_list_date
     *
     * @param string|null $billing_document_list_date Billing date for the invoice list
     *
     * @return self
     */
    public function setBillingDocumentListDate($billing_document_list_date)
    {
        if (is_null($billing_document_list_date)) {
            array_push($this->openAPINullablesSetToNull, 'billing_document_list_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_document_list_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['billing_document_list_date'] = $billing_document_list_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


